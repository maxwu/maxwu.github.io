<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Build k8s apps running both in and out of Cluster</title>
      <link href="/2021/10/20/Build-k8s-apps-running-both-in-and-out-of-Cluster/"/>
      <url>/2021/10/20/Build-k8s-apps-running-both-in-and-out-of-Cluster/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/FFtL6Fhm.png" title="Docker Helm Kubernetes" /></p><p>When building k8s apps, e.g. a reverse proxy to route APIs in given business domain, helm chart is a convenient choice to build and ship the apps. Sometimes if it's a prototype, your teammates or yourself would think of running it in local for quick verification in local cluster or a better debug way. This post described the tips to build an app running both in and out of the cluster</p><span id="more"></span><h2 id="problem-description">Problem Description</h2><p>In short, the app is expected to run in local for debug and quick demo using but it shall also be delivered in helm chart and deployed in realistic environment for a further step prototype with downstream services.</p><h2 id="clientset-configuration">ClientSet Configuration</h2><p>In my practice, the kube client is usually a ClientSet with CRD schemed and for convenience we could keep the k8s core scheme client together with CRD clientset as below. The kube client could be simply declared in the app sub package and injected from <code>main.go</code>.</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> KubeClientSet <span class="keyword">struct</span> &#123;</span><br><span class="line">  <span class="comment">// Your CRD schemed clientset</span></span><br><span class="line">Client    *cltv1.V1Client</span><br><span class="line">  <span class="comment">// K8s clientset</span></span><br><span class="line">K8sClient *kubernetes.Clientset</span><br><span class="line">  <span class="comment">// Host is extraced from K8sClient for service URL building</span></span><br><span class="line">Host      <span class="keyword">string</span></span><br><span class="line">InCluster <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then in the <code>NewKubeClient()</code> when the clientset is initialized, the host name is filled to adapt in and out of cluster cases. Where the flag <code>InCluster</code> could be resolved as <code>os.Getenv("KUBERNETES_SERVICE_HOST") != ""</code>. If an app is running in kubernetes cluster container and it's not intended to prevented to visit the cluster host API, the <code>KUBERNETES_SERVICE_HOST</code> shouldn't be empty.</p><p>Another reminder is k8s runtime pkg also defines <code>kubeconfig</code> CLI flag, so readers could use <code>flag.Lookup()</code> to check it first. <figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetKubeConfig</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> kubeconfig <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !InCluster() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Running out of cluster</span></span><br><span class="line">homeDir, _ := os.UserHomeDir()</span><br><span class="line">defaultKc := homeDir + <span class="string">&quot;/.kube/config&quot;</span></span><br><span class="line"><span class="comment">// k8s-sig runtime also defines kubeconfig flag. It might be removed in later version.</span></span><br><span class="line">kcFlag := flag.Lookup(<span class="string">&quot;kubeconfig&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> kcFlag == <span class="literal">nil</span> &#123;</span><br><span class="line">flag.StringVar(&amp;kubeconfig, <span class="string">&quot;kubeconfig&quot;</span>, defaultKc, <span class="string">&quot;path to Kubernetes config file&quot;</span>)</span><br><span class="line">kcFlag = flag.Lookup(<span class="string">&quot;kubeconfig&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">flag.Parse()</span><br><span class="line">kubeconfig = kcFlag.Value.String()</span><br><span class="line"><span class="keyword">if</span> kubeconfig == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">kubeconfig = defaultKc</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Loading kubeconfig from %s&quot;</span>, kubeconfig)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Running in cluster..&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> kubeconfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>At last, the <code>NewKubeClient()</code> shall check if it's running out of cluster, fill the <code>Host</code> field with the kube-proxy URL, e.g. <code>localhost:8888</code> if the kube-proxy for local test is <code>kubectl proxy --port=8888</code>. Otherwise, set the <code>Host</code> to its <code>kubeconfig.Host</code>.</p><h2 id="service-url-building">Service URL Building</h2><p>When a targeted service is located with namespace and service name, the URL could be built for in and out of cluster cases.</p><p>If it's running in cluster, the URL to a service is <code>&lt;svc_name&gt; + "." + &lt;svc_ns&gt; + ".svc." + CORE_DNS_HOST</code>. The coreDNS host usually is <code>cluster.local</code> but it's up to cluster configuration.</p><p>Otherwise, if it's running out of cluster and connecting to cluster API via kube-proxy, the URL is <code>Host + "/api/v1/namespaces/" + &lt;svc_ns&gt; + "/services/" + &lt;svc_name&gt; + "&lt;:port_name&gt;/proxy"</code>. <code>HOST</code> is the host value resolved in <code>NewKubeClient()</code> method.</p><p>The tricky point is the <code>&lt;:port_name&gt;</code>. If targeted port of the service is a named port, the port name is required.</p><h2 id="deployment-and-running">Deployment and Running</h2><p>Assume the RBAC is configured well, the k8s app is able to run out of cluster or be packaged up in a helm chart to be deployed in a cluster. To run it out of cluster for a quick demo, users need to launch kube-proxy first to expose the service from its running node.</p><h2 id="change-log">Change Log</h2><p>Oct, 2021: Initial post draft.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Golang </tag>
            
            <tag> ClientSet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang empty []byte serialized to nil not []</title>
      <link href="/2021/10/02/Golang-empty-byte-serialized-to-nil-not/"/>
      <url>/2021/10/02/Golang-empty-byte-serialized-to-nil-not/</url>
      
        <content type="html"><![CDATA[<p>Slices and arrays are differnet in golang serialization details. An uninitialized slice will be marshalled to JSON "null" value instead of "[]".</p><span id="more"></span><h2 id="uninitialized-slice">Uninitialized Slice</h2><p>Given a simple RESTful listing handler, the uninitialized slice could still be appended with query result iteration by overwriting the slice variable.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var s []string</span><br><span class="line">for _, item := range someResult &#123;</span><br><span class="line">  s = append(s, item)</span><br><span class="line">&#125;</span><br><span class="line">res, _ := json.Marshal(struct&#123; Items []string &#125;&#123;Items: s&#125;)</span><br><span class="line">fmt.Printf(&quot;res = %s\n&quot;, res)</span><br></pre></td></tr></table></figure><p>However, when the query result is empty, the uninitialized slice will be encoded to <code>null</code>. In this case, if <code>someResult</code> is empty, the output will be <code>res = &#123;"Items":null&#125;</code>. It's sometimes unfriendly to downstream APIs - usually the listing request expects an empty JSON array but not a null result.</p><h2 id="initialized-slice">Initialized Slice</h2><p>In the above case, the slice shall be initialized first. For an empty start value, it could be initialized to zero sized and the re-slice procedure will automatically extend it in go-runtime doubling algorithm.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var s []string = make([]string, 0) // or s:= []string&#123;&#125;</span><br><span class="line">for _, item := range someResult &#123;</span><br><span class="line">  s = append(s, item)</span><br><span class="line">&#125;</span><br><span class="line">res, _ := json.Marshal(struct&#123; Items []string &#125;&#123;Items: s&#125;)</span><br><span class="line">fmt.Printf(&quot;res = %s\n&quot;, res)</span><br></pre></td></tr></table></figure><p>If the query result is empty, it will still print <code>res = &#123;"Items":[]&#125;</code>. Same tips on <code>map</code>, an uninitialized reference type will be marshalled to "null" not an empty value.</p><h2 id="change-log">Change Log</h2><p>Oct, 2021: Initial post draft.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Build Declarative APIs</title>
      <link href="/2021/08/11/Build-Declarative-APIs/"/>
      <url>/2021/08/11/Build-Declarative-APIs/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/SB7st1gl.png" title="Declarative Interface" /></p><p>Declarative APIs or declarative models are popular in k8s cloud native apps. This post shares the experience and thoughts on learning and building a declarative interface prototype.</p><span id="more"></span><h2 id="declarative-model">Declarative Model</h2><p>A declarative software model, usually compared to imperative interface, includes a concept model of northbound scheme or DSL which describes a desired state of system and a southbound provider as a controller of async reconciliations.</p><h3 id="model-overview">Model Overview</h3><ul><li><strong>Northbound</strong>:<ul><li>A scheme or DSL to describe desired state of system</li><li>From users' view, it's the state being requested to declarative API, not the ways to do it</li><li>Usually the request is processed in an async way, e.g. ordering way</li></ul></li><li><strong>Southbound</strong><ul><li>One or more southbound providers in backend</li><li>The app could carry a default provider in most of cases, e.g. to call a traditional RESTful API in backend</li><li>The provider would reconcile the in scope object states towards desired states by:<ul><li>Calculate the state diff, usually in top to bottom or state tree model</li><li>The processing could be distributed and usually in async with workers</li><li>Once the calculated diff is empty, stop reconciliation</li><li>Generate requests to reconcile the targeted objects<ul><li>It's up the system dependencies but the experience is to reconcile one step at a time</li><li>If there are still more steps to go, complete current reconciliation step and requeue the request</li><li>Take care of low level requirements on the generated downstream requests<ul><li>Auth-n and auth-z with tenancies</li><li>Rate-limit with tenancies and cloud service provider</li><li>Charging or order management and traceabilities</li><li>Payload formats</li><li>Related east-west interactions, e.g. provider dependencies</li></ul></li></ul></li></ul></li></ul></li></ul><p>A typical example is the Terraform with providers.</p><h3 id="benifits-or-problems-to-resolve">Benifits or Problems To Resolve</h3><ul><li>Reduce Human Error</li></ul><p>Reports show around 1/5 outage incidents occur because of human error. In an imperative model, users need to consider each detail API request, version, phased validation and usually programmatically manage the intermediate states in sequence or async ways. From another point of view, the user end implements a work-flow implicitly. It increases the chances to introduce human errors due to the conflicts between humanity and complexity.</p><ul><li>Better and Earlier Validation</li></ul><p>(TBC)</p><ul><li>Hide the Technical Details</li></ul><p>With declarative interface, users don't deal with number of versions for all the APIs. There could still be version of scheme, which is an universal version or grouped versions in a relatively simpler way. The backend services could evolve without user end impacts.</p><h2 id="provider-design">Provider Design</h2><p>(TBC)</p><h2 id="open-questions">Open Questions</h2><ul><li>Benifits and examples of manifest model</li></ul><p>(TBC)</p><h2 id="change-log">Change Log</h2><p>Nov24, 2021: Continue drafting the model overview section. Mar15, 2021: Initial post draft.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> Declarative API </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> Declarative Model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acquired Oracle Cloud Infrastructure 2020 Certified Architect Associate Cert</title>
      <link href="/2021/05/10/Acquired-Oracle-Cloud-Infrastructure-2020-Certified-Architect-Associate-Cert/"/>
      <url>/2021/05/10/Acquired-Oracle-Cloud-Infrastructure-2020-Certified-Architect-Associate-Cert/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/PomqC9ws.png" title="OCI Architect Associate Cert Link" /></p><p>OCI (Oracle Cloud Infrastructure) launched free learning and certifcate exam promotion in 2021. I took the exam on May 10, 2021 and acquired the score 89% at the firs attempt. A <a href="https://www.credly.com/badges/aa7fb3e1-0e2c-41f2-b4ad-a3c862bf6265">OCI Certificate Badge</a> will be available within couple of steps in a following email when you knocked the cert exam - usually within 2 working days. Here are some tips shared with readers.</p><span id="more"></span><ul><li><p>Due to pandemic, learners can choose to take the exam at home. I registered with Pearson and took the exam with pearson apps on my MacBook. A kind reminder to to run the PC scan prior to exam date to find if there is any violations - candidates need to remove the violated apps to keep a compliant environment. Also it's suggested to tidy up the room for your exam. Personally I will suggest to temporarily move all books, screens, and all things with printed letters out of room and it's better to give yourself a couple of days to get used to it.</p></li><li><p>The exam style is similar to AWS cert exam. However, the weight among the exam guideline mentioned areas are not described with percentage. Some of the topics are not available to practice with OCI free tier account. It's not required to practice them but if it's possible, getting some credit to play around will be helpful.</p></li><li><p>The last chapter of Oracle University free training offers a sample exam. It's suggested to use the sample exam to get familiar with the multiple-choice exam style and pace. The author suggests readers to keep 1 min for 1 problem and reminder yourself don't spend much time on a single problem.</p></li><li><p>Security is a significant feature and a saling point of OCI. Readers are suggested to take special care on the availability, integrity and confidentiality, e.g. DDoS attack prevention and SSL certificate configurations.</p></li></ul><p>(TBC)</p><p>PS: The promotion of free cert exam is extended to end of year. Hopefully learner around the world could make a better use of time in pandemic while WFH(work-from-home).</p><h2 id="change-log">Change Log</h2><p>May10, 2021: Took OCI Architect Associate Cert Exam and acquired the cert</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> OCI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> Certificate </tag>
            
            <tag> OCI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020, The Silent Year</title>
      <link href="/2021/05/01/2020-The-Silent-Year/"/>
      <url>/2021/05/01/2020-The-Silent-Year/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/PNmam0sm.jpg" title="Otaki Kite Festival" /></p><blockquote><p>The picture was taken on Otaki Kite Festival 2020. The little penguin, teddy bear and other little buddies are driving the virus(played by a puffer fish kite) out of the their home land. 2 months later, the country-wide lock-down is announced.</p></blockquote><h2 id="april-2020-to-april-2021-the-silent-year.">April 2020 to April 2021, the silent year.</h2><span id="more"></span><p>I started new job as Senior Cloud Native Developer to develop and maintain the devops pipelines and stand cloud stacks for global internal partners from Dec 2019. The first season was full of fun. We spent a happy holiday back to Nanjing, visited relatives and friends, enjoyed the Shanghai Disney tour. I walked through the pipelines, rehearsalled small innovation, developed tools to streamline the stack standing works and glad to see the team liked it - on the united objective to speed up cloud stack delivery. I also flied to Sydney for an on-site training.</p><p><img src="https://i.imgur.com/M5wPmDUm.jpg" title="Lockdown in Yard Tree House" /></p><blockquote><p>Revised 6 months later</p></blockquote><p>The covid-19 suddenly changed many things. We stayed home together to fight the pandemic. We placed orders online - I still remember in the first few weeks the countdown delivery slots were only available on Mon and Wed certain time, it became fully booked quickly. We struggled to learn how do do home schooling - which was hard for young kids to focus on zoon screen and read interested information from the unfamiliar atomsphere of anxiety. I confess I didn't realize human beings have such a strong adaptability to get ourselves used to new life pattern quietly.</p><p>One of the facts is there is no blog update from April 2020 to April 2021. We were not always locked down - actually in most of time there were no realistic restrictions to domestic activities. Material shortage was resolved in 2-3 months. I had the chance to design and implemnet the orchestration core python package and it worked beyond expectations. Then I joined another project where my initiatives were implemented to equip a data-model to Etcd data and off-load the network-flow applications. As long as working from home, I could see a high productivity. In life balance, we spent a lovely Christmas holiday in Hawksbay. I read a list of books via eReader on Python, Golang, k8s, walked thru blogcasts like blockchain and history topics. I even learned how to build mobile apps with React-Native and built new toys with my own firebase account. During the phase, I created an online group of badminton - it has 50+ local members now and we play games each Sat. However, there were also many things happened which we could only absorb by ourselves with family supports. Our behavior patterns are changed, slowly and unnoticeably in the background.</p><p>But when I take a retrospective, I could feel lackness of participation. It's not straightly related to productivity or innovation - it's an engagement with buddies in multiple dimensions, local community, technical meetups, friends and family. When we reduce face-to-face social activities, the online activities are also impacted. In facts I have a better productivity in work and self-studies but less chance to summarize the progressed topics. The action plan is straight - looking around and reaching out to people.</p><p>I draft a short list of topics and start to take periodical time to have a look around, summarize and share the thoughts and feelings. Buddies know I've taken systemtical badminton training for a while, yes - badminton for sure is one of them. I will share the lessons and experiences in movement correction, footworks, power stroke, jump smash and how to do self-training in yard. Large size event is still restricted - for example the Cloud Native Summit NZ has been postponed - but small get-gether within a few people is still okay for the time being - there are plenty of chances to join local associate catch-ups and local golang, cloud, rust workshops.</p><p>The list includes below topics and targeted to 50% coverage in 12 months</p><ul><li><p>Python Programming Tips: generic data model, borg pattern, commander pattern</p></li><li><p>Golang Programming Topics: k8s operator programming, CRD object model, declarative API design, k8s ingress management</p></li><li><p>Devops Topics: migrating apps in helm chart, charts for DevOps, open application model</p></li><li><p>Badminton Topics: Footworks, Power Stroke, Smash Practice Points, attack patterns in mixed double games</p></li><li><p>(Pending): Sharing the stories in India and US travels of early years</p></li><li><p>(Pending): Wellington attractive locations, Local technical communities</p></li></ul><p>Hi 2021, a late greeting 🤝</p><h2 id="change-log">Change Log</h2><p>Nov21, 2021: Re-post the image and re-deploy with updated hexo config. May01, 2021: Initial post draft.</p>]]></content>
      
      
      <categories>
          
          <category> Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Covid19 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Borg Pattern in Python Programming</title>
      <link href="/2021/04/19/Borg-Pattern-in-Python-Programming/"/>
      <url>/2021/04/19/Borg-Pattern-in-Python-Programming/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/cWIpOi8s.png" title="Borg" /></p><p>"Borg" are a hive-mind collective - Star Trek. The term describes a pattern of shared information among multiple instances :_)</p><p>In most cases of app state sharing, the design really cares about a set of states can be share among components not whether it's one single object in runtime. Python Borg Pattern is easier and flexible to create shared states for other packages to access and use. It's helpful in configuration management, global IDs or session reusing.</p><span id="more"></span><p>(TBD)</p><h2 id="references">References</h2><ul><li><a href="https://www.oreilly.com/library/view/python-cookbook/0596001673/ch05s23.html">Oreilly Python Cookboo</a></li></ul><h2 id="change-log">Change Log</h2><p>Apr19, 2017: Initial post draft.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Borg </tag>
            
            <tag> Shared State </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Multi-Stage Build to Reduce Docker Image Size</title>
      <link href="/2019/11/24/Using-Multi-Stage-Build-to-Reduce-Docker-Image-Size/"/>
      <url>/2019/11/24/Using-Multi-Stage-Build-to-Reduce-Docker-Image-Size/</url>
      
        <content type="html"><![CDATA[<p><a href="https://imgur.com/adsP1G1"><img src="https://i.imgur.com/adsP1G1t.png" alt="Docker on the Producing Line" /></a></p><p>The multi-stage supports in docker image building was introduced with Docker v17.05 in 2017. This post summarizes the practical points which can benefit the development experience, secure the data and reduce the docker image size.</p><span id="more"></span><h2 id="multi-stage-in-docker-image-building">Multi-Stage in Docker Image Building</h2><p>The multi-stage docker image build, in my practices, shows a way to resolve thress issues.</p><ul><li><p>Data Security Supports: If there are previous steps to download the source, setting up the toolchain then there is a risk to leak information via incomplete deletion or to introudce more vulnerability by leaving the artifacts building toolchain on product images. Some cloud solution vendor offers special solution to build artifacts with homogeneous images and only delivery final artifacts in last image.</p></li><li><p>Reducing Docker Image Size: Docker image build generate new layer on each command and the AUFS applies <code>Lazy Deletion</code>. If caches and temporary files are removed in second command, the size wouldn't be reduced from volume but just those files are marked as deleted in the new layer. As pointed by many <code>Dockerfile Best Practice</code> or guidelines, there are recommended tricky steps to keep the <code>dotnet build</code>, <code>yun install</code> or <code>apt-get install</code> followed by purges. Multi-stage build could resolve it by copying artifacts from another stage.</p></li><li><p>Easy to Maintain Dockerfile: The above two issues could be mitigated with well configured multiple images in a procedure to deliver the final artifacts only in last image. However, the Dockerfiles would have dependencies and the Dockerfile would be hard to maintain.</p></li></ul><p>Multi-stage build was introduced to divide the docker image build into multiple stages which can pass artifacts from one to another and eventually ship the final artifacts in the last stage.</p><h2 id="examples-to-reduce-docker-image">Examples to Reduce Docker Image</h2><p>Take an example of upgrading googl-chrome browser version. The base image is <code>cypress/browers</code>.</p><h3 id="upgrade-google-chrome-without-purging-the-cache">Upgrade Google-Chrome without Purging the Cache</h3><p>The Dockefile is straight through: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM cypress/browsers:node11.13.0-chrome73</span><br><span class="line"></span><br><span class="line">ENV TZ=Pacific/Auckland</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install google-chrome-stable -y &amp;&amp; \</span><br><span class="line">    google-chrome --version</span><br></pre></td></tr></table></figure></p><p>From the logs, it shows chrome browser v78 replaced original v73. To check the image size, either <code>docker images</code> with labels/tags to show a summary on matched images or <code>docker inspect</code> command can show image details.</p><p>Then <code>docker inspect cypress3-chrome-updated-without-purge | jq '.[0].Size'</code> would show the image szie <code>1520046216</code> in Bytes. Alternatively, the docker command native <code>JSON</code> filer could be applied to get the same result on given image <code>docker inspect cypress3-chrome-updated-without-purge --format='\&#123;\&#123;.Size\&#125;\&#125;'</code>.</p><h3 id="upgrade-google-chrome-and-purge-the-cache-immediately">Upgrade Google-Chrome and Purge the Cache Immediately</h3><p>Apply the recommended hacks to clean the cache on every command:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM cypress/browsers:node11.13.0-chrome73</span><br><span class="line"></span><br><span class="line">ENV TZ=Pacific/Auckland</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install google-chrome-stable \</span><br><span class="line">    -y --no-install-recommends &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">    google-chrome --version</span><br></pre></td></tr></table></figure><p>This way the image size is reduced to 1503569359 Bytes. 200MB caches are removed from the same layer to upgrade chrome browser.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; docker inspect cypress3-chrome-updated-cache-purged  --format=&#x27;&#123;&#123;.Size&#125;&#125;&#x27;</span><br><span class="line">&gt; 1503569359</span><br></pre></td></tr></table></figure><p>Obviously the Dockerfile is a bit harder to maintain because each step was appended with all kinds of purge commands. If there is no convenient way to purge right away or it is difficult to maintain such code in one command, a script might be drafted and copied to the intermediate layers to support such a command in one step.</p><h3 id="generate-the-same-image-in-multi-stage-build">Generate the Same Image in Multi-Stage Build</h3><p>With a quick check, the google chrome is maintained in <code>/opt/google/chrome</code> folder and as an image for experiments, it is okay not to consider apt-get checksums. The new Dockerfile is drafted as below:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM cypress/browsers:node11.13.0-chrome73 as stage1</span><br><span class="line"></span><br><span class="line">ENV TZ=Pacific/Auckland</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install google-chrome-stable \</span><br><span class="line">    -y --no-install-recommends &amp;&amp; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">    google-chrome --version</span><br><span class="line"></span><br><span class="line">FROM cypress/browsers:node11.13.0-chrome73</span><br><span class="line">COPY --from=stage1 /opt/google/chrome /opt/google/chrome</span><br><span class="line">RUN google-chrome --version</span><br></pre></td></tr></table></figure><p>The first image is also homogeneous and it just contribute the google-chrome binary files. Then the final image <code>copied</code> the binaries directly to corresponding folder.</p><p>Test the google-chrome version in cli.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; docker run -it cypress3-chrome-updated-multi-stages google-chrome --version</span><br><span class="line">&gt; Google Chrome 78.0.3904.108</span><br></pre></td></tr></table></figure><p>Check the image size and it shows even a smaller size than that from Dockerfile to purge apt-get system caches because this solution only copies the required folder.</p><p><code>docker inspect cypress3-chrome-updated-multi-stages  --format='\&#123;\&#123;\.Size\&#125;\&#125;'</code> reports size as <code>1501127204</code> Bytes.</p><h3 id="summary">Summary</h3><ul><li><p>Less information left on image: No need to keep addition YUM repos if it is an RHEL image, no extra keys left, more important, no development phase configuration or source code left on image.</p></li><li><p>Smaller size: Since copying the artifacts is the clean way to add only requested files to final image, the size is only increased for neccessary.</p></li></ul><table><thead><tr class="header"><th>Building way</th><th style="text-align: center;">Size</th></tr></thead><tbody><tr class="odd"><td>Install pkg from apt-get</td><td style="text-align: center;">1520046216</td></tr><tr class="even"><td>Install pkg and purge</td><td style="text-align: center;">1503569359</td></tr><tr class="odd"><td>Copying binaries from previous stage</td><td style="text-align: center;">1501127204</td></tr></tbody></table><h2 id="further-discussion">Further Discussion</h2><p>A better chance to apply multi-stage docker image building is to support multi-stage compilation. One typical example is to upgrade git version on an RHEL Jenkins Slave Image. RHEL official YUM repo only supplies the old version of git client. Which doesn't support the advanced functions as Dotnet Core NuGet operations. In this case, the solution is to download git source code and install gcc toolchain to build it locally. Without multi-stage image build, the procedure would request a cross compilation on source code in separate script or build it on docker image directly for homogeneous arch. Multi-stage docker image build can maintain the steps in one single Dockerfile.</p><p>On the other side, the sample in this post is not an apt example. If only the chrome binary executable files under /opt/google/chrome are updated staightly, the /etc/alternative would still point to chrome-stable binary but the apt pkg management DB still regard it as the original version v73, not the current version and the dependencies check won't cover v78 neither. Like Sun Solaris package system, it is possible to overwrite the package DB but which would request one more command and consequently a new docker image layer. The apt package DB is located at /var/lib/apt/lists.</p><p>So apply multi-stage image build for source code compilation especially multi-stage compilation, decompressed binary package as Node.js.</p><p>(TBC)</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Still On the Way to Cloud</title>
      <link href="/2019/11/11/Still-On-the-Way-to-Cloud/"/>
      <url>/2019/11/11/Still-On-the-Way-to-Cloud/</url>
      
        <content type="html"><![CDATA[<p>It is the last quarter of 2019. A large number of organizations already deployed docker containerized applications in production environment and usually the services are orchestrated with kubernetes or Openshift. As the well known saying, just moving applications to cloud doesn't mean clouding, we are still in the middle of way to cloud. This post is also a retrospective on the issues discovered this year on migrating traditional technical stacks to cloud.</p><p>(WIP)</p><figure><img src="https://i.imgur.com/zApN0Gsm.jpg" alt="Docker_Kube" /><figcaption aria-hidden="true">Docker_Kube</figcaption></figure><span id="more"></span><h2 id="typical-issues-on-sensitivity-of-container-environment">1 Typical issues on sensitivity of container environment</h2><h3 id="dotnet-core-2.1-pod-restarted-on-oom-killer">1.1 Dotnet core 2.1 Pod restarted on OOM Killer</h3><p>This was the first issue I spent a big effort this year to realize that popular technical stacks were still not ready to adapt themselves to container environment. Typically if a managed system reads the mount point <code>/proc/self/mountinfo</code> as on regular Linux platform but not the <code>/proc/self/cgroup</code>, the memory limits are not observable from the memory management.</p><p>The github link is https://github.com/dotnet/coreclr/issues/13489. The fix includes https://github.com/dotnet/coreclr/pull/13488 and https://github.com/dotnet/coreclr/pull/15297 to check cgroup resource limits and expose docker processor counts to CLR environments.</p><p>The phenomenon was dotnet core pod restarted more than 200 times per day and openshift monitor portal showed <code>OOM Killer</code> in event description. It was lukcy the production environment deployed with replica number 4 so fintech service was not interrupted. To debug this issue, an image of LLDB on dotnet core was created to detect threading model and high memory blocks (https://maxwu.me/2019/04/15/Debug-dotnet-core-with-LLDB-on-RHEL-Image/). Per my observation, the high runners are Newtonsoft JSON entities because lots of memory were consumed by dotnet string buffers.</p><h3 id="jenkins-pipeline-ran-out-of-memory">1.2 Jenkins Pipeline ran out of memory</h3><p>This issue is actually a JVM configuration problem. It was dicovered when Jenkins pod ran slowly in one day and Jenkins pod was observed to restart within 72hr everytime. Our Pipeline was a typical Jenkins groovy Pipeline and it communicated to two kinds of slaves: (1) the dynamical jenkins slave created on demand, which were based on different slave images with required technical stack; (2) windows slaves for specific tasks which could only complete by Windows nodes for time being.</p><p>(TBC)</p><h3 id="cypress-failed-to-launch-xvfb-in-docker-container">1.3 Cypress failed to launch XVFB in docker container</h3><p>Cypress is the in browser javascript UI test framework I picked for team last year (2018) when migrated from host based Selenium to Pipeline.</p><p>(TBC)</p><h3 id="golang-routine-gomaxprocs-issue-in-container-environment">1.4 Golang Routine GOMAXPROCS Issue in Container Environment</h3><p>Go developers could use <code>runtime.GOMAXPROCS()</code> to set the threads limit of go runtime (number of P of MPGmodel) or read it when setting value is <code>0</code>. From golang v1.5 the default value is the core number of CPU. However, when running in a container, the go runtime still read the core numbers from host, not the container resource limit.</p><p>There is a workaround from Uber <code>automaxprocs</code> lib. By <code>import _ "go.uber.org/automaxprocs"</code>, the <code>automaxprocs</code> lib initializer will read the core number from container <code>cgroup</code> limit and set the <code>GOMAXPROCS</code> automatically.</p><p>(TBC)</p><h2 id="typical-issues-on-container-orchestration">2 Typical issues on container orchestration</h2><h3 id="orchestrating-cypress-tests-in-map-reduce-model-on-kube-cloud">2.1 Orchestrating Cypress tests in Map-Reduce model on kube cloud</h3><h3 id="rolling-out-springboot-pod-generated-alert-flooding-on-splunk">2.2 Rolling out springboot pod generated alert flooding on splunk</h3><h2 id="retrospective">3 Retrospective</h2><h2 id="change-log">Change Log</h2><p>May 01, 2021: Add golang routing burst issue Nov 12, 2019: Initial post with intro part and the outline.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> Docker </tag>
            
            <tag> Openshift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Bite of SpringBoot</title>
      <link href="/2019/09/28/A-Bite-Of-Springboot/"/>
      <url>/2019/09/28/A-Bite-Of-Springboot/</url>
      
        <content type="html"><![CDATA[<p>The journey to migrate dotnet experiences to springboot and build a demo app from scratch, deploy it to kubernetes with explanation on technical points and the cloud native practice notes.</p><span id="more"></span><h2 id="background">Background</h2><p>As a pythonist on system level, I built several my experience with Java Web Frameworks are mostly on structs MVC as an UI backend to interact with JQuery to present the status and management from message security gateway products. However, according to the reality of circumstance, framework seems much more impressive than computer science and ways of thoughts.</p><p>It's the time to take a bite on Springboot and see what's inside.</p><h2 id="environment">1 Environment</h2><p>In brief, Jetbrain IntelliJ community version on Mac. I used to program Python on PyCharm and IntelliJ shares similar features on Java IDE.</p><p>Java toolchain will be organized in Gradle. Maven is an alternative which I used in previous test automation tools. However, gradle is graceful and brief.</p><p>Eventually the service will be wrapped in kubernetes pod but it is not the first step.</p><h2 id="create-a-new-springboot-app">2 Create A New Springboot App</h2><p>Springboot web site offers <code>curl</code> interface to generate a demo project to start from. Visit https://start.spring.io on cli tool curl will show the manual on how to generate springboot scaffold.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://start.spring.io</span><br><span class="line"># The response shows a manual page with below samples.</span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">To create a default demo.zip:</span><br><span class="line">$ curl https://start.spring.io/starter.zip -o demo.zip</span><br><span class="line"></span><br><span class="line">To create a web project using Java 11:</span><br><span class="line">$ curl https://start.spring.io/starter.zip -d dependencies=web \\</span><br><span class="line">-d javaVersion=11 -o demo.zip</span><br><span class="line"></span><br><span class="line">To create a web/data-jpa gradle project unpacked:</span><br><span class="line">$ curl https://start.spring.io/starter.tgz -d dependencies=web,data-jpa \\</span><br><span class="line">   -d type=gradle-project -d baseDir=my-dir | tar -xzvf -</span><br><span class="line"></span><br><span class="line">To generate a Maven POM with war packaging:</span><br><span class="line">$ curl https://start.spring.io/pom.xml -d packaging=war -o pom.xml</span><br></pre></td></tr></table></figure><p>I chose a demo web project using Java 8. Which means, a wrapped dependency of <code>spring-boot-starter-web</code>. Springboo will interrepte it to real dependencies.</p><p><code>curl https://start.spring.io/starter.zip -d dependencies=web -d javaVersion=8 -d type=gradle-project -o demo.zip</code></p><p>Alternatively, open IntelliJ menu to "New Project" will also provide options to visit <code>start.spring.io</code> within the IDE UI to create project scaffold.</p><h2 id="launch-springboot-demo">3 Launch Springboot Demo</h2><p>When importing the scaffold project to IntelliJ, a run configuration with main class on the <code>DemoApplication</code> , where the annotation <code>@SpringBootApplication</code> is applied, will be created. Run the configuration "DemoApplication" will launch Springboo web app in couple of seconds. However, visiting <code>localhost:8080</code> will still return an error page since there is nothing to respond.</p><p>For the gradle configured project, the IntelliJ would spend a bit while to download gradle dependencies.</p><p>A simple controller class is added to respond string content to path <code>/</code>. Thanks to IntelliJ, the annotations are auto-completed. Key points here are "GetMapping" annotation to specify the path of <code>/</code> and "RespenseBody" annotation t</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Home&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Like <code>npm run</code> but more verbose than the node.js cmd, luanch <code>./gradlew tasks</code> or directly run <code>gradle tasks</code> in root folder of project would print out a task list which can be run by gradle plugin. If it is the first time running <code>gradle</code>, the gradle daemon shall be luanched and basic environment/dependencies checks would be performed first.</p><p><code>gradlew</code> and <code>gradle.bat</code> are artifacts generated by <code>gradle warpper</code> task which empower environments with gradle preinstalled to run gradle toolchain commands.</p><p>After updating the above controller class, run <code>gradle bootRun</code> would also run the springboot application to server <code>localhost:8080</code>. In the browser, the simple content "Home" is fetched and rendered.</p><h2 id="build-docker-image-for-springboot-app">4 Build Docker Image for Springboot App</h2><p>As usual there are multiple ways to build docker images as first step to containerize the app. Thanks to the gradle community <code>com.palantir.docker</code> plugin is picked up in this demo project.</p><p>The gradle pluin could be applied in build.script DSL or plugin DSL. This experiment applies the plugin DSL and build docker image with Dockerfile rather than docker plugin DSL to reuse author's existing Dockerfile experiences for now.</p><h3 id="add-plugin">4.1 Add Plugin</h3><p>Insert this plugin reference to build.gradle <code>id 'com.palantir.docker' version '0.22.1'</code>.</p><h3 id="introduce-docker-task">4.2 Introduce <code>docker</code> Task</h3><p>The task is defined as below:</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">docker &#123;</span><br><span class="line">dependsOn build</span><br><span class="line">name <span class="string">&quot;$&#123;project.group&#125;/$&#123;bootJar.baseName&#125;&quot;</span></span><br><span class="line">files bootJar.archivePath</span><br><span class="line">buildArgs([<span class="string">&#x27;JAR_FILE&#x27;</span>: <span class="string">&quot;$&#123;bootJar.archiveName&#125;&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-the-dockerfile">4.3 Create the Dockerfile</h3><p>To keep the image slim, alpine jdk8 image is picked as base image.</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="variable">$&#123;JAR_FILE&#125;</span> app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="launch-container-locally">4.4 Launch Container Locally</h3><p>With above Dockerfile and the <code>docker</code> task inserted to gradle.build script, run <code>gradle docker</code> would (re)build the app image with dependencies. Quickly test the docker image by launching it locally, <code>docker run -p 8080:8080 -t com.example/demo</code>. Then open browser on URL <code>http://localhost:8080/</code> the same contents are responded "Home".</p><h2 id="deploy-to-kubernetes">5 Deploy to Kubernetes</h2><p>(To be continued)</p><h2 id="change-log">Change Log</h2><p>Sep 22, 2019: Configuration and start a new springboot app. Sep 28, 2019:</p>]]></content>
      
      
      <categories>
          
          <category> Microservice </category>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fix home brew updating failure</title>
      <link href="/2019/08/17/Fix-home-brew-updating-failure/"/>
      <url>/2019/08/17/Fix-home-brew-updating-failure/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="problem-description">Problem Description</h2><p>After a few weeks sorting up and working with Python3 on my Mac Book Pro, the brew update failed to update and reported an error of aws command not found.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; brew update</span><br><span class="line">aws codecommit credential-helper $@ get: aws: command not found</span><br><span class="line">fatal: could not read Username for &#x27;https://github.com/Homebrew/homebrew-boneyard&#x27;: terminal prompts disabled</span><br><span class="line"></span><br><span class="line">^Cerror: https://github.com/caskroom/homebrew-cask did not send all necessary objects</span><br></pre></td></tr></table></figure><h2 id="resolution">Resolution</h2><p>The solution is straight through. Since aws cli is not found, it is a missed step in migrating Mac development environment from Python2 to Python3 -- the corresponding aws cli is not installed well to Python3.</p><p>My python environment is managed via PyEnv. When a new python version is installed, the upstream depeendencies are not maintained via requirement.txt so it needs a manual step to re-enable awscli.   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;pip3 install awscli --upgrade</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Brew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Incrementally measure code coverage</title>
      <link href="/2019/06/09/Incrementally-measure-code-coverage/"/>
      <url>/2019/06/09/Incrementally-measure-code-coverage/</url>
      
        <content type="html"><![CDATA[<p>For new app or repos with a close to ideal level code coverage, the populor code coverage solution on coverage metrics threshold check would be efficient. However, to maintain a legacy or low coverage level repo, it is not eonough to just check coverage percentage on metrics. This post described an idea to check coverage json diff with istanbul-diff on node.js repos.</p><span id="more"></span><h2 id="problem">Problem</h2><p>Usually in Jenkins Pipeline or SAAS DevOps infrastructure, the code coverage check is implemented with <code>Cobertura</code> or cloud service <code>Coverage</code>.</p><p>As described in previous posts, here are samples of <code>Coverage</code> service and on-premise <code>Cobertura</code>.</p><p><a href="https://i.imgur.com/gtm74Pr.png"><img src="https://i.imgur.com/gtm74Prm.png" alt="Coverage" /></a> <a href="https://i.imgur.com/YHyhOJ7.png"><img src="https://i.imgur.com/YHyhOJ7t.png" alt="Cobertura" /></a></p><p>The coverage check is implemented with metrics and thresholds, in other wors, the score of code coverage on current baseline. This won't be a problem when the repo has an ideal coverage leve.</p><p>For example, if the threshold is set to 95% on lines, functions and branches thress metrics, when the change breaks the threshold, the coverage check will fail.</p><p>On an legacy repo, this would potentially be a problem with a low coverage level. For an example, if the repo has 45% overall lines coverage. On one of the feature branch, the code change lower down some source code coverage by accidently introduced a wrong condition in Jest. But the feature branch aslo introduced a batch of new source and keep 100% on these new added source filed. Therefore, it is possible to see an increase in <code>Total Coverage</code>. And due to a lower level of <code>Cobertura</code> threshold on existing code, this cannot be discovered by the coverage check at all. The feature branch can be merged to master branch with successful coverage endorsement.</p><p>Above is a real case in coverage overall check with one of my projects.</p><h2 id="solution">Solution</h2><p>Since the project mentioned above is a node.js front-end app, the coverage measurement is implemented with Jest coverage. Underneath the jest framework, <a href="https://istanbul.js.org"><code>istanbul</code></a> is the code coverage lib. This triggered me to seek a way to compare the coverage result files from the source branch to target branch.</p><p>The solution could rely on JsonDiff lib to compare the coverage between two branches and fail when there is any nodes on source tree has decrease on coverage unless the leave nodes (file-line, function, branch path) are removed from source branch.</p><p>Here the term <code>leave node</code> depends on which coverage metrics are selected. It could be one or more from lines, functions and branches. The three coverage metrics are supported by istanbul.</p><ul><li><p>The first condition can be satisfied by applying an npm lib <a href="https://github.com/moos/istanbul-diff"><code>istabul-diff</code></a>. Which is based on <code>jsondiffpath</code> lib to compare the increments between source coverage summary and target (existing) one.</p></li><li><p>The second condition would be resolved with traditional way -- <code>Artifactory</code>. On Jenkins Pipeline, a goovy closure will be defined to push coverage-summary JSON to artifactory if current <code>BUILD</code> passes and it is on master branch.</p><p>So the artifactory specific PATH will only keep a latest copy of master branch coverage result (in JSON format).</p><p>When Pipeline determines the build is on a feature branch, it will automatically download the master coverage summary from Artifactory and apply istanbul-diff to find if there is any loss on coverage but will accept all the positive (incremental) coverage.</p></li><li><p>To utilize istanbul-diff tool, istanbul reporter <code>json-summary</code> is required. By default Jest would apply parameter <code>["json", "lcov", "text", "clover"]</code> (refer to <a href="https://jestjs.io/docs/en/configuration#coveragereporters-array-string">Jest Doc</a>)</p><p>So the package.json could be updated as:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;jest&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;coverageReporters&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;json&quot;</span>, </span><br><span class="line">      <span class="string">&quot;lcov&quot;</span>, </span><br><span class="line">      <span class="string">&quot;text&quot;</span>, </span><br><span class="line">      <span class="string">&quot;clover&quot;</span>,</span><br><span class="line">      <span class="string">&quot;json-summary&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="more-topics">More topics</h2><p>The author just verified the idea with a rough react sample but haven't tested the solution with prototype on pipeline yet. Here are actions to fulfill and confirm:</p><ul><li><p>Implement the solution above in an POC branch on pipeline definition file.</p></li><li><p>Take special care to verify when leave nodes are removed, istanbul-diff could accept it not as a failure.</p></li><li><p>When multiple metrics are specified, e.g. both lines and functions, any loss of coverage in one of more of the metrics will fail the final return code.</p></li><li><p>A PR submitted to fix typo in istanbul-diff README Markdown doc, https://github.com/moos/istanbul-diff/pull/3</p></li></ul><h2 id="change-log">Change Log</h2><p>Jun 09, 2019: Initial and roughly tested with sample node.js repo.</p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
          <category> Coverage </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Istanbul </tag>
            
            <tag> Coverage </tag>
            
            <tag> DevOps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Convolutional Neural Networks in TensorFlow</title>
      <link href="/2019/06/02/Completed-Deeplearning-ai-CNN-in-TensorFlow-A-retro-on-roadmap/"/>
      <url>/2019/06/02/Completed-Deeplearning-ai-CNN-in-TensorFlow-A-retro-on-roadmap/</url>
      
        <content type="html"><![CDATA[<p>Cheers! Completed the Deeplearning.ai course <strong>Convolutional Neural Networks in TensorFlow</strong>.</p><p><a href="https://imgur.com/Gqldzu2"><img src="https://i.imgur.com/Gqldzu2m.png" alt="Deeplearning-ai-cert-tensorflow-ai-ml-dl" /></a></p><p>Following the roadmap, this is the 4th certificates on <a href="https://www.coursera.org">Coursera.org</a> on the Machine Learning path.</p><span id="more"></span><p>Two big application areas are ready to commercialize Machine Learning with more powerful modern CPU or clouds, the computer visioning and NLP. Images and literal words are two main sources to extract features in our minds and so does the ML.</p><table><colgroup><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /><col style="width: 25%" /></colgroup><thead><tr class="header"><th>Course</th><th>Keywords</th><th>Completion Date</th><th>School</th></tr></thead><tbody><tr class="odd"><td><em><strong>Machine Learning</strong></em></td><td>Andrew Ng course as ML 101</td><td>Completed by <code>2017-11-05</code></td><td>Standford University</td></tr><tr class="even"><td><em><strong>Introduction to Data Science in Python</strong></em></td><td>An intro to PyNum and Pandas in Data Science</td><td>4 weeks, Completed by <code>2018-04-08</code></td><td>University of Michigan</td></tr><tr class="odd"><td><em><strong>Convolutional Neural Networks in TensorFlow</strong></em></td><td>Applying CNN with Tensorflow and techniques avoiding overfitting and Transferred learning</td><td>4 weeks, Completed by <code>2019-05-31</code></td><td>deeplearning.ai/coursera</td></tr><tr class="even"><td><em><strong>Introduction to TensorFlow for Artificial Intelligence, Machine Learning, and Deep Learning</strong></em></td><td>TansorFlow and Typical ML technoiques and structures for Images</td><td>4 weeks, Completed by <code>2019-05-04</code></td><td>deeplearning.ai/coursera</td></tr><tr class="odd"><td><strong>Course TBD, Machine Learing in NLP</strong></td><td>Applying ML to NLP, chatbots</td><td>TODO: next step</td><td>TBD</td></tr></tbody></table><p>As on above table, the next bite will be NLP. Let's move up, buddies!</p><p><a href="https://imgur.com/g9mL59p"><img src="https://i.imgur.com/g9mL59pm.png" alt="ML_Roadmap_draft_1" /></a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Completed Deeplearning.ai TensorFlow Introdution Course</title>
      <link href="/2019/05/05/Completed-Deeplearning-ai-TensorFlow-Introdution-Course/"/>
      <url>/2019/05/05/Completed-Deeplearning-ai-TensorFlow-Introdution-Course/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>Hurray! Completed the Deeplearning.ai course <strong>Introduction to TensorFlow for Artificial Intelligence, Machine Learning, and Deep Learning</strong> and achieved the certificate on coursera!</p><p><a href="https://imgur.com/Gqldzu2"><img src="https://i.imgur.com/Gqldzu2m.png" alt="Deeplearning-ai-cert-tensorflow-intro" /></a></p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Customized domain for github page with hexo</title>
      <link href="/2019/05/01/Customized-domain-for-github-page-with-hexo/"/>
      <url>/2019/05/01/Customized-domain-for-github-page-with-hexo/</url>
      
        <content type="html"><![CDATA[<p>After upgrading hexo and dependencies in local repo package.json, when regenerating the github pages and pushed to remote repo, the customized domain starts to respond 404.</p><p>Check github, the way to add customized domain is to add a CNAME file with each domain in one line. If user tries to manaully configure his/her own domain on github settings tab, a CNAME file will be pegged automatically by github. However, the manually grown CNAME file will be purged in next posting time if hexo is not correctly configured.</p><p>Searching the hexo document, the place to hold this CNAME file is not local repo root folder but the root folder of hexo theme. In My case, it is <code>./themes/next-wuxubj-5.0.2/</code>. If your hexo applies other theme, please change to the corresponding folder name. This way, the CNAME file will be preserved.</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debug dotnet core with LLDB on RHEL Image</title>
      <link href="/2019/04/15/Debug-dotnet-core-with-LLDB-on-RHEL-Image/"/>
      <url>/2019/04/15/Debug-dotnet-core-with-LLDB-on-RHEL-Image/</url>
      
        <content type="html"><![CDATA[<p>This post is based on a quick note on how to create a docker image for openshift/k8s to debug dotnet core app with LLD online in the containter environment.</p><span id="more"></span><h2 id="problem">Problem</h2><p>(TBC)</p><h2 id="solution">Solution</h2><p>It will request a Red Hat developer account to register to RHN when trying to enable <code>rhel-7-server-devtools-rpms</code> RPM repo on Red Hat. However, if it is a docker environment, which is not required to register the docker instance to RHN to add this repo. So the repo could be enabled in Dockerfile. Then the LLDB toolset would be installed to this image.</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># From a customized RHEL dotnet sdk base image</span></span><br><span class="line"><span class="keyword">FROM</span> dotnet/dotnet-<span class="number">21</span>-rhel7</span><br><span class="line"> </span><br><span class="line"><span class="comment"># Set the timezone</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=XXX</span><br><span class="line"> </span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum-config-manager --<span class="built_in">enable</span> rhel-7-server-devtools-rpms</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y wget tcpdump vim llvm-toolset-7</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /opt/app-root/.pki</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">USER</span> <span class="number">1001</span></span><br></pre></td></tr></table></figure><h2 id="how-to-debug-dotnet-core-app-with-lldb">How to debug dotnet core app with LLDB</h2><blockquote><p>(TODO): Push the image to dockerhub and launch more test with AWS environment.</p></blockquote><blockquote><p>Complete this post with more details on how to apply LLDB on memory check and online debug.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LLDB </tag>
            
            <tag> DotnetCore </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acquired AWS Solution Architecture Professional (SAP) and DevOps Professional (DOP) Certificates</title>
      <link href="/2018/11/07/Acquired-AWS-Solution-Architecture-and-DevOps-Professional-Certificates/"/>
      <url>/2018/11/07/Acquired-AWS-Solution-Architecture-and-DevOps-Professional-Certificates/</url>
      
        <content type="html"><![CDATA[<p>When participating the project to migrate Web Service and full pipeline to openshift, it is worthy to continue AWS study to professional level and compare the SAAS hybrid solution to on-premise PAAS with openshift.</p><p>These two certificates were achieved during the above project <code>Evolve</code>.</p><p><a href="https://imgur.com/1KAF74s.png"><img src="https://i.imgur.com/1KAF74sm.png" alt="AWS_DOP" /></a> <a href="https://imgur.com/JyZn4PX.png"><img src="https://i.imgur.com/1KAF74sm.png" alt="AWS_DOP" /></a></p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS - SAP - DOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Michigan Data Science with Python Course Achieved</title>
      <link href="/2018/04/09/Michigan-Data-Science-with-Python-Course-Achieved/"/>
      <url>/2018/04/09/Michigan-Data-Science-with-Python-Course-Achieved/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>Completed the 2nd data science course and achieved the certificate on coursera!</p><figure><img src="https://i.imgur.com/gE39kX4m.png" alt="Imgur Michigan Data Science with Python Course Cert" /><figcaption aria-hidden="true">Imgur Michigan Data Science with Python Course Cert</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Data Science </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Update Anaconda-Navigator thru command line</title>
      <link href="/2018/03/19/Update-Anaconda-Navigator-thru-command-line/"/>
      <url>/2018/03/19/Update-Anaconda-Navigator-thru-command-line/</url>
      
        <content type="html"><![CDATA[<figure><img src="https://i.imgur.com/xFQI6dtl.png" alt="Anaconda-Navigator" /><figcaption aria-hidden="true">Anaconda-Navigator</figcaption></figure><span id="more"></span><h2 id="update-anaconda-navigator">Update Anaconda-Navigator</h2><p>After the Machine Learning course, I registered Data Science Introduction course (Michigan Univ.) to refresh Python hands. When the pop-up asking about updating anaconda navigator to a new version, I selected "yes" and it just quit current anaconda navigaotr window on Mac. However, Anaconda-Navigator only shut down without any updates. It might be due some permission issue.</p><p>Here is the command line to update Anaconda-Navigator: <code>conda update anaconda-navigator</code>. To execute the correct command in cases of pyenv installed to wrap multiple python contexts, you need to select the anaconda pyenv profile and set it to local (or global if intent to).</p><h2 id="update-anaconda-environment">Update Anaconda Environment</h2><p>To update anaconda current environment to the latest packages unless dependencies preserve some package versions, the command line is <code>conda update conda</code> Another way to launch the terminal is to click Anaconda GUI environment column and select "Open Terminal" from the small triangle.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stanford A-NG Machine Learning Certificate Achieved</title>
      <link href="/2017/11/12/Stanford-A-NG-Machine-Learning-Certificate-Achieved/"/>
      <url>/2017/11/12/Stanford-A-NG-Machine-Learning-Certificate-Achieved/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>Completed the first machine learning course and achieved the certificate on coursera!</p><p>Rather than warming up mathematics and scripting with new toy of octave(and matlab), it was an experience to enhance time management :_)</p><figure><img src="https://i.imgur.com/6WmFoUsm.png" alt="Stanford-Andrew-Ng-ML-Course-Cert" /><figcaption aria-hidden="true">Stanford-Andrew-Ng-ML-Course-Cert</figcaption></figure>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Andrew-Ng </tag>
            
            <tag> Stanford </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Greeting Shell script with Picture show and Weathre Forecast</title>
      <link href="/2017/09/28/Greeting-Shell-script-with-Picture-show-and-Weathre-Forecast/"/>
      <url>/2017/09/28/Greeting-Shell-script-with-Picture-show-and-Weathre-Forecast/</url>
      
        <content type="html"><![CDATA[<p>"<strong>iterm2 greeting with weather and image</strong>" is a short shell made for bash_profil invoke to weather forecast based on GeoIP, a quote of greeting, and, show a random picture from given folder.</p><span id="more"></span><h2 id="introduction">Introduction</h2><p>It is created to make use of Friday evening and show my daughter's random picture each time a terminal window is created. After a quick family demo show, I added cli arguments support the next day ㋡</p><h2 id="features">Features</h2><p><a href="https://i.imgur.com/VR53tEE.png"><img src="https://i.imgur.com/VR53tEEm.png" alt="greeting" /></a></p><ul><li>Show randmo picture from folder.<ul><li>It follows iTerm2 (on Mac) imgcat extended protocols.</li><li>Picture will be resized to given width in cols or 40 by default</li><li>Picture folder is specified or defaulted to ~/Pictures.</li></ul></li><li>Fetch weathre forecast from wttr.in.</li><li>Adjust format according to current terminal window width.</li></ul><p>Github Link: <a href="https://github.com/maxwu/iterm2_greeting_with_weather_img">https://github.com/maxwu/iterm2_greeting_with_weather_img</a></p><h2 id="change-log">Change Log</h2><p>May28, 2017: Initial post.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iterm2 </tag>
            
            <tag> shell </tag>
            
            <tag> imgcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium and WebDriver Version Selection</title>
      <link href="/2017/08/13/Selenium-and-WebDriver-Version-Selection/"/>
      <url>/2017/08/13/Selenium-and-WebDriver-Version-Selection/</url>
      
        <content type="html"><![CDATA[<p>This post summarized the versions of browsers and seleniums as well as the dependencies for automation test especially for headless testing.</p><figure><img src="https://i.imgur.com/xXsIDBCt.png" alt="[Selenium Pill][https://imgur.com/xXsIDBC]" /><figcaption aria-hidden="true">[Selenium Pill][https://imgur.com/xXsIDBC]</figcaption></figure><span id="more"></span><h2 id="selenium-3">Selenium 3</h2><p>Current stable version of selenium. From Selenium 3:</p><ul><li>Interacts with Firefox through Mozzila's Gecko Driver.</li><li>Requests Firefox 47.1.0+ version if choosing Firefox to test (FF v47.0 is not supported).</li><li>Requests Java 8 (which is the oldest official Oracle Java version)</li><li>Works with Edge through EdgeDriver</li><li>Works with IE 9+ through IEDriverServer</li></ul><p>Selenium 3 development plan was announced from 2013. However, the available beta was released by July 2016 and stable Selenium 3 was finally released Oct 2016. Google java lib Guava is also requested. A standalone selenium jar lib is offered from this release.</p><p>Headless browsers:</p><p>The classic way to run selenium based web automation test with browsers will launch browsers GUI windows. Which is slow and requests display settings (on Linux). Webkit based headless browser as Phaontomjs is a better choice when the test is table, or, executed on cloud.</p><p>Recent Firefox and Chrome releases offer headless mode which can fasten the test with less computation cost.</p><table><colgroup><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /><col style="width: 20%" /></colgroup><thead><tr class="header"><th>Browser</th><th>Current versions</th><th>Browser version with headless support</th><th>Notes</th><th></th></tr></thead><tbody><tr class="odd"><td>Firefox</td><td>stable:55, beta:56b, dev:57dev</td><td>From v56</td><td>Need FF beta version 56b to support headless mode by set MOZ_HEADLESS=1</td><td></td></tr><tr class="even"><td>Chrome</td><td>stable:61</td><td>Mac and Linux: from 59, Windows: from 60</td><td>Cli option ""--headless" to run chrome in headless mode (--disable-gpu might be requested on early builds)</td><td></td></tr></tbody></table><p>Chrome browser headless mode requests chromedriver version newer than 2.29 due to known update. Current stable chromedriver version is 2.33. For GeckoDriver, v0.19.0 works fine with headless mode firefox.</p><p>Since phantomjs steps down as maintainer by version 2.1.1, there are other lightweight webkit or other engine based headless browser to choose. Visit <a href="https://github.com/dhamaniasad/HeadlessBrowsers">headless browsers</a> for more solutions.</p><h2 id="selenium-2">Selenium 2</h2><p>Selenium 2 is the history version to offer a common interface over <a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol">JSON wired protocol</a> to interact with web driver executables and through them to browsers. The communication scenario is:</p><p>For IE and Chrome:</p><p>Selenium Language Binding ⇆ Web Driver Executable ⇆ Browser</p><p>For FF without Gecko (without Marionette flavor), headless Phantomjs and HtmlUnit:</p><p>Selenium Language Binding ⇆ Browser</p><p>Since new Firefox utilizes Gecko driver, Selenium 2 works with Firefox version &lt;=47 in stright direct interaction way.</p><p>From Selenium 2, it is called Selenium Web Driver instead of RC.</p><h2 id="selenium-rc">Selenium RC</h2><p>Selenium Remote Control (RC) is history version which interacts with browsers by inject javascript and works as an HTTP proxy. Which requests preconfiguration on security checks for most of modern browsers but provides wide supports with language bindings and most of browsers.</p><p>Selenium Client Driver (with most languages) ⇆ Selenium Server (Jar file) ⇆ Browsers</p><h2 id="change-log">Change Log</h2><p>Nov18, 2017: Add notes on chromedriver version. Aug13, 2017: Initial post draft.</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Automation Test </tag>
            
            <tag> Selenium </tag>
            
            <tag> Headless </tag>
            
            <tag> Firefox </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Capture Existing Selenium WebDriver Session</title>
      <link href="/2017/08/06/Capture-Existing-Selenium-WebDriver-Session/"/>
      <url>/2017/08/06/Capture-Existing-Selenium-WebDriver-Session/</url>
      
        <content type="html"><![CDATA[<p>Notes on how to intervene an existing selenium web driver session with impelementation and tests.</p><span id="more"></span><h2 id="problem-to-solve">Problem to Solve</h2><p>As a software engineer in automation test, sometimes it is the most reasonable method to capture the existing selenium web driver session and intervene with customized action steps. Especially with the commercial toolkit or homemade testing utility but source is not open at the meantime.</p><p>In my case, the toolkit is not able to fill up one of the authentication page. However, it offers a keyword to pause until a manual action to input user crediential. Current solution is to monitor the stdout with bash shell, when the typical log of "http://localhost:XXXX" shows up, use the selenium commander URL to capture the existing selenium session. There is still a parameter of session ID missing. This can be solved by an JSON wired protocol end point, "/sessions". Usually toolkit implements singleton on seleenium driver language binding. Query the end point of "/sessions" will return the session ID between web driver executable and the browser.</p><h2 id="solution">Solution</h2><h3 id="find-existing-session-id">Find Existing Session ID</h3><p>As mentioned in above, the communication between Selenium Development Language bindings and WebDriver executables is the JSON wired protocol.</p><p><a href="https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessions">https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessions</a></p><p>Unfortunately this end point is not implemented with Selenium Java or Python binding. It could be soloved by a new created wrapper function to query existing sessions.</p><p>Generally automation test toolkit desktop version implements singleton on selenium binding instance and keep one session. So the query above will return one session in JSON. The solution is to add code parsing the return value and extract the session ID.</p><p>For example, if the selenium based toolkit generates stdout or logs as:</p><p><code>http://localhost:6064</code></p><p>The session can be queried by URL in browser with the end point:</p><p><code>http://localhost:6064/sessions</code></p><!---FIXME: need to download the original image from qiniu.![JSON Return Value](http://oei21r8n1.bkt.clouddn.com/Query_Selenium_Sessions.png?imageView/2/w/400/q/100)--><p>(Update Aug 08, 2017) The sample code to query session information. The codesnap only return the first session ID and capabilities in tuple. Production code shall take care of situation when there are multiple sessions as well.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># return tupple of session ID and capability dict.</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session_id_and_cap</span>(<span class="params">command_executor=<span class="literal">None</span></span>):</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> command_executor:</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># requests respects environment variables on proxy and does not bypass localhost.</span></span><br><span class="line">    <span class="comment"># It seems the new post IETF draft catches eyes to solve such issues,</span></span><br><span class="line">    <span class="comment"># https://tools.ietf.org/html/draft-west-let-localhost-be-localhost-04</span></span><br><span class="line">    os.environ[<span class="string">&#x27;NO_PROXY&#x27;</span>] = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line"></span><br><span class="line">    url = command_executor + <span class="string">&#x27;/sessions&#x27;</span></span><br><span class="line">    resp = requests.get(url=url)</span><br><span class="line">    data = json.loads(resp.text)</span><br><span class="line">    <span class="keyword">if</span> data[<span class="string">&#x27;value&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> data[<span class="string">&#x27;value&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;id&#x27;</span>], data[<span class="string">&#x27;value&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;capabilities&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(End of Aug 08, 2017 Update)</p><h3 id="capture-existing-selenium-session">Capture Existing Selenium Session</h3><p>With an effective session ID and executing commander URL, the captured web driver class overwrites start_session method. Property "w3c" is assigned for Web Element Find method groups.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CapturedDriver</span>(<span class="params">WebDriver</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; CapturedDriver.doctest_visit_github()</span></span><br><span class="line"><span class="string">    PASS</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,</span></span></span><br><span class="line"><span class="params"><span class="function">                 command_executor=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                 desired_capabilities=&#123;&#125;,</span></span></span><br><span class="line"><span class="params"><span class="function">                 browser_profile=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                 proxy=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                 keep_alive=<span class="literal">False</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                 session_id=<span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">                 w3c=<span class="literal">True</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(CapturedDriver, self).__init__(command_executor, desired_capabilities, browser_profile, proxy, keep_alive)</span><br><span class="line">        self.session_id = session_id</span><br><span class="line">        self.w3c = w3c</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_session</span>(<span class="params">self, desired_capabilities, browser_profile</span>):</span></span><br><span class="line">        self.capabilities = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">doctest_visit_github</span>():</span></span><br><span class="line">        d = wd.Firefox()</span><br><span class="line">        d.get(<span class="string">&#x27;http://github.com&#x27;</span>)</span><br><span class="line">        <span class="comment"># &quot;The world&#x27;s leading software development platform · GitHub&quot;</span></span><br><span class="line">        title1 = d.title</span><br><span class="line">        d2 = CapturedDriver(command_executor=d.command_executor, session_id=d.session_id, w3c=d.w3c)</span><br><span class="line">        title2 = d2.title</span><br><span class="line">        <span class="keyword">if</span> title1 == title2:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;PASS&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;driver title is %s, captured driver title is %s&quot;</span> % (title1, title2)</span><br><span class="line">        d.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    doctest.testmod()</span><br></pre></td></tr></table></figure><p>The unit test is implemented with doctest as a fast way for experiment codes.</p><p>The source code is shared at <a href="https://github.com/maxwu/selenium-behave-box/blob/master/src/captured_driver/captured_driver.py">Github Folder</a> now. Java binding solution is still under construction. After that, a separate Github project will be created to maintain this solution together with monitoring bash shell.</p><h2 id="test-the-solution">Test The Solution</h2><p>To tes the solution, open a selenium session and extract the session ID and commander URL. For a quick test, the existing github project <a href="https://github.com/maxwu/cucumber-java-toy">cucumber-java-toy</a> is used. The code is as below:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">webDriver1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    githubPage = <span class="keyword">new</span> GithubPage(driver, <span class="string">&quot;maxwu&quot;</span>);</span><br><span class="line">    List&lt;String&gt; followings = githubPage.getFollowingList();</span><br><span class="line">    followings.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    URL driverUrl = ((HttpCommandExecutor)(((RemoteWebDriver) driver).getCommandExecutor())).getAddressOfRemoteServer();</span><br><span class="line">    String sessionId = ((RemoteWebDriver) driver).getSessionId().toString();</span><br><span class="line">    System.out.println(<span class="string">&quot;URL=&quot;</span> + driverUrl + <span class="string">&quot; ID=&quot;</span> + sessionId);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;Old Title=&quot;</span> + driver.getTitle());</span><br><span class="line"></span><br><span class="line">    pause();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When the commander URL and session ID are available, the quick test could be performed with below Python snap.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> captured_driver.captured_driver <span class="keyword">import</span> CapturedDriver</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># For temp test</span></span><br><span class="line">    <span class="comment"># d = CapturedDriver(command_executor=&#x27;http://127.0.0.1:4444/wd/hub&#x27;, session_id=&#x27;&#x27;)</span></span><br><span class="line">    d = CapturedDriver(command_executor=<span class="string">&#x27;http://localhost:6064 &#x27;</span>, session_id=<span class="string">&#x27;49075f494d1add687ab74f1cb95f0314&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Captured Session Title is %s&quot;</span> % d.title</span><br><span class="line">    explore = d.find_element_by_link_text(<span class="string">&quot;Explore&quot;</span>)</span><br><span class="line">    explore.click()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Captured Session Title changes to %s&quot;</span> % d.title</span><br><span class="line">    d.back()</span><br></pre></td></tr></table></figure><p>Successful output of test code shall be:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Captured Session Title is maxwu (Max WU) / Following · GitHub</span><br><span class="line">Captured Session Title changes to Explore · GitHub</span><br></pre></td></tr></table></figure><p>Since browser is not running in headless mode, the page transition and backward movement action can also be visual checked that the captured web driver works fine and either driver can quit the session, which leads to a termination on web driver executable process, too.</p><h2 id="future-works">Future Works</h2><ul><li><p>Add query on "/sessions" end point for Selenium Java Binding. Prototype passed test. (TODO: update github and maintain in separate repo).</p></li><li><p>Implement Captured Web Driver with Selenium Java Binding.</p></li><li><p>It works fine with GeckoDriver for Firefox on both Mac and Windows. However, IEDriverServer throws 404 error while performing "find*" API calls.</p><p>It finally reject the 2nd connection with Selenium Python binding. In the meantime, title/url property query through the JSON wired protocol works well.</p></li></ul><h2 id="change-log">Change Log</h2><p>Aug 06, 2017: Initial post as a quick note on captured session with selenium web driver.</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Concrete-level-tag </tag>
            
            <tag> Automation Test </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Dip on Performance Testing</title>
      <link href="/2017/07/25/Briefing-on-Performance-Testing/"/>
      <url>/2017/07/25/Briefing-on-Performance-Testing/</url>
      
        <content type="html"><![CDATA[<p>There are many sources over internet to describe performance testing. But most are not for new comer to kick start when people have tasks right in hands seeking for an jump start point to enter. This post targets to provide a glace of it with practical hints and introduce some simple methods and toolkits. (In progress) <span id="more"></span></p><h2 id="types-of-performance-testing">Types of Performance Testing</h2><p>There are two kinds of performance testing mostly seen in practices.</p><h3 id="quantitive-measurement">Quantitive Measurement</h3><p>One type is to seek a quantitive measurement on software + hardware(cloud/infrastructure environment). Usually the practice is with automation toolkits to simulate concurrent transactions (for OLTP) or streams (for transmission systems). The key factors would be sorted into categories and critical factors will be figured during the test.</p><p><a href="http://www.maxwu.me/2017/02/26/Apache-ab-and-gnuplot-to-generate-benchmark-test-chart/">An example of gnuplot chart on performance testing with apache ab toolkit</a></p><figure><img src="https://i.imgur.com/4UtYp66m.png" alt="[benchmark performance test chart][https://imgur.com/4UtYp66]" /><figcaption aria-hidden="true">[benchmark performance test chart][https://imgur.com/4UtYp66]</figcaption></figure><p>According to different quantative measurement perpectives, the measurements are also named to different performance test kinds. Among them, <strong>Load Test</strong> and <strong>Capacity Test</strong> are often planned on verticle and horizontal views.</p><p>Load Test is executed against service level agreement on temporal and spcial factors. Industry practice, especially in telecommunication, the measurement is on statistical results according to standard definition of MTBF(Mean Time Between Failure) and MTTF(Mean Time To Failure). Here MTBF is the sum of MTTF and MTTR (Mean Time To Repair).</p><p>Capacity Test figures out which dimension is critical for scaling. Horizontal as scaling-out or Vertical as scaling-up.</p><h3 id="stressing-test">Stressing Test</h3><p>Another type of performance test is to stress the software system into an predesigned extreme situation and verify if the availability and IO/Transaction rate can still satisfy the criteria of such circumstance.</p><p>For example, I made a dynamic lib with toolchain to load into embedded Linux card to consume a certain portion (read from cli) of CPU time on the designated core. If the portion is 70%, the test will show system behavior with one core 70% busy as background traffic effects. The result is satifying or not compliant with estimated criteria per requirement key checkpoints by agile team.</p><p>Another example is to generate 8 TCP streams with IPerf tool and test if the system can still holds the acceptance success rate.</p><p>Innovation of testing methodologies could save the cost and time by introducing new techniques to stress system. One case is that I used to set Linux IP Filter to drop 50% packets from some source and verify if the fault handling is still correct.</p><h2 id="toolkits-and-tips-to-implement-performance-testing">Toolkits and Tips to Implement Performance Testing</h2><h3 id="simulate-the-background-load">Simulate the Background Load</h3><p>Background load here refers to the prerequisites to kick off stressing test. It usually includes one of below item or a combination of picked up factors.</p><h4 id="cpu-load">CPU load</h4><p>(per core or for specific cores)</p><h4 id="memory-pressure">Memory Pressure</h4><p>(Pay attention to libc-rt malloc and overcommitment.)</p><h4 id="traffics-w-or-wo-streampacket-dropping-rate">Traffics (w/ or w/o stream/packet dropping rate)</h4><p>(Stream: shape, rate, ToS/QoS, Jumbo packets, Back-to-back)</p><p>(IP Filter based packet drop rate)</p><p>(SQL transaction drop rate)</p><p>(Load Balance Policy based failure rate)</p><p>(Other failure rate)</p><p>(TBC)</p><h4 id="persistance-status-disk-occupation-rate-disk-io-pressure">Persistance status (disk occupation rate, disk IO pressure)</h4><p>(IOwait measurement, simulation)</p><p>(TBC)</p><h2 id="performance-issues-sharing">Performance Issues Sharing</h2><p>(Experiences of solving performance issues)</p><p>(TBC)</p><h2 id="change-log">Change Log</h2><p>Jul26, 2017: Initial post draft.</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> Performance Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Performance Testing </tag>
            
            <tag> Stressing Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lessons and Thoughts on Agile and Test Automation Approaches</title>
      <link href="/2017/06/09/Lessons-and-Thoughts-on-Agile-and-Test-Automation-Approaches/"/>
      <url>/2017/06/09/Lessons-and-Thoughts-on-Agile-and-Test-Automation-Approaches/</url>
      
        <content type="html"><![CDATA[<p><a href="https://imgur.com/c30BjQG"><img src="https://i.imgur.com/c30BjQGm.png" alt="Lake Zixia" /></a></p><blockquote><p>The picture was taken for Zixia (Purple Light) Lake in famous Mt. Zijin of Nanjing (Nanking) city by my previous colleague. When we talk about migration to agile and automation test, it is rather to create a harmony with history assets and moderm methodology like to vitalize traditional building in morden metropolis with inner high-tech structural works, rather than a revolution on exteriority. <span id="more"></span></p></blockquote><p>(<span class="math inline">\(\color{blue}{Lively\ Updating}\)</span>) This post is based on the original Chinese blog articles and most parts are rewritten. I would keep on retrospectives and update it with new ideas periodically.</p><h2 id="brief">Brief</h2><p>A better title could be "Myths in Test Automation -- a view from engineer". However, not to scare readers, we just keep it lively maintained as issue list with contourmeasures and thoughts.</p><h2 id="versions-of-engineering-team-within-testing">4 versions of engineering team with/in testing</h2><p><strong>Version 1: Streamline Workers in Testing</strong></p><p><strong>Version 2: Agile Testing</strong></p><p><strong>Version 3: Role changed from tester to QA</strong></p><p><strong>Version 4: Full Stack Testing Team</strong></p><p>Here Full Stack is a term to reflect an end-to-end view from QA perspective rather than just testing.</p><h2 id="where-we-are----the-shape-of-test-automation">Where we are -- The shape of test automation</h2><p>At first, this section describes from a high level view on how to reinforce test automation.</p><h3 id="test-pyramid----ideal-agile-testing">Test Pyramid -- Ideal Agile Testing</h3>The chart of Pyramid model is from <a href="https://martinfowler.com/bliki/TestPyramid.html">Martin Fowler</a>. Test Pyramid is from <a href="http://www.mountaingoatsoftware.com/">Mkie Cohn</a>. &gt; The test pyramid is a concept developed by Mike Cohn, described in his book Succeeding with Agile. Its essential point is that you should have many more low-level unit tests than high level end-to-end tests running through a GUI. &gt;<div><p><a href="https://martinfowler.com/bliki/TestPyramid.html" id="richardson_restful_maturity_mdel" align=left> <img src="https://martinfowler.com/bliki/images/testPyramid/test-pyramid.png"  width=240> </a> <a href="https://watirmelon.blog/2012/01/31/introducing-the-software-testing-ice-cream-cone/" id="richardson_restful_maturity_mdel" align=center> <img src="https://watirmelon.files.wordpress.com/2012/01/idealautomatedtestingpyramid.png"  width=240> </a></p></div><p>Like bringing data as close to code as possible, the test shall be as close to code as possible. The distance of data and code increases the cost to warm data and rotate memory pages with cache line. The distance between test and code, in both space and time dimensions, could be regarded as a sign of cost of organization focus switch.</p><p><a href="https://watirmelon.blog/2012/01/31/introducing-the-software-testing-ice-cream-cone/">Alister Scott</a> added manual test on top of the pyramid.</p><ul><li><p>Fast iteration does not offer testing team a long time to perform more manual tests and the automated CI/CD becomes the fundamentals of agile to shorten the feedback cycle towards an autonomous learning organization. Even though, there are spaces for manual scenario based testing and exploring as an indispensable part of Agile Development cycle. It is true that the manual test sessions are a bit further to codes and extend a feedback cycle, but it is important to inspect from user scenario view and utilze human initiatives to qualify the software crafts and process.</p></li><li><p>Another take-away is the ability of test works to be <strong>reused</strong>. The lower it shows in above chart, the better adaptability it could have.</p></li><li><p>UT is closest to code and will be maintained with code changes together with CI protection. The gap is counted by minutes. With <strong>Lava Light</strong> and CI, UT is consistent with code within 20min for most cases.</p></li><li><p>API and component interfaces have a middle level re-useability. Most of the test works are stable by a well reganized design style. If there are issues that APIs change frequently according to busniess, it is a smell of Architecture Refactor. The original design does not expect the busniess evolution model.</p></li><li><p>For UI layer and manual scenario tests, it is costing to maintain through releases because there are presentation of business and expected to change accordingly. With technologies like Page Object and a good automation framework, the costs could be mitigated sometimes.</p></li></ul><h3 id="icecream-cone-anti-pattern----the-reality">Icecream Cone Anti-Pattern -- The Reality</h3><p><a href="https://watirmelon.blog/2012/01/31/introducing-the-software-testing-ice-cream-cone/">Alister Scott</a> also pointed an <strong>"Icecream Cone Anti-Pattern"</strong> to describe the reality of testing industry.</p><p><a href="https://watirmelon.blog/2012/01/31/introducing-the-software-testing-ice-cream-cone/" id="richardson_restful_maturity_mdel" align=left> <img src="https://watirmelon.files.wordpress.com/2012/01/softwaretestingicecreamconeantipattern.png"  width=220> </a></p><p>Where the organizations have history assets or in an intermedium position to grow skilled engineers in testing, the most evident activities are still manual tests.</p><p>One possible reason is with culture building, as <strong><a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a></strong> points out, the organization way of evaluating co-workers will come out with the output of software processes. If engineers work in an atmosphere that the bug numbers are a key to evaluate themselves, the manual test, with its time and resource consumption will be an asset, or, a debt, of the orgnazation.</p><p>Another possible reason is also on culture that developers don't have enough encourage or time to protect works with Unit Test. On the contrast, writing unit tests will influence developers to think about how peers are using that part of code and the structure will be designed to adapt a better decoupling philosophy and a better testability (the level of how the program is friendly to test, and then friendly to refactor).</p><h3 id="cupcake-anti-pattern----reality-of-agile-testing">Cupcake Anti-Pattern -- Reality of Agile Testing</h3><p>Software Testing <strong>Cupcafe Anti-Pattern</strong> is a model by <a href="https://www.thoughtworks.com/profiles/fabio-pereira">Fabio Pereira, Thoughworks</a> to describe what agile turns out to be in most organizations.</p><p><a href="https://www.thoughtworks.com/insights/blog/introducing-software-testing-cupcake-anti-pattern" align=left> <img src="https://insights-images.thoughtworks.com/fabiocupcakenew1_0_04444aff9e8be210d16a68f29a20fe7a.png"  width=300> </a></p><p>The most siganificant take-away from this model is the isolation smell. It works partially as a mini-waterfall model that groups of team members make duplicated coverage. It usually happens when there is a separate automation testing team and an existing asset of "manual" test group to keep current business running.</p><h3 id="rugby-model----time-to-propose-a-theory-to-experiment">Rugby Model -- Time to propose a theory to experiment</h3><p><a href="https://imgur.com/jawzSgF"><img src="https://i.imgur.com/jawzSgFm.png" alt="Rugby Test Model" /></a></p><p>Focus on the middle layer instead of Unit Test. During the Agile Migration, pay most attention on API testing. For example, RESTful API testing can be extended to scenario test and create conditions and checkpoints for sceanrio level inspection. The RESTful API level automation testing can also provide a primary data analysis on which part is the most urgent section to protect with Unit Test.</p><p>It is not a fresh new concept. The term <a href="https://martinfowler.com/bliki/SubcutaneousTest.html">Subcutaneous Test</a> covers the similar way on a pseudo end-to-end test but avoid the UI complexity (complexity is usually a singal of heavy design and indicator of high risk on test maintenance).</p><h2 id="thoughts-on-common-practice-issues-in-automation-test">Thoughts on common practice issues in Automation Test</h2><h3 id="tools-matter----yes">Tools matter -- Yes</h3><p>Tools are not only tools in a transverse movement, but also a way of cultrual idea exchange and influence on way of works.</p><p><img src="http://www.avsforum.com/forum/imagehosting/31795589cbcbb28a21.jpg" /></p><p>SW Dev Frameworks are tools and ROR almost defined the practice standard for a narrowed scope of RESTful. Without JUnit, XUnit, the basic Unit Test concepts would NOT become as popular as they are now. Without <strong>120 fps</strong> technology, movie "Billy Lynn's Halftime Walk" could hardly bring audience the experience on what <strong>Ang Lee</strong> is exactly designed. A home-made toolkit or customized automation framework is a way to influence crew, too.</p><p>It is an effecient way to communicate with whole team on objectives, process, learning topics. As an old saying in Lucent, tools are ways to train people by supporting ourselves.</p><h3 id="mixed-coding-and-test-skills----yes">Mixed Coding and Test Skills -- Yes</h3><p>This topic is still debating upon situations. This is the mostly heard challenge when quite a number of organizations do "SWOT" analysis towards test automation. However, the observation is that interruption matters more. Below is based on the close observation and discussions with test professionals.</p><p>When I am doing a manual test to GA a SW release sometimes, I don't expect an out-of-observation-scope interruption to system which drive me have to start over. It costs energy for human beings to concentrate for a while no matter what we are doing. Testing is somehow a lonely work without in-time feedbacks as in games. To predict the logic branches and weak points consume more than it looks like.</p><p>On the other side, coding skills are still inevitably critical to implement a stably reproducable test smoothly. Programming language expertise is vital not only on exploring and implementing tests, but also to form a predictable but effective ways to design the tests. Relationship between factors in space, time and logics are expected natrual to engineers in automaiton test role. Therefore, the tests, CI and CD can provide confidence to joint agile team. I keep an average of 1.5 issues discovered per working day in first two weeks of manual testing phase. The credit gives to development experiences. Which helps me to think in a systematic structure and perform test in well organized space as a journey with several dimensions.</p><p>This way, we say that <strong>testing is the way to use techniques to mitigate uncertaincy</strong>.</p><h3 id="tree-vs.-forest----both">Tree vs. Forest -- Both</h3><p>As a software engineer, I do have happy jouneys with occassional automation test in early years. Which are also called one time tools. The utilities were created to resolve a certain type of testings in such situations:</p><ul><li>Some tests are not able to complete manually. Constrains on space and time might be not easily to satisfy with manual actions.<ul><li><p>One example is burst Wi-Fi connection and disconnection to a home gateway.</p><p>When I first realized an issue was with memory fragmentation, the test case in my mind is to call volunteers from my team together with all Android tablets, mobiles, laptops we can borrow and carry to lab and make a series of burst join/quit. It is true and I really did it once .I still keep the photo that a group of people are doing Wi-Fi connecting test together, for memory, for the sweats and cheers).</p><p>But after we reproduced the issue and successfully match the symptom as filed team suffered, it was not feasible to stay with the so called crowd action to qualify the patch-up component integration. Therefore an urgent request of tool to stably reproduce this issue is created. An one time tool could turn the unknown uncertaincy to known uncertaincy and release efforts.</p></li></ul></li><li>Some test case request special skill to reproduce.<ul><li>It is like that some piano songs can only play with computer because the pace is too quick human fingers can hardly move this way.</li><li>An example is a race condition with home gateway GUI, TR69 management interface. It exhausts patience to reproduce it and record every execution sequences to table. Some of the pattern is sophisticated and ambiguous if we only tell from the text description.</li></ul></li><li>To explore more during the test.<ul><li>Tools like JBroFuzz provides precompiled fuzzers to offer randomization for different purpose. If the exploring is only on the space dimension of data feeding, as changing from a ascii-lower set to base64 set, or explore SQL-injection set for MySQL DB, it is time to introduce one time tools.</li><li>Knowing there is an issue, but not sure how big the impacted scope is, or, what exact the trigger threshold is.</li></ul></li></ul><p>One-time automation test is like trees. This is an utilization of tools to achieve above expectations. It is happy and cheerful. However, this is not the same concept of test automation.</p><p>[Pub-2, 2019-05-19]: Update the image links]</p><p>[Pub-1, 2017-06-09]: Since most parts are rewritten or revised, the release date of this post is changed to recent day]</p><p>[draft-2, 2017-06-02]: Add agile test models, bring up Rugby model]</p><p>[draft-1, 2017-01-25]: Initial draft.</p><blockquote><p>Some of the drafts are not on original Chinese version post, so a special date 12/31 will be used to track the global version.</p></blockquote><p>[EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> Agile </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Agile </tag>
            
            <tag> Test Automation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thoughts on RESTful API Design and Testing</title>
      <link href="/2017/05/20/Thoughts-on-RESTful-API-Design-and-Testing/"/>
      <url>/2017/05/20/Thoughts-on-RESTful-API-Design-and-Testing/</url>
      
        <content type="html"><![CDATA[<p>This article is inspired by another post described the disapproving on current common misunderstanding among concepts of RESTful, CRUD, Safety, Security and Idempotency. <a href="https://imgur.com/tS7bZ9i">[RESTful Img][https://i.imgur.com/tS7bZ9im.png]</a> This post targets to rephase RESTful concept and describes common check points against RESTful API architecture test during Software Design Review.As practical samples, Jenkins API and CircleCI/TravisCI API will be analyzed, tested and evaluated. <span id="more"></span></p><h2 id="restful-style-design">1 RESTful Style Design</h2><h3 id="restful-maturity-model-and-the-background">1.1 RESTful Maturity Model and the Background</h3><p><span class="math inline">\(\mathsf{\color{olive}{✐\ RESTful}}\)</span>: <strong>REpresentational State Transfer</strong>, by Roy Thomas Fielding <a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" title="Architectural Styles and the Design of Network-based Software Architectures">Phd Dessertation</a>, 2000.</p><p><a href="https://en.wikipedia.org/wiki/Representational_state_transfer" title="RESTful Wiki">RESTful</a> is a style of architecture. It is also called <strong>Resource Oriented Architecture (ROA)</strong> Which defines a group of restrictions for common architecturing practices as a meta architecture. RESTful compliant deliveries take the conventions of restrictions to build self-describable (semantic) network all together.</p><p>Approaching with RESTful is like a ceremony to take a breakfast coffee ☕ in the morning ☀ to start the day with greeting and smile to people in community while exchaning news, sports and weather. The network is community which Apps and Services live within and people in ceremony are the nodes compliant to RESTful. Those common restrictions release the stress of life and offer people dimensions of freedom to move up (evolve, or, live with happiness) and exchange information.</p><p>Traditionally a common style of API service architecture focused on operations. For example, the client creates the form and fulfills it with operation code, data and adjacent properties (session, auth) then sends it to server and expect a state transition on server. It creates a coupling between client and server, hardly to keep URL consistent in system evolution, and, operation focused design brings side effects as stateful constrain, cache application issue.</p><p>While RESTful service is designed against resources. In short, <strong>URI is only designed for resources</strong>, Aka. <strong>design only servers data models</strong>. Which leaves the freedom to system evolution in three dimensions: service side, client side and resource linkages(resource descriptions). In concept, RESTful is a series of constrains towards an open architecture for next 10 years. Therefore the key points are:</p><ul><li><strong>Stateless</strong>: Server side openness ☞ A dimension for Server side to evolute within the distributed system.</li><li><strong>Hyper-media driven</strong>: Business logic openness ☞ The dimension of freedom to support business evolution. Clients start from limited entry points and the requests are driven by hyperlinks in between.</li><li><strong>Uniform Interface</strong>: Client side openness ☞ A dimension for Client side to evolute and separate implementation details.</li></ul><p>HTTP is the only implementation base so far. In common practices, the verbs and constrains on verbs are mixed from HTTP or RESTful. In other words, in context of concrete implementations, some conventions are borrowed from HTTP constrains.</p><p>With HTTP and the using of HTTP Methods, RESTful also offers a kind of transparency to the network. <strong>Cache</strong> support is a widely mentioned feature comparing to traditional SOAP. With SOAP, the intermediate nodes can hardly know whether the operation is cache friendly unless it decode the message and find the Action Code within XML body. The existing HTTP headers as "modified-after-*" is not reusable with SOAP. But RESTful architecture can reuse existing infrastructures of Web Services and Network. It is friendly to existing Load Balance, CDN/Cache, and, Health-check facilities.</p><p>From a practice point of view, Infosys published a handbook describing three wheels of RESTful: the <em>Resources(URI)<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>, Verbs(Methods) and Representation (Format)</em>. Before starting practicing, my recommendation is still to think more on what is resource and how the resources are represented in such a semi-transparent and open architecture sytle.</p><p><span class="math inline">\(\mathsf{\color{olive}{✐\ RESTful\ Maturity\ Model}}\)</span>: 4 Levels of RESTful Maturity definition to show the way to improve and where we are, by <a href="https://www.crummy.com/writing/speaking/2008-QCon/act3.html">Leonard Richardson</a>, 2008.</p><p><a href="https://imgur.com/3f6qnOE">[RESTful Maturity Model][https://i.imgur.com/3f6qnOEm.png]</a></p><p>It is still debating whether the first three levels are within RESTful scope. Because the maturity model might mislead people to understand the objectives of RESTful to build an eco of HATEOAS. At least, a common understanding is the maturity model provides a way to evaluate on a growth view towards semantic network.</p><p>It is said that a large part of current online so-called RESTful services are quick works moved to HTTP verb driven, not hyper-media driven. And they are designed against operations, not resources.</p><h4 id="level-0-just-one-uri-as-xml-rpc">Level 0: Just one URI, as XML-RPC</h4><p>The HTTP headers have no relation with transaction data. It is just a sharing point. All business and model logic is encoded in payload with a tight coupling between clients and servers. The client must have internal knowledge on how server works.</p><h4 id="level-1-multiple-uri-but-one-method">Level 1: Multiple URI but one method</h4><p>The RESTful degrades from Application Protocol to a Transportation Layer. As in SOAP or XML-RPC, an action code is in payload like "Do.Action" and "Operation=**".</p><h4 id="level-2-multiple-uri-multiple-method">Level 2: Multiple URI, Multiple method</h4><p>Methods and Status Code in Headers are representing transaction logic.</p><p><em><em>Notes:</em></em> &gt; CRUD: Post, Get, Put/PATCH, Delete &gt; PUT: Update the whole object, while, PATCH: Update the properties of object. &gt; HEAD: Fetch meta data. &gt; OPTIONS: Fetch which properties can be altered</p><h4 id="level-3-hypermedia-as-application-engine----hateoas">Level 3: Hypermedia as Application Engine -- HATEOAS</h4><p>Leave the server side a freedom of service evolution. The application just enters from the entry point and will triger <strong>State Transfer</strong> on server objects via a hyperlinks.</p><p>GET: can use filter, paging, not idempotent, POST: seems better and it return links to results.</p><h4 id="brief-history">Brief History</h4><p>When RESTful was published 2000, it was ahead of time. With more and more services were delivered in the name of RESTful, the situation was not getting better towards <strong>self-describable network</strong>.</p><p>When the first internet bubble was over, more studies were spent on this topic. The popular Rails makes <strong>CRUD</strong> a widely accepted concept in a narrowed context. Together with ROR is the dominancy trend of various application clients than browser. Mobile traffics exceeded desktop from 2016 and <a href="https://www.businessinsider.com.au/mobile-web-vs-app-usage-statistics-2014-4" title="mobile web vs app">Apps dominant mobile internet</a> More people turn to review this topic (from 2014) and publish articles and posts towards core concept of RESTful. <img src="http://oei21r8n1.bkt.clouddn.com/CRUD_20170527_7.png?imageView2/2/w/240" alt="CRUD Image" /> In short, CRUD is a selected implementation offered by most of modern Apps and Frameworks. It can be roughly regarded as a craft way between level-2 and HATEOAS. While RESTful is on a higher abstract layer to define the architecture style.</p><h3 id="applications">1.2 Applications</h3><p>Two kinds: Browser and Other Application. The Clients details are protected from coupling up with distributed systems. However, it can be checked through the User-Agent header.</p><h3 id="verbs-in-http">1.3 Verbs in HTTP</h3><h4 id="safety-and-idempotence">1.3.1 Safety and Idempotence</h4><p><span class="math inline">\(\mathsf{\color{olive}{✐\ Safety}}\)</span>: The operation won't change resource state on server side. Therefore if a safe operation is performed once or multiple times, the server state does not change as client never make the operation at all.</p><p><strong>Tips:</strong> Client does not know whether the server really does not change anything. Here safety is on <strong>service</strong> layer of perspective. The client does not couple up with whether server keeps audit, logs or runs an iterator as internal implementation. From a service layer view, if the resource remains, the uniformed interface with curren method is safe. So does Idempotence.</p><p><em><em>Notes:</em></em> &gt; <strong>Safety vs Security</strong>: In Chinese language, the two concepts are not distinguished by default. The two terms defined different scope in general English context. Safety refers to the infrastructural problems as climate disaster, earthquake, or, severes threats without indistinctive targets. Security is a bit narrow concept on individual level protection from explosing, targeted attacks.</p><p>Examples: GET and HEAD are safe methods. POST is not safe.</p><p><span class="math inline">\(\mathsf{\color{olive}{✐ Idempotence}}\)</span>: The operation on resource(s) by making one request is the same as making a series of <em>identical</em> requests. This concept is from Maths. When an operation has same effect whether it is applied once or more than once. For example,<span class="math inline">\(4\times0\times0 == 4\times0\)</span>.</p><p>Examples: GET, PUT and DELETE are idempotent. POST is not idempotent, neither.</p><p>HTTP v1.1 defines idempotence as: &gt;Methods can also have the property of "idempotence" in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request.</p><p>In distributed systems, idempotence is a key feature to decouple systems to eliminate strong constrains. For example, withdraw money from a deposit</p><p>Safety and idempotency allow clients to make reliable request over unreliable network environment. If the operation is safe, it can be cached and mutiplied without worry about side effects. If it is idempotent, the request can be replayed in unreliable environment.</p><p><span class="math inline">\(\color{brown}{✓\ Misusing\ GET\ for\ Unsafe\ Operations}\)</span> There is a common checkpoints for testing team to pay attention if safe metod as "GET" is misused to expose unsafe interfaces.</p><h4 id="summary-of-http-methods">1.3.2 Summary of HTTP Methods</h4><table><thead><tr class="header"><th style="text-align: left;">Method</th><th style="text-align: center;">Safe</th><th style="text-align: center;">Idempotent</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">POST</td><td style="text-align: center;"><span style="color: red">no</span></td><td style="text-align: center;"><span style="color: red">no</span></td></tr><tr class="even"><td style="text-align: left;">GET</td><td style="text-align: center;"><span style="color: green">yes</span></td><td style="text-align: center;"><span style="color: green">yes</span></td></tr><tr class="odd"><td style="text-align: left;">HEAD</td><td style="text-align: center;"><span style="color: green">yes</span></td><td style="text-align: center;"><span style="color: green">yes </span></td></tr><tr class="even"><td style="text-align: left;">PUT</td><td style="text-align: center;"><span style="color: red">no</span></td><td style="text-align: center;"><span style="color: green">yes </span></td></tr><tr class="odd"><td style="text-align: left;">PATCH</td><td style="text-align: center;"><span style="color: red">no</span></td><td style="text-align: center;"><span style="color: red">no</span></td></tr><tr class="even"><td style="text-align: left;">DELETE</td><td style="text-align: center;"><span style="color: red">no</span></td><td style="text-align: center;"><span style="color: green">yes </span></td></tr><tr class="odd"><td style="text-align: left;">LINK</td><td style="text-align: center;"><span style="color: red">no</span></td><td style="text-align: center;"><span style="color: green">yes </span></td></tr><tr class="even"><td style="text-align: left;">UNLINK</td><td style="text-align: center;"><span style="color: red">no</span></td><td style="text-align: center;"><span style="color: green">yes </span></td></tr></tbody></table><p><em><em>Notes:</em></em> &gt; <strong>PATCH</strong>: Unlike PUT, PATCH is not idempotent, both are not safe. Which is to say, PATCH is not required to be idempotent as I updates selected properties. Client shall not assume PATCH as idempotent operation. However, in purticular context, PATCH can be idempotent with headers "If-Match" or "If-Unmodified-Since".</p><blockquote><p>Another point, PATCH is not natively defined by HTTP specification. Which is introduced by RFC 5789, 2010 as an extension for Web APIs.</p></blockquote><blockquote><p><strong>GET</strong>: Safe and Idempotent. It is a hint to test cache via proxy or packet analyzer.</p></blockquote><blockquote><p><strong>POST</strong>: Two cases for POST method: Post-to-append (appending POST) and Post-to-overloaded (overloading POST). Post-to-append is the HTTP request to create a new resource beneath another resource.</p></blockquote><blockquote><p><strong>POST_and_PUT</strong>: POST regards the URI as resource "acceptor", not the resource itself to create. <code>POST https://api.forum.com/articles</code> is to create an article "for" articles resource, or, owned by articles. In the return result links to the new resource shall be indicated. The 2nd POST request will create another URI for articles. Therefore POST is not safe, non-idempotent.</p><p>PUT is idempotent. <code>PUT https://api.forum.com/articles/101</code> is to update or create the resource "in" 101 URI. Multiple POST actions make no difference here. Hence PUT is idempotent method by definition.</p></blockquote><blockquote><p><strong>HEAD</strong>: Similar to GET but only has HTTP headers.</p></blockquote><blockquote><p><strong>OPTIONS</strong>: It is an HTTP native exploring verb. The return result holds a header of <HTTP Allow> which defines all methods current resource supports.</p></blockquote><blockquote><p><strong>LINK/UNLINK</strong>: It is not recommended to adapt LINK/UNLINK so far since it is not popular. The LINK/UNLINK are proposed in an IETF draft.</p></blockquote><h3 id="http-status-code">1.4 HTTP Status Code</h3><table><colgroup><col style="width: 25%" /><col style="width: 37%" /><col style="width: 37%" /></colgroup><thead><tr class="header"><th style="text-align: left;">Range</th><th style="text-align: center;">Transition Information</th><th style="text-align: center;">Notes</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">1XX</td><td style="text-align: center;"><span style="color: blue">Information</span></td><td style="text-align: center;"><span style="color: blue">100 - Continue</span></td></tr><tr class="even"><td style="text-align: left;">2XX</td><td style="text-align: center;"><span style="color: green">OK</span></td><td style="text-align: center;"><span style="color: green">201 - Created <br> 204 - No Content</span></td></tr><tr class="odd"><td style="text-align: left;">3XX</td><td style="text-align: center;"><span style="color: brown">Redirection</span></td><td style="text-align: center;"><span style="color: brown">301 - Redirect Permanent <br>302 - Redirect Temporary </span></td></tr><tr class="even"><td style="text-align: left;">4XX</td><td style="text-align: center;"><span style="color: red">Client Error</span></td><td style="text-align: center;"><span style="color: red">400 - Bad Request (Malformated) <br> 401 - Unauthorized <br> 403 - Forbidden <br> 404 - Not Found <br> 405 - Now Allowed (wrong method) <br> 409 - Resource Conflict</span></td></tr><tr class="odd"><td style="text-align: left;">5XX</td><td style="text-align: center;"><span style="color: red">Server Error</span></td><td style="text-align: center;"><span style="color: red">501 - Not Implemented <br> 505 - HTTP Version Not Supported</span></td></tr></tbody></table><p>It is widely seen in practices the return status code is only checked whether it is 2XX as in many front end applications. On syntax level, this is effective. However, it is recommended to apply semantic checks as well. For example, it the request is to <em>C</em>reate an entity, then the status code in the response header is expected to be "201". On the other hand, when the request is to <em>D</em>elete an entity, the status code is expected to be "204".</p><p>From the architecture view, if a Front-End App triggers a state change via request to a service or micro-service, and the payload is transparently carried over to downstream micro-services. When the downstream service reports an payload error as 4XX (client side error), what would be returned to the Front-End App? It will depend on the information disclosure from overall strategy. For many of the applications, the Front-End runs in Browser or Mobile are not permitted to disclose more information for security sake. Therefore, it is possible to see 5XX errors on Front-End instead.</p><p><em><em>Notes:</em></em> Here is a <a href="https://i.stack.imgur.com/whhD1.png">complete decision diagram</a> on HTTP status code. For a quick reference on HTTP status code, readers are recommended to visit <a href="https://httpstatuses.com/">httpstatuses.com</a></p><h2 id="testing-restful-apis">2 Testing RESTful APIs</h2><p>In current section, the check points list is shared. It will be maintained lively. The list shall be able to apply in architecture review and testing works directly. I would try to add more concrete examples in following days.</p><p><strong>✓ HTTPs protocol always</strong></p><p>As common practice, CircleCI, travis-ci and Github are on HTTPs. However there are still couple of issues to pay special attention on security (refer to previous tips section in this post on safety vs security).</p><ul><li>Certificate verification between peers, which can reuse HTTPs infrastructure;</li><li>API keys to offer an RBAC or other access control;</li><li>Allow one client to work with multiple API keys;</li><li>Adapt <strong>API-key + Secret-Key</strong>, sign key value pairs before URL encoding;</li></ul><p>It is recommended to take a further step from API-key authentication to API-Key + Secret-Key authentication with a convention of <strong>Request Signature</strong>. It is hard to say which signature procedure is "right". There are several good practices to refer as Amazon AWS API parameter signature (v2.0, v1.0 is insecure), Baidu API and other famous providers. Here is a sample from developer.baidu.com. The URL parameters are signed with timestamp in predefined format and key value sorted in ascending order with session_secret appended. A kind reminder is to add timestamp as mentioned common practice to ignore expired requests. This protects services from Replay and Man-In-The-Middle attacks.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /rest/2.0/passport/users/getInfo?session_key=9XNNXe66zOlSassjSKD5gry9BiN61IUEi8IpJmjBwvU07RXP0J3c4GnhZR3GKhMHa1A%3D&amp;timestamp=2011-06-21+17%3A18%3A09&amp;format=json&amp;uid=67411167&amp;sign=d24dd357a95a2579c410b3a92495f009 HTTP/1.1</span><br><span class="line">Host: openapi.baidu.com</span><br><span class="line">User-Agent: Client of Baidu Open Platform</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Accept-Charset: utf-8</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p>Here is code sample from AWS on how to sign requests to AWS API. <a href="http://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html?shortFooter=true">http://docs.aws.amazon.com/general/latest/gr/sigv4-signed-request-examples.html?shortFooter=true</a></p><ul><li>CircleCI API runs on HTTPs, but not with signed request.</li><li>Travis-CI takes token from HTTP auth header also.</li></ul><p><strong>✓ Prefer to locate API to subdomain as <code>api.dome.com</code> instead of <code>domain.com/api</code></strong></p><p>This piece of tips makes APIs friendly to the network including Routers, Firewalls and Domain security infrastructures.</p><ul><li>CircleCI API service is not on subdomain, <code>https://circleci.com/api/v1.1/</code></li><li>Travis-CI runs service on <code>https://api.travis-ci.com/</code></li></ul><p><strong>✓ Combine version to URI, e.g. <code>api.domain.com/v1</code></strong></p><ul><li>CircleCI URI combines up version information.</li><li>Travis-CI accepts API version from HTTP Header.</li></ul><p><strong>✓ Use nouns but not verbs.</strong></p><ul><li>Plura nouns in most time</li><li>Nouns in plura reflect table names in DB</li></ul><p>Take below example from CircleCI API doc, cancel here is regarded as a resource like command queue. Travis-CI has similar interface <code>/job/&#123;job.id&#125;/cancel</code>. Here job.cancel will accept a resouce of command with POST.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST: /project/:vcs-type/:username/:project/:build_num/cancel</span><br><span class="line">Cancels the build, returns a summary of the build.</span><br></pre></td></tr></table></figure><p><strong>✓ Verbs (Methods) correctly utilized</strong></p><p>An example from Travis-CI API doc about 'PATCH' method to update properties:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PATCH</span><br><span class="line">/repo/&#123;repository.id&#125;/setting/&#123;setting.name&#125;</span><br></pre></td></tr></table></figure><ul><li>CRUD: Post, Get, Put/Patch, Delete</li><li>Head/Options</li><li>Get is idempotent (with all parameters)</li></ul><p><strong>✓ Filtering, Sorting, Selecting, Limit/Pagination Supports</strong></p><p>An example of RUI with pagination <code>api.domain.com/v1/zoos?id=2&amp;limit=10</code></p><ul><li>Travis-CI offers <a href="https://developer.travis-ci.com/pagination">pagination supports</a></li></ul><p><strong>✓ Status Code</strong></p><p>As mentioned in section 1.4, status codes are expected to be compliant to HTTP convention.</p><p><strong>✓ Error Handling</strong></p><p>RESTful service returns verbose error information in Payloads, e.g. <code>&#123;error: "XXX"&#125;</code></p><ul><li>Travis-CI error message example:</li></ul><p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;@type&quot;</span>:  <span class="string">&quot;home&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;@href&quot;</span>:  <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;errors&quot;</span>: &#123;</span><br><span class="line">   <span class="attr">&quot;login_required&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;status&quot;</span>:                <span class="number">403</span>,</span><br><span class="line">      <span class="attr">&quot;default_message&quot;</span>:       <span class="string">&quot;login required&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;additional_attributes&quot;</span>: [ ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;method_not_allowed&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;status&quot;</span>:                <span class="number">405</span>,</span><br><span class="line">      <span class="attr">&quot;default_message&quot;</span>:       <span class="string">&quot;method not allowed&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;additional_attributes&quot;</span>: [ ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;not_found&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;status&quot;</span>: <span class="number">404</span>,</span><br><span class="line">      <span class="attr">&quot;default_message&quot;</span>: <span class="string">&quot;resource not found (or insufficient access)&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;additional_attributes&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;resource_type&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>✓ Return Result compliancy</strong></p><ul><li>A set or an obj.</li><li>Sub resources for relations:</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /cars/711/drivers/ Returns a list of drivers for car 711</span><br><span class="line">GET /cars/711/drivers/4 Returns driver #4 for car 711</span><br></pre></td></tr></table></figure><p><strong>✓ Hypermedia context</strong></p><p>Provides Hyperlink driven APIs as manual exploring with the services.</p><p><strong>✓ Allowing Overriding Methods</strong></p><p>Use <code>X-HTTP-Method-Override</code> in cases some proxies only supports POST and GET.</p><h2 id="test-the-restful-service">3 Test the RESTful Service</h2><p>(TODO)</p><h2 id="devops-on-restful-service">4 DevOps on RESTful Service</h2><h3 id="dashboard-on-delivery-pipeline">Dashboard on Delivery Pipeline</h3><h3 id="dashboard-on-e2e-restful-status">Dashboard on E2E RESTful Status</h3><p>(TODO)</p><h2 id="references">5 References</h2><p><a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm" title="Architectural Styles and the Design of Network-based Software Architectures">Roy Thomas Fielding Phd Dessertation</a></p><p><a href="https://en.wikipedia.org/wiki/Representational_state_transfer" title="RESTful Wiki">Wikipedia RESTful Term</a></p><p><a href="https://www.crummy.com/">Leonard Richardson Personal Site</a> <a href="https://blog.mwaysolutions.com/2014/06/05/10-best-practices-for-better-restful-api/">10 Best Practices for better RESTful</a></p><p><a href="http://restcookbook.com/">REST Cookbook</a> <a href="https://www.businessinsider.com.au/mobile-web-vs-app-usage-statistics-2014-4" title="mobile web vs app">mobile web vs app</a></p><p><a href="https://raw.githubusercontent.com/for-GET/http-decision-diagram/master/httpdd.png">HTTP Status Code Decision Diagram in High Resolution</a></p><p><a href="https://circleci.com/docs/api/v1-reference/">Circle CI API v1.1</a></p><p><a href="https://docs.travis-ci.com/api">Travis CI API</a></p><p><a href="https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API">Jenkins Remote API</a></p><p><a href="http://broadcast.oreilly.com/2009/12/principles-for-standardized-rest-authentication.html">Principles for Standardized RESTful Authentication</a></p><p><a href="http://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing AWS Request</a></p><h2 id="change-logs">6 Change Logs</h2><p>Jun 02, 2019: Fix image links and update HTTP status code section. May 29, 2017: Add security check point examples. May 27, 2017: Minor change, updated pictures. May 23, 2017: Updated HTTP methods and Status Code overview. May 20, 2017: Initial the draft.</p><h2 id="terms-and-notes">7 Terms and Notes</h2><section class="footnotes footnotes-end-of-document" role="doc-endnotes"><hr /><ol><li id="fn1" role="doc-endnote"><p>URI - The Uniform Resource Identifier has two forms: URN and URL. URN maps resources by unique names and URL locates resources with unique locations.<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> RESTful </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTful </tag>
            
            <tag> Architecture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS solution of power sum challenge</title>
      <link href="/2017/05/16/BFS-solution-of-power-sum-challenge/"/>
      <url>/2017/05/16/BFS-solution-of-power-sum-challenge/</url>
      
        <content type="html"><![CDATA[<p>This post described a python solution on coding challenge "the power sum" (med) and common points on BFS algorithm. <strong>The_Power_Sum</strong> asks how many solutions on equation <span class="math inline">\(n_1^x + n_2^x + .. n_i^x = n\)</span> when <span class="math inline">\(n_1, n_2, n_i \in [1, n]\)</span> <span id="more"></span></p><h2 id="problem-statement">Problem Statement</h2><p>Given positive numbers <span class="math inline">\(n,x\)</span> and find how many solutions can satisfy <span class="math inline">\(n_1^x + n_2^x + .. n_i^x = n\)</span> when <span class="math inline">\(n_1, n_2, n_i \in [1, n]\)</span>. Since every number is unique and only shows up once from <span class="math inline">\([1,n]\)</span>, with the symmetry of <span class="math inline">\(+\)</span> operation, the answer is how many combinations from set <span class="math inline">\([1,n]\)</span>, not permutation. On a general perspective of view, the solution space is within <span class="math inline">\(\sum_{i=1}^n C(^n_k)\)</span>, which is <span class="math inline">\(2^n\)</span>.</p><p>For example, if n is 10 and x is 2 then there answer is 1 since there is only one solution of <span class="math inline">\(1^2 + 3^2 = 10\)</span>. But 100, 2 would get 3 as answer because <span class="math inline">\(100 = 10^2 = 6^2 + 8^2 = 1^2 + 3^2 + 4^2 + 5^2 + 7^2\)</span>.</p><h2 id="rephrase-the-problem-to-mathimatical-language">Rephrase the Problem to Mathimatical Language</h2><h3 id="terminology">Terminology</h3><p><strong>BFS</strong>: Breadth First Search. Classic BFS defines problem as a search in space described by set V, E where each V as vertex has a set of E (<span class="math inline">\(V_i \to V_j\)</span> where <span class="math inline">\(V_i, V_j \in V\)</span>).</p><p>The worst performance is <span class="math inline">\(O(|V| + |E|)\)</span> because it travels from all candidate vertexes and loops all possible <span class="math inline">\(E_i\)</span>. Therefore, to cache all the candidate partial results, the worst space complexity is <span class="math inline">\(O(|V|)\)</span>. Here <span class="math inline">\(E\)</span> only describes the state transition and a <span class="math inline">\(O(|V|)\)</span> structure queues the concerned information on paths.</p><p>The classic BFS procedure is straight, simple and useful. We can find the transformed BFS in DB join query, distributed query on indexes or caches, Fast Hashing, GeoApps as Navigator and Shopping Guide Apps. Keys within fundamental algorithms are how to apply the abstract model to real worlds <span class="math inline">\(\lambda \to \pi\)</span>. The most natrual principal of computer system design is to mimic a structure which represents the nouns of concepts from real world. Which requests a map from machine space to human view space.</p><h3 id="problem-space">Problem Space</h3><p>To apply the thoughts of DFS and BFS algorithm we shall rephase the problem to a typical search in given logical sapce. Moreover, if we generally define a vector to present the tracks of current search, a set of vector could be regarded as the set of partial search results.</p><h3 id="intermediate-result-set">Intermediate Result Set</h3><p>BFS, as how the term is coined, will cache the intermediate results and move forward on all of them during each step. So it is fair to all possible branches. That's why it can find the fastest path(s).</p><p>Here search sapce it numbers of [1, n]. Since each number can only show up once or not, we have n vertexes on a linear space. We can assign 0, 1 to the vertex to mark it picked up or not picked-up in current search branch. The string of '0' and '1' can represent a path of current search and the strings in list can play the data structure as the intermediate vectors of partial search results.</p><h3 id="algorithm-application-key-points">Algorithm Application Key Points:</h3><p>My <a href="http://maxwu.me/2017/05/02/Recursive-Depth-First-Search-with-a-tracking-Set/">previous post</a> is about a common recursive design of DFS. It emphasized two key steps to form a recursive solution.</p><ul><li>✎ Termination condition: For DFS, it is the test whether to record the result as a success and whether to continue the search. Back to current problem, I stop the branch because it is not meaningful to add any positive number since the summary is already satisfied or even exceeded.<ul><li>Whether to record the success path when termination state found</li><li>Whether to continue search: if there is a cycle of arcs from one termination state to another termination state and the path is meaningful, we shall continue but be reminded of cycles in search.</li></ul></li><li>✎ How to reduce: "Reduce" is a term to apply the sub-problem (current scope of search) of DFS to join the other branch of search.</li></ul><p>For a BFS algorithm, we evaluate all branches on the same depth level in search. Sometimes the depth is a term of cost. Here for current problem, we can assign the number of positive numbers visited as the depth of search.</p><p>On each step, BFS check the partial search result set and work on all partial paths. Usually we loop all of the candidates and move forward one step if the candidate can generate further paths to search.</p><h3 id="smart-search">Smart Search</h3><p>A loop on all candidates is mentioned in above section. However, it could be generalized to a weight based candidate set. So a ranking based on partial results can be assessed. Based on what we know for each step, the weight will be adjusted. A smart search can work from high ranked candidate branch to the low ranked ones. Which is also the key to <span class="math inline">\(A^*\)</span> algorithm although heuristic algorithms are not within the scope of this post.</p><p>In current solution to "The Sum of Power" coding challenge, we just force the exceeded partial search paths do not take any more number. It is to cut off not useful branches in the search space.</p><p>To shrink the search scope for this particular problem, uplimit is calculated because for <span class="math inline">\(n_i &gt; \sqrt[X]N where i \in [1, n]\)</span> the <span class="math inline">\(n_i\)</span> is safe to bypass. Each element has two branches on search paths, '1': selected, '0': bypassed, so search space is within <span class="math inline">\(2^{lmt}\)</span>.</p><h2 id="solution-and-code">Solution and code</h2><p>With above understanding, turning design into codes is a straight and clear action. The BFS codes have 11 lines in Python to search given space.</p><p>A dict is introduced to queue the intermediate results as {<strong>search path in 0|1 string : partial sum</strong> }.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">lmt, tgt, pwr</span>):</span></span><br><span class="line">    rec = &#123;<span class="string">&#x27;&#x27;</span>: <span class="number">0</span>&#125;  <span class="comment"># candidates in str: int format</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, lmt+<span class="number">1</span>):</span><br><span class="line">        tmp_rec = <span class="built_in">dict</span>() <span class="comment"># The candidate E for futher steps</span></span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> rec.iteritems():</span><br><span class="line">            <span class="keyword">if</span> v &lt; tgt:</span><br><span class="line">                tmp_rec[k+<span class="string">&#x27;1&#x27;</span>] = v + i**pwr <span class="comment"># Take a step forward on this path with &#x27;1&#x27; branch</span></span><br><span class="line">                tmp_rec[k+<span class="string">&#x27;0&#x27;</span>] = v <span class="comment"># Take a step on &#x27;0&#x27; branch</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmp_rec[k+<span class="string">&#x27;0&#x27;</span>] = v <span class="comment"># Can only take &#x27;0&#x27; branch</span></span><br><span class="line">        rec = tmp_rec</span><br><span class="line">    <span class="keyword">return</span> [k <span class="keyword">for</span> k, v <span class="keyword">in</span> rec.iteritems() <span class="keyword">if</span> v == tgt]</span><br><span class="line"></span><br><span class="line"><span class="comment"># __main__</span></span><br><span class="line">x, n = [<span class="built_in">int</span>(raw_input().strip())<span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">2</span>)]</span><br><span class="line">lmt = <span class="built_in">int</span>(<span class="built_in">round</span>(x ** (<span class="number">1.0</span>/n))) + <span class="number">1</span></span><br><span class="line">ss = bfs(lmt, x, n)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">len</span>(ss)</span><br></pre></td></tr></table></figure><p>We could not alter an iterator within the iteration loop with Python (or other langauge like Java). So a tmp_rec is introduced to queue those partial paths which are meaningful to take further efforts to catch up and search deeper.</p><h1 id="following-up">Following Up</h1><p>This problem is a common BFS application occasion. As we have above implementation for BFS, a general way of coding can be applied to other BFS solution.</p><p>(TBC: Would get back and add other generalized BFS solving examples.)</p><h1 id="references">References</h1><ul><li><p>The coding challenge link, https://www.hackerrank.com/challenges/the-power-sum</p></li><li><p>Previous Post, http://maxwu.me/2017/05/02/Recursive-Depth-First-Search-with-a-tracking-Set</p></li></ul><h1 id="change-log">Change Log</h1><ul><li>May 18, 2017: Change to MathJax format to rewrite equations clearly.</li><li>May 16, 2017: Finish the initial draft.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Algorithm </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CIstat preview version released</title>
      <link href="/2017/05/12/CIstat-preview-version-released/"/>
      <url>/2017/05/12/CIstat-preview-version-released/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/maxwu/cistat">CIstat</a> is a Python package supporting to fetch, analyze and present automation test data from common CI services as CircleCI, <em>Travis</em>, <em>Bamboo</em> and <em>Jenkins</em> (preview version has implemented CircleCI to verify the idea)</p><figure><img src="https://i.imgur.com/gtm74Prm.png" alt="CIstat_preview" /><figcaption aria-hidden="true">CIstat_preview</figcaption></figure><span id="more"></span><h1 id="installation">Installation</h1><p>CIstat with preview version could be installed with pip CVS interface from github directly.</p><p>Install cistat Pypi dist with <strong>dev</strong> branch latest code from Github:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install https://github.com/maxwu/cistat/archive/dev.zip</span><br></pre></td></tr></table></figure><p>Install cistat from <strong>master</strong> (release) branch on Github:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install https://github.com/maxwu/cistat/archive/master.zip</span><br></pre></td></tr></table></figure><h1 id="usage">Usage</h1><h2 id="sample-charts">Sample Charts</h2><p><strong>Pie Chart</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">report.get_class_rpt().plot_piechart_casenum(project, <span class="string">&quot;Case Num per Class&quot;</span>)</span><br></pre></td></tr></table></figure><p>The Pie Chart for case numbers per class level is:</p><figure><img src="https://i.imgur.com/vlPfImUm.png" alt="Pie Chart on Case Number per Class" /><figcaption aria-hidden="true">Pie Chart on Case Number per Class</figcaption></figure><p><strong>Bar Chart</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">report.plot_barchart_rate(project, <span class="string">&quot;Pass Rate per case&quot;</span>)</span><br></pre></td></tr></table></figure><p>The Bar Chart of Pass Rate for cistat project is:</p><figure><img src="https://i.imgur.com/vUhu4B9m.png" alt="Bar Chart on Pass Rate" /><figcaption aria-hidden="true">Bar Chart on Pass Rate</figcaption></figure><p><strong>Bubble Chart</strong></p><blockquote><p>The ROI chart is more considerable for nightly build result analysis in a testing project within XUnit test framework to control the resources as case, docker/cpu, feature integration.</p></blockquote><blockquote><p>In the sample height of bubble represents the pass rate and the size of bubble shows the test efforts (Currently it is simply the case number; It will be updated to a formula on test time and case number). The lower the bubble positions, the bigger it shall grow to get more resource and invest to float up to 1.0 the stable status.</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">report.get_class_rpt().plot_scatter_roi(project, <span class="string">&quot;Test ROI per Class&quot;</span>)</span><br></pre></td></tr></table></figure><p>The Bubble Chart to present case ROI per class as below:</p><figure><img src="https://i.imgur.com/R2NmQMjm.png" alt="Bubble Chart on Test ROI" /><figcaption aria-hidden="true">Bubble Chart on Test ROI</figcaption></figure><h2 id="console-entry-point">Console Entry Point</h2><p>Quick step to run above sample: <code>cistat-cli</code>. Since circleci.com has throttling limit on RESTful API, it is recommended to configure an API-Key in environmental variable or local config.yaml.</p><p>This console command is installed with Pypi dist. <code>cistat-cli</code> is the console entry point planted by PIP installer setup.py.</p><h2 id="configuration">Configuration</h2><p>Configuration item preference order is:</p><p><code>Cli Options &gt;&gt; Environment Variables &gt;&gt; Local Config.yaml</code></p><p>Configuration items:</p><ul><li>circleci_api_token: The 40 token characters to avoid throttling.</li></ul><blockquote><p>To test string length with shell, <code>printf $STR | wc -c</code></p></blockquote><h1 id="design">Design</h1><h2 id="data-models">Data Models</h2><p>Now CIstat has implemented XUnit model. Which is a widely used test report XML format. CIstat wrappered it with full functional Python type with +, +=, getter/setter with [key] and len() to simplify the further applications.</p><p>As a practice to prepare for future Cloud related statD thoughts (as DataDog service), XUnit is firstly picked up as XUnit has counter, scalar and ratio types of data. These data in various types can be accumulated or aggregated with +, += and speficied with [] operator.</p><p>The future step on data model is to expand to white-box parts as Lint scores and code coverage.</p><h2 id="requests">Requests</h2><p>So far only circleci RESTful interfaces are supported. TravisCI and Jenkins are on following step while the preview version is under more tests.</p><h1 id="references">References</h1><p>[1] The README document with samples, <a href="https://github.com/maxwu/cistat">https://github.com/maxwu/cistat</a></p><p>[2] My Gitbook chapter about Pip installation from Github, <a href="https://maxwu.gitbooks.io/python-tips/content/pip-supports-installation-from-github.html">https://maxwu.gitbooks.io/python-tips/content/pip-supports-installation-from-github.html</a></p><h1 id="change-logs">Change Logs</h1><p>May 10, 2017: Init post.</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> CI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> RESTful </tag>
            
            <tag> CircleCI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Recursive Depth-First-Search with a tracking Set</title>
      <link href="/2017/05/02/Recursive-Depth-First-Search-with-a-tracking-Set/"/>
      <url>/2017/05/02/Recursive-Depth-First-Search-with-a-tracking-Set/</url>
      
        <content type="html"><![CDATA[<p>Inspired by a StackOverflow(SOF) question, this post is a refreshment on DFS and key points to take care before coding a recursive DFS. <span id="more"></span></p><h2 id="the-problem-statement">The Problem Statement</h2><blockquote><p>I have the following lists: Animals Food Cat Fish Dog Pork Beef I would like to allocate food to the animals in as many different ways as possible like:</p></blockquote><p>Each different animal and food combination will be stored in a map.</p><p>(Cat eats Fish, Dog eats Pork)</p><p>(Cat eats Fish, Dog eats Beef)</p><p>(Cat eats Pork, Dog eats Fish)</p><p>(Cat eats Pork, Dog eats Beef)</p><p>(Cat eats Beef, Dog eats Fish)</p><p>(Cat eats Beef, Dog eats Pork)</p><p>Finally all the maps will be put in a set and returned. I am trying to use recursive function for the same and the following is how I tried it.. but am not able to get it right it right, so please help me to make it.</p><p>It intends to keep the method fingerprint ("will return Set object") and the incomplete code has no global tracking table as usual.</p><p>The method fingerprint provide by problem statement.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Map&lt;Animal, Food&gt;&gt; eats(List&lt;Animal&gt; animal, List&lt;Food&gt; food);</span><br></pre></td></tr></table></figure><p>The original SFO link is <a href="http://stackoverflow.com/questions/43702227/java-recursive-food-allocation/43719930#43719930">http://stackoverflow.com/questions/43702227/java-recursive-food-allocation/43719930#43719930</a></p><h2 id="solution-and-description">Solution and Description</h2><h3 id="solution-codes">Solution Codes</h3><p><strong>DFS</strong>: Depth First Search. For DFS, we define the machine friendly rephrasing of problem space and lunch the search until termination condition is satisfied.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SFO_Recursive</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        CAT, DOG ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">        FISH, BEEF, PORK ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Map&lt;Animal, Food&gt;&gt; eats(List&lt;Animal&gt; animal, List&lt;Food&gt; food) &#123;</span><br><span class="line">        Set&lt;Map&lt;Animal,Food&gt;&gt; fleet = <span class="keyword">new</span> HashSet();</span><br><span class="line">        <span class="keyword">for</span> (Animal a: animal)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Food f: food)&#123;</span><br><span class="line">                <span class="comment">// Take a step with (a, f)</span></span><br><span class="line">                List&lt;Food&gt; food_left = food.stream().filter(x -&gt; !x.equals(f)).collect(Collectors.toList());</span><br><span class="line">                List&lt;Animal&gt; animal_left = animal.stream().filter(x -&gt; !x.equals(a)).collect(Collectors.toList());</span><br><span class="line">                <span class="keyword">if</span> (animal_left.isEmpty() || food_left.isEmpty())&#123;</span><br><span class="line">                    <span class="comment">// Terminal state</span></span><br><span class="line">                    fleet.add(<span class="keyword">new</span> HashMap&lt;Animal, Food&gt;()&#123;&#123;put(a,f);&#125;&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    eats(animal_left, food_left).stream().forEach(s -&gt; &#123;s.put(a, f); fleet.add(s); &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fleet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SFO_Recursive.eats(</span><br><span class="line">            Arrays.asList(Animal.CAT, Animal.DOG),</span><br><span class="line">            Arrays.asList(Food.BEEF, Food.FISH, Food.PORK)</span><br><span class="line">        ).stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The output of above codes: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;CAT=BEEF, DOG=PORK&#125;</span><br><span class="line">&#123;CAT=PORK, DOG=BEEF&#125;</span><br><span class="line">&#123;CAT=BEEF, DOG=FISH&#125;</span><br><span class="line">&#123;CAT=FISH, DOG=BEEF&#125;</span><br><span class="line">&#123;CAT=FISH, DOG=PORK&#125;</span><br><span class="line">&#123;CAT=PORK, DOG=FISH&#125;</span><br></pre></td></tr></table></figure></p><h3 id="key-points-in-dfs-before-coding">Key Points in DFS before Coding</h3><p>In worst case, the time complexity is <span class="math inline">\(O(|V| + |E|)\)</span>. V and E are vertex and edge sets. For recursive Depth-First-Search coding, besides the initial state and problem space representation, there are two key things to take care (before starting programming):</p><ul><li><strong>Terminal State Evaluation</strong><ul><li>Test condition to determine whether current state is a temrinal one</li><li>Any additional tests to judge if it is an effective result to retrun</li><li>How to pack up the data to return</li></ul></li><li><strong>The reduce step</strong>: How to apply current step to a partial result from (future) terminal state(s)<ul><li>Let's assume the rest data are already processed by future states and we have time machine to get back to "now"</li><li>Here the key is to add (animal, food) pair into an existing Set<ul><li>For each element of Set, the new pair can be appended into the element (Map)</li><li>The hashCode algorithms of Map, Map Entries are reliable to directly add new pair without additional restriction check.</li></ul></li></ul></li></ul><p>If we have to keep the method fingerprint to return Set with inputs of two Lists. The terminal condition is the obvious empty list in either parameter to stop the search. To apply current step to a Set, we can loop all the Maps and just add the combination of new Animal obj and new Food obj to each one but rely on Set class to check whether unique Map is added. Without global tracking table, we can remove consumed elements from Animal and Food Lists to send the information to next state.</p><h3 id="about-java-hashcode-algorithms">About Java hashCode() Algorithms</h3><p>Java test equality, "==", by hashCode(). Map calculate hashCode as <span class="math inline">\(\sum{_{k,v\ in\ map}} (hashCode(k)\)</span> ^ <span class="math inline">\(hashCode(v))\)</span>. Every enum value has an unique hashCode by default. Therefore, it is okay to directly add Map elements.</p><p>The simplified formula in other format: Map.hashCode() = <span class="math inline">\(\sum (entry.key.hashCode()\)</span> ^ <span class="math inline">\(entry.val.hashCode())\)</span></p><h3 id="another-example-from-sfo">Another Example from SFO</h3><p>I confess the AI of SFO is effective as I recommend another DFS algorithm related topic. The original question on codereview.stackexchange.com is on <a href="https://codereview.stackexchange.com/questions/161989/recursively-listing-files-in-python">Link</a>.</p><p>It is about to walk full paths from a start directory and search for files only with restrictions of min and max Depth.</p><p>In this problem, the original code has mixed min depth check and max depth. Usually DFS check the max depth at first of code block, because it is (part of) <strong>Terminal State</strong> test. The recursion needs to know whether to terminate current approach direction at beginning for most cases. In other words, first sub-problem is whether to cut this search branch.</p><p>With a simple correction, here is the working program. Change happens in 3rd line.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">atDirList4</span>(<span class="params">startDir, maxDepth=sys.maxsize, minDepth=<span class="number">0</span>, curDepth=<span class="number">0</span></span>):</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">if</span> curDepth &lt; maxDepth:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(startDir):</span><br><span class="line">            fullItem = os.path.join(startDir, item)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> os.path.isfile(fullItem) <span class="keyword">and</span> curDepth &gt;= minDepth:</span><br><span class="line">                    ret.append(fullItem)</span><br><span class="line">                <span class="keyword">elif</span> os.path.isdir(fullItem) <span class="keyword">and</span> curDepth + <span class="number">1</span> &lt;= maxDepth:</span><br><span class="line">                    ret.extend(atDirList4(fullItem, maxDepth, minDepth, curDepth + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">except</span> OSError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h2 id="references">References</h2><blockquote><p>My original answer on StackOverflow: <a href="http://stackoverflow.com/a/43719930/230100">http://stackoverflow.com/a/43719930/230100</a></p></blockquote><blockquote><p>DFS Definition on Wikipedia: <a href="https://en.wikipedia.org/wiki/Depth-first_search">https://en.wikipedia.org/wiki/Depth-first_search</a></p></blockquote><h2 id="change-log">Change Log</h2><ul><li>May 18, 2017: render equations with MaxthJax format.</li><li>May 03, 2017: add Python DFS example.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Algorithm </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Share a Shell Toy with Buddies</title>
      <link href="/2017/04/15/Share-a-Shell-Toy-with-Buddies/"/>
      <url>/2017/04/15/Share-a-Shell-Toy-with-Buddies/</url>
      
        <content type="html"><![CDATA[<p>Happened to read a game from LinkedIn. An recruiter published a series words of '0' and '1' on my LinkedIn timeline. Which brought me back to the funny time struggling with huge logs from a large number of embedded cards. Can't wait to decode with shell :_) <span id="more"></span></p><h1 id="problem-recitation">Problem Recitation</h1><p>Here is the original <a href="https://www.linkedin.com/feed/update/urn:li:activity:6257861978069565441/">post</a>. The contents are as below:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01001101 01111001 00100000 01100101 01101101 01100001 01101001 01101100 00100000 01101001 01110011 00100000 01101100 01110011 01110100 01100101 01110110 01100101 01101110 01000000 01110110 01101101 01110111 01100001 01110010 01100101 00101110 01100011 01101111 01101101</span><br></pre></td></tr></table></figure><h1 id="solution">Solution</h1><p>The problem could be quickly solved with programming language for sure. Perl will be my preference and I'd attach a Perl version in this article as well.</p><p>However, as a fan of shell cli, I will share the thoughts to resolve in shell cli. Let's save it to a text file, e.g. "<strong>original.txt</strong>". A traditional style of cli one-time quick parsing is to build a pipeline. Each time we focus on one thing only and communicate with pipe as mentioned on <Art of Unix Programming>.</p><p>With command "<strong>which</strong>", <strong>manpage</strong> and experience, we can find MacOS offers traditional Unix executables as "<strong>bc</strong>" (actually an interpreter) and "<strong>xxd</strong>" which can satisfy common Hex and ASC works.</p><p>The high level design in mind is: (1) Data Regularization and split data to datum items (2) For each data item: (2.1) Translate (0|1) binary string to Hex (2.2) Translate Hex back to ASC (3) Streamline result datum item back to sentence</p><p><strong><em>Note 1</em></strong>: &gt;The current post is to describe the thoughts with best memory. Well which does not suggest ones to formly take the tedious steps in real life. In practice, it shall happen just in couple of minutes. The model lives in mind on most of the on-hand tasklet. Using shell, we can keep our focus on the original logical problem and just pay a very limited bandwidth of our mind to finish the side path. The most valuable thing in daily life is concentration. If using Python or IPython will be faster and costs less bandwidth, go and get it without loosing focus on the original problem to solve.</p><p><strong><em>Note 2</em></strong>: &gt;A simple example of Map-Reduce is to count books in an library. We split to each shelf and count books on the specific shelf -- Map. When all have finished, we add numbers in sum -- Reduce.</p><h1 id="implementation">Implementation</h1><h2 id="step-1-data-regularization">Step 1: data regularization</h2><p>Using command "<strong>tr</strong>" to replace space with "CR" is a common step to split task for further processing per line with transient processes. Typically we consider a "<strong>Map</strong>" step at first.</p><h2 id="step-2-process-each-datum">Step 2: Process each datum</h2><h3 id="translate-01-string-to-hex">Translate 0|1 string to Hex</h3><p>For each string representing binary value with (0|1)+, it could be translated to Hex with <strong>bc</strong> command.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;obase=16; ibase=2; 01001101&quot;</span>| bc</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">4D</span></span><br></pre></td></tr></table></figure><p>Here obase and ibase are keywords as inputs to <strong>bc</strong> interpreter to identify the base number of input and output.</p><p><strong><em>Note 3</em></strong>: &gt;<strong>bc</strong>, (Basic Calculator) is much more powerful than a base number translator. It is an interpreter for calculation tasks. And here we also have other choice. The philosophy is to just pick up what we are familiar and save focus on real problem.</p><h3 id="translate-hex-to-asc">Translate Hex to ASC</h3><p>This step is also traditional. <strong>xxd</strong> command is usually picked up to dump hex or reverse hex to text.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="built_in">echo</span> <span class="string">&quot;4D&quot;</span>| xxd -r -p</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">M</span></span><br></pre></td></tr></table></figure><p>There are alternatives as od, hexdump to complete this step.</p><h2 id="step-3-the-final-command">Step 3: The Final Command</h2><p>Since we don't add CR into pipe bytes, there is no specific "<strong>Reduce</strong>" step to take care. The bytes will be processed in a streamline: 8 bytes of '0|1' are extracted by CR -&gt; 8 bytes of '0|1' are translated to two bytes of a Hex value -&gt; the 2 bytes Hex value is translated to one ASC byte -&gt; Untill stdin closed.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="keyword">for</span> x <span class="keyword">in</span> $(cat original.txt|tr <span class="string">&#x27; &#x27;</span> <span class="string">&quot;\n&quot;</span>); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;obase=16; ibase=2; <span class="variable">$x</span>&quot;</span>| bc| xxd -r -p; <span class="keyword">done</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">My email is lsteven@vmware.com</span></span><br></pre></td></tr></table></figure><h1 id="alternatives">Alternatives</h1><p>The perl one-line-cli version. Cheers on powerful text processing engine.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">cat original.txt |perl -lape <span class="string">&#x27;$_=pack&quot;(B8)*&quot;,@F&#x27;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">My email is lsteven@vmware.com</span></span><br></pre></td></tr></table></figure><p>Have fun!</p><p><strong>Change Logs</strong></p><p>2017-04-15 | Init the post to share a shell toy.</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cli </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Genre-Clawer -- A Cli-App and Maven lib to fetch genres</title>
      <link href="/2017/03/22/Genre-Clawer-A-Cli-App-and-Maven-lib-to-fetch-genres/"/>
      <url>/2017/03/22/Genre-Clawer-A-Cli-App-and-Maven-lib-to-fetch-genres/</url>
      
        <content type="html"><![CDATA[<p>Genre-Clawer (<a href="https://github.com/maxwu/Genre-Clawer">Github</a>) is a tool in both maven lib and cli-app created to verify an idea to fetch genres for given music pieces. It started with a post on Lower Hutt Countdown wall and which is a good journey as a weekend hackathon.</p><p><img src="https://i.imgur.com/aeMFkdFm.png" alt="Genre-Clawer-v1.4a1" /> <span id="more"></span></p><h2 id="backgrounds">Backgrounds</h2><p>Last week, I saw a post on Lower Hutt countdown community wall. The writer shared a problem in picking songs from a genre sets with given order. I took it as an interesting topic and divided it into two steps:</p><ul><li>Genre tagging;</li><li>Recommendation algorithms.</li></ul><p>There comes the Genre-Clawer in the weekend as a maven lib and a CLI binary. It is also a good journey for me to learn new stuffs.</p><p>This jar ball is a tool to support the tagging sub-problem and practice selenide as well as maven lib deployment. For a realistic case, I would prefer a fast implementation with Python for the more convenient eco and sweety language. However, regarding most of the dev/test positions in Wellington that I am looking for require tracks of Java coding proof, it is a choice to keep hands warm with Java all possible time.</p><p>The Java lib picks BillBoard weekly top100 songs by default to fetch genres. From v1.3 on, the success rate is <strong>92%</strong> for the top100 songs. The failed songs genre list will only contain one term "NA".</p><h2 id="user-guide">User Guide</h2><h3 id="maven">Maven</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jitpack.io<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://jitpack.io<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.maxwu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Genre-Clawer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>v1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>With above dependencies with maven, here is a quick sample to query genre list with song information.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> me.maxwu.genre.htmlUnit.HtmlUnitBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenreCli</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(</span><br><span class="line">            <span class="string">&quot;Song: That&#x27;s What I Like, Genre:&quot;</span></span><br><span class="line">                + <span class="keyword">new</span> HtmlUnitBase()</span><br><span class="line">                .getSongGenres(<span class="string">&quot;That&#x27;s What I Like&quot;</span>, <span class="string">&quot;Bruno Mars&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Execution Logs</span><br><span class="line">Song: That&#x27;s What I Like, Genre:[Pop]</span><br></pre></td></tr></table></figure><p>Another sample to use HtmlUnit client in both billboard top100 song list and genre fetching.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> me.maxwu.genre.htmlUnit.HtmlUnitBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CliApp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> HtmlUnitBase()</span><br><span class="line">            .getBillboardTop100Map(<span class="number">4</span>)</span><br><span class="line">            .values()</span><br><span class="line">            .forEach(s -&gt; System.out.println(</span><br><span class="line">                <span class="string">&quot;Song: &quot;</span> + s.get(<span class="string">&quot;song&quot;</span>) + <span class="string">&quot;, Genre:&quot;</span></span><br><span class="line">                    + <span class="keyword">new</span> HtmlUnitBase()</span><br><span class="line">                        .getSongGenres(s.get(<span class="string">&quot;song&quot;</span>).toString(), s.get(<span class="string">&quot;artist&quot;</span>).toString()) )</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Execution logs</span><br><span class="line">Song: Shape Of You, Genre:[Pop]</span><br><span class="line">Song: That&#x27;s What I Like, Genre:[Pop]</span><br><span class="line">Song: Bad And Boujee, Genre:[Hip-hop, rap]</span><br><span class="line">Song: I Don&#x27;t Wanna Live Forever (Fifty Shades Darker), Genre:[Pop]</span><br></pre></td></tr></table></figure><p>Since in most situation people will not utilize multiple clients unless in testing, app package is in progress of an update to support a simplified application and efficient improvement. These are on list for v1.4 as next release, which is open for recommendations.</p><h3 id="java-application-cli">Java Application Cli</h3><p>Usage:</p><blockquote><p><strong>&gt;java -jar ./target/Genre-Clawer-1.3.jar [-h] | [-n ${size}] [-c ${client}] [-s ${song} | [-a ${artist]]</strong></p><p>"-h": Show help message and exit.</p><p>"-n": Size of song list fetched from BillBoard Top100 music. This option is int type and defaults to 10.</p><p>"-c": Case insensitive client type from {"HtmlUnit", "Selenide" and Jsoup (in progress)}. Option is case insensitive string of client name. HtmlUnit is the default client type. Using Selenide requests Chrome Browser configured up with Selenium and WebDriverManager.</p><p>"-s": Song name in string to query genres for a specific music piece. Song name is recommended to wrapped with quotation marks.</p><p>"-a": Artist name in string to support the above query with song name. Artist name is recommended to wrapped with quotation marks.</p></blockquote><h4 id="example-1-fetch-billboard-top-5-songs-genres">Example 1: Fetch billboard top 5 songs genres</h4><p>By default, HtmlUnit headless browser is used in this example.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># To fetch billboard top5 songs genres:</span><br><span class="line">&gt;java -jar ./target/Genre-Clawer-1.3.jar -n5</span><br><span class="line">Got total 5 songs</span><br><span class="line">1:</span><br><span class="line">  song: Shape Of You</span><br><span class="line">  artist: Ed Sheeran</span><br><span class="line">  genres: [Pop]</span><br><span class="line">2:</span><br><span class="line">  song: Bad And Boujee</span><br><span class="line">  artist: Migos Featuring Lil Uzi Vert</span><br><span class="line">  genres: [Hip-hop, rap]</span><br><span class="line">3:</span><br><span class="line">  song: That&#x27;s What I Like</span><br><span class="line">  artist: Bruno Mars</span><br><span class="line">  genres: [Pop]</span><br><span class="line">4:</span><br><span class="line">  song: I Don&#x27;t Wanna Live Forever (Fifty Shades Darker)</span><br><span class="line">  artist: Zayn / Taylor Swift</span><br><span class="line">  genres: [Pop]</span><br><span class="line">5:</span><br><span class="line">  song: Love On The Brain</span><br><span class="line">  artist: Rihanna</span><br><span class="line">  genres: [Contemporary R&amp;B, Pop]</span><br><span class="line"></span><br><span class="line">Success rate = 100.00%</span><br></pre></td></tr></table></figure><h4 id="example-2-fetch-genres-for-song-name-love-on-the-brain-and-artist-name-rihanna">Example 2: Fetch genres for song name "Love On The Brain" and artist name "Rihanna"</h4><p>Obviously, this example will utilize default HtmlUnit headless browser.</p><p><a href="https://asciinema.org/a/b0n59hqlnjjqte4es7e9wg96f"><img src="https://asciinema.org/a/b0n59hqlnjjqte4es7e9wg96f.png" alt="asciicast" /></a></p><h2 id="further-works">Further works</h2><p>For the second sub-problem, some additional glue works shall be adapted in between as:</p><ul><li><p>Regulating genre and mapping to dimensions, e.g. with <a href="http://id3.org/id3v2.3.0#Appendix_A_-_Genre_List_from_ID3v1">ID3v1</a></p></li><li><p>Cached persistence and realistic storage</p></li><li><p>RESTful API with a presentation layer in front</p></li></ul><p>With the above constructions, generating playlist could be turned to a typical recommendation algorithm.</p><h2 id="appendix">Appendix</h2><h3 id="change-logs">Change logs:</h3><p>2017-03-21, Initial summary for Genre-Clawer v1.4a1.</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Selenium </tag>
            
            <tag> Selenide </tag>
            
            <tag> HtmlUnit </tag>
            
            <tag> Maven </tag>
            
            <tag> JitPack </tag>
            
            <tag> Genre </tag>
            
            <tag> Google </tag>
            
            <tag> Clawer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup virtualenv for Jenkins Python CI Task</title>
      <link href="/2017/03/09/Setup-virtualenv-for-Jenkins-Task/"/>
      <url>/2017/03/09/Setup-virtualenv-for-Jenkins-Task/</url>
      
        <content type="html"><![CDATA[<p>When setting up CI for python projects, virtualenv could help to separate the test/deployment environment. This post will provide a template for Jenkins to use virtualenv for Jenkins tasks with <a href="http://jenkins.maxwu.me/job/ci-stat/">Jenkins example</a>.</p><p><img src="https://i.imgur.com/7uPOevZm.png" alt="ci-stat screenshot" /> <span id="more"></span></p><h3 id="common-test-script-template">Common Test Script Template</h3><p>Here is the script I used on Jenkins</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment">########################</span></span><br><span class="line"><span class="comment"># Step 1: Setup virtualenv</span></span><br><span class="line"><span class="comment"># This step is only for Jenkins. Travis and CircleCI will ignore this step.</span></span><br><span class="line"><span class="comment">########################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$&#123;WORKSPACE:+1&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Path to virtualenv cmd installed by pip</span></span><br><span class="line">    <span class="comment"># /usr/local/bin/virtualenv</span></span><br><span class="line">    PATH=<span class="variable">$WORKSPACE</span>/venv/bin:/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="string">&quot;venv&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            virtualenv venv</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    . venv/bin/activate</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># Alternatively, $TRAVIS_REPO_SLUG could be utilized here to provide name.</span></span><br><span class="line">    <span class="built_in">export</span> JOB_NAME=<span class="string">&quot;ci-stat&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">pip install -r requirements.txt -r <span class="built_in">test</span>/test_requirements.txt --cache-dir /tmp/<span class="variable">$JOB_NAME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################</span></span><br><span class="line"><span class="comment"># Step 2: Execute Test</span></span><br><span class="line"><span class="comment">########################</span></span><br><span class="line">nosetests --with-xunit --all-modules --traverse-namespace --with-xcoverage --cover-package=me.maxwu --cover-inclusive --logging-level=INFO --debug=me.maxwu -s -v --xunit-file ci-stat_nose_xunit.xml --cover-html ./<span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################</span></span><br><span class="line"><span class="comment"># Step 3: PyLint</span></span><br><span class="line"><span class="comment">########################</span></span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">pylint -f parseable -d I0011,R0801 me.maxwu | tee ../pylint.out</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment">#EOF</span></span><br></pre></td></tr></table></figure><p>There are two requirements files in my repo: requirements.txt and test/test_requirements.txt. The later one defines the prerequisites for test using as told by name and location. Special attention is recommended to take for nose, coverage, pylint and codecov (if using travis).</p><p>The test_requirements.txt has below contents.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nose&gt;=1.3.7</span><br><span class="line">nosexcover&gt;=1.0.11</span><br><span class="line">pylint&gt;=1.6.5</span><br><span class="line">coverage&gt;=4.3.4</span><br><span class="line"># codecov for post-build Travis CI step.</span><br><span class="line">codecov==2.0.5</span><br></pre></td></tr></table></figure><h3 id="configure-jenkins-with-above-test">Configure Jenkins with above test</h3><h4 id="build-steps">Build Steps</h4><p>To utilize above bash script, we can add one shell execution step on Jenkins task management portal.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -x <span class="built_in">test</span>/nosetests_ci-stat.sh</span><br></pre></td></tr></table></figure><p>Sometimes the build-step is divided to several steps including virtualenv, nose test, and, lint scoring. Explicit "shell exeuction" steps with Jenkins make the logic clear to maintain and reuse.</p><p>Some other times, the test is based on PyPi package and virtualenv could offer a separate environment to install real packages for test using.</p><h4 id="environmental-variables">Environmental Variables</h4><p>It is a critical security concern to protect environmental variables if there is configuration items applied through them. For example, I have local config.yaml file to specify my Travis and Circle CI API token, but this config.yaml is in gitignore file. To read such secrets, I configure Jenkins secret as in menu "<strong>Build Environment -&gt; Binding</strong>". For environmental variables on Travis, it has protection not to show plain text contents in logs so which is secured automatically.</p><h4 id="post-build-steps">Post Build Steps</h4><p>Three popular but fundamental plugins will be introduced: - JUnit Test Result Publishment. - Violation Report: The lint scan results. - Cobertura Coverage Report: the coverage data (for given Python package).</p><h3 id="references">References</h3><ul><li><p><a href="http://jenkins.maxwu.me/job/ci-stat/">http://jenkins.maxwu.me/job/ci-stat/</a></p></li><li><p><a href="http://iamnearlythere.com/jenkins-python-virtualenv/">http://iamnearlythere.com/jenkins-python-virtualenv/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> CI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI </tag>
            
            <tag> Jenkins </tag>
            
            <tag> Python </tag>
            
            <tag> Automation </tag>
            
            <tag> Virtualenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A dip with performance test lib Locust</title>
      <link href="/2017/03/06/A-dip-with-performance-test-lib-Locust/"/>
      <url>/2017/03/06/A-dip-with-performance-test-lib-Locust/</url>
      
        <content type="html"><![CDATA[<p>Locust is a Python lib for performance test. Here is a first dip with locust with sample codes. <span id="more"></span></p><h3 id="installation">Installation</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ⓑ&gt;pip install locust pyzmq</span><br></pre></td></tr></table></figure><h3 id="the-sample-case">The Sample Case</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ⓑ&gt;cat http_bare_visit.py</span><br><span class="line"><span class="keyword">from</span> locust <span class="keyword">import</span> HttpLocust, TaskSet, task</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBehavior</span>(<span class="params">TaskSet</span>):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @task(<span class="params"><span class="number">1</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bare_visit</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.client.get(<span class="string">&quot;/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebsiteUser</span>(<span class="params">HttpLocust</span>):</span></span><br><span class="line">    task_set = UserBehavior</span><br><span class="line">    min_wait = <span class="number">3000</span></span><br><span class="line">    max_wait = <span class="number">6000</span></span><br><span class="line"> ⓑ&gt;</span><br></pre></td></tr></table></figure><h3 id="run-a-performance-test">Run A Performance Test</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ⓑ&gt;locust -f ./http_bare_visit.py  --host=http://jenkins.maxwu.me</span><br><span class="line">[2017-03-06 01:23:44,842] MaxWudeMacBook-Pro.local/INFO/locust.main: Starting web monitor at *:8089</span><br><span class="line">[2017-03-06 01:23:44,842] MaxWudeMacBook-Pro.local/INFO/locust.main: Starting Locust 0.7.5</span><br><span class="line">[2017-03-06 01:24:24,914] MaxWudeMacBook-Pro.local/INFO/locust.runners: Hatching and swarming 10 clients at the rate 1 clients/s...</span><br><span class="line">[2017-03-06 01:24:34,939] MaxWudeMacBook-Pro.local/INFO/locust.runners: All locusts hatched: WebsiteUser: 10</span><br></pre></td></tr></table></figure><p>Open browser on http://localhost:8089 and configure the simulation size and hatch rate. When the test execution starts, the GUI will provides statistic data.</p><p>Press Ctrl-C on terminal to stop the runner process. The data report is available on terminal console, too.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2017-03-06 01:29:10,073] MaxWudeMacBook-Pro.local/ERROR/stderr: KeyboardInterrupt</span><br><span class="line">[2017-03-06 01:29:10,074] MaxWudeMacBook-Pro.local/INFO/locust.main: Shutting down (<span class="built_in">exit</span> code 0), <span class="built_in">bye</span>.</span><br><span class="line"> Name                                                          <span class="comment"># reqs      # fails     Avg     Min     Max  |  Median   req/s</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> GET /                                                            106     1(0.93%)     346     179     501  |     350    2.00</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> Total                                                            106     1(0.94%)                                       2.00</span><br><span class="line"></span><br><span class="line">Percentage of the requests completed within given <span class="built_in">times</span></span><br><span class="line"> Name                                                           <span class="comment"># reqs    50%    66%    75%    80%    90%    95%    98%    99%   100%</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> GET /                                                             106    350    350    360    360    390    400    440    500    501</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Error report</span><br><span class="line"> <span class="comment"># occurences       Error</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> 1                  GET /: <span class="string">&quot;ConnectionError(ProtocolError(&#x27;Connection aborted.&#x27;, error(54, &#x27;Connection reset by peer&#x27;)),)&quot;</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"> ⓑ&gt;</span><br></pre></td></tr></table></figure><p>[EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> Performance Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Locust </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>why I write technical blog</title>
      <link href="/2017/03/02/why-I-write-technical-blog/"/>
      <url>/2017/03/02/why-I-write-technical-blog/</url>
      
        <content type="html"><![CDATA[<p>This post describes the thoughts, motivation and tips on starting technical blog. <span id="more"></span></p><h3 id="output-is-part-of-learning"><em>Output is part of learning</em></h3><p>The first reason could be traced to a suggestion I took from my manager in Lucent Technologies company. It is as important as, or even more important to output rather than just taking inputs. In other words, the theory recommend people to organize the thoughts by making output as a part of learning phase.</p><div data-align="center"><p><img src="https://www.brainyquote.com/photos_tr/en/e/eldoctorow/111838/eldoctorow1.jpg" width="400" height="240" alt="Writing is an exploration"/></p></div><p>IELTS tests English langauge level with four sections, reading, listening, writing and conversation. The first two sections are for inputs and the rest two sections are for outputs. Which means, for language learning, output is as important as input, 50% to 50%. Well for Chinese students, it is easy to get a good score on inputs but difficult to get a high score in output. The reason is complicated. Cultural background is considered as an elementary reason that Chinese students are good at reading but relatively lower performance on writing or presentation.</p><p>Writing a blog could mitigate this. Bloging as a habit forces us to write down tips and summarize the thoughts in an organized style.</p><h3 id="refactor-artifacts-brings-better-understanding"><em>Refactor artifacts brings better understanding</em></h3><p>Some posts on this Hexo blog with Github are updated more than 5 times. Usually there is an idea or a brief of tips at first. After a couple of days, I turn back to complish the TBC parts. However, sometimes after dinner, I used to find an improvement on the description, or, there is a bug to resolve against the first solution.</p><p>For example, I post my iptables rules with nginx in the first version of <a href="http://maxwu.me/2017/02/28/domain-and-iptables-update-notes/">post</a>. But when I triggered Jenkins task with selenium, a critical bug is discovered that loopback interface is not in ACCEPT rule on INPUT chain.</p><p>Keeping the post updated once there is a better view inspired by reading or occassionally reasons. Then when you get back to the post and organize the language, the understanding on technical topics will update, too.</p><p>[TBC]</p><p>2017-03-02, Max, Initial post.</p>]]></content>
      
      
      <categories>
          
          <category> Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Output </tag>
            
            <tag> Input </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS S3 Outage</title>
      <link href="/2017/03/01/AWS-S3-Outage/"/>
      <url>/2017/03/01/AWS-S3-Outage/</url>
      
        <content type="html"><![CDATA[<p>Encountered an <strong>AWS S3 Outage</strong> today on <strong>Travis CI</strong>. The broadcasting message shew that some apps providers have nothing to do but just pray or twitter and expect AWS to recover the issuing region S3 service (the most failures were from <strong>North Virginia Regnion</strong>, US-East, the following number -1 depends on accounts). Quora even has core stack out so content is not accessible for a while. As a content provider, we hope at least the authentication and reading on hot/warm data shall be maintained with appropertiate techniques as staticizing and CDN, hybrid mode for warm/hot data, et. The fact is cruel. On the other hand, which brings us back to <strong>Netflix Simian Army</strong> and most people are sure Netflix will not be impacted based on the chaos weather test from public reports.</p><p>Since S3 is a storage service, moreover, it is also a base to support many other famous AWS services. Which could explain why the AWS monitoring system was still presenting a green light at first couple of hours. It is weird to build WatchDog on top of the system under watch. However, it happened.</p><figure><img src="http://oei21r8n1.bkt.clouddn.com/travis_s3_outage.png?imageView/2/w/300/q/100" alt="Travis Error Message on My Project" /><figcaption aria-hidden="true">Travis Error Message on My Project</figcaption></figure><p>This post will share some thoughts on AWS outage. <span id="more"></span></p><h3 id="a-look-at-travis-ci">A look at Travis CI</h3><p>It failed to query build and test logs from cloud for a while in the morning. It seemed only US-East region was impacted. My public resume and logboks on US-West works fine till now. However, most developers will see US-East1 outage but we shall keep it in mind that the number X in US-EastX is up to different user accounts. Which means, US-East1 for some developer is US-East2 for some other developers. This mapping table will not change for one specified developer account.</p><p>Detail information could be found at <a href="https://www.traviscistatus.com/incidents/hmwq9yy5dh9d">Travis broadcast update</a></p><h3 id="thoughts-on-aws-issue-outage">Thoughts on AWS issue (Outage)</h3><h4 id="keep-core-stack-alive">Keep Core Stack Alive</h4><p>The core stack of authentication, basic view, dashboard, et. shall be alive at severe disaster. It is an element of service no matter what kind of techniques and serving bandwidth is. For a content provider, the cache of CDN shall be closely monitored.</p><p>If a vertical module is identified as core-stack, it shall be a separate service. Even I could not write on quora, could not search or see the recommended streamlines, I still want to see a portal showing a primitive channel to access the contents.</p><h4 id="staticize-core-ux-part">Staticize Core UX part</h4><p>As mentioned in above section, the core UX part as user login authentication, dashboard presenting (even there could be red alert in chart), hot/warm data reading are better be cached on static channel as CDN. I don't have work experience on internet company so this section is just by best imaging. Since front-end development model is sophisticated and strong enough, we could try to make resources as static as possible. Below are techniques we can grasp at first sight:</p><ul><li><em>Memcache</em> and <em>Redis</em> with DB;</li><li><em>Squid</em> or <em>Nginx (with plugin)</em> cache;</li><li><em>CDN</em> with balanced and separated cloudfront nodes;</li><li><em>DNS</em>, prefetching, plan-B on primary domain failure;</li></ul><p>More consideration includes traditional concerns around cache design patterns on caching, CAP vs. latency.</p><p>In some cases, we can design an alternative UX to alternatively activate in cases the dynamic solution failure/outage is detected.</p><p>This can provide end users and operation stakeholders a straight view that our service is still up but some part is under recovery.</p><h4 id="error-handling">Error Handling</h4><p>Since core stack is separated, the error from infrastructure shall be captured and handled in an approperiate way. Which could porivde an information page, a short message, or, just a pager call to operation staff but avoid collapsing the whole application service like some of the famous applications we saw during the accident.</p><p>In short, it is to localize errors as much as possible.</p><h4 id="learn-from-simian-army">Learn from Simian Army</h4><p>Simian Army, <a href="http://techblog.netflix.com/2011/07/netflix-simian-army.html">Netflix Paper</a>, is the means to create realistic chaos withing stage system when actual infrastructure is still working fine. For example, "Chaos Gorilla" is the tool to let Dev and Ops test the mitigation-plan when AWS cloud service is out.</p><p>It will randomly change host file on your application so product team could test and live with disasters from infrastructure. With the first hand "realistic" data, a self-healing or graceful recovery could be designed and integrated.</p><p>The paper was drafted year 2011 and it is still worthy reading every time when we see a batch of internet services are down when there is an AWS flu.</p><p>Live with Murphy's law, live with test.</p><h4 id="portability-of-apps">Portability of Apps</h4><p>In other words, as mentioned in an interview on CloudFormation topic, the first thing we need to consider about CloudFormation technical stack is portability: if it supports to migrate your service to another provider to create an either stand-by cloud deployment or a fast grown plan-b. I would rather prefer to construct an ORM style internal stack to work as cloudformat to keep an open interface in cases. And there shall be a designed and open to provide interfaced "DataFormat" to keep warm data duplicated.</p><h4 id="own-the-system-from-mindset">Own the system from mindset</h4><p>The system is rent but design principle shall include AWS infrastructure as on premise thinking. The AWS services you utilitized will be part of your system, not just a rental from mindset. The SDLC shall still cover it from architecture phase.</p><p>As applications are being migrated from business line to end-user line, from BS/CS to cloud, from cadenced CI to CD even DevOps, the overall architecture and systematic thinking as a whole system on premises mind is not popular any more. I remember the days in Lucent Technologies to write and review system specifications for a security feature to support series of following candidate features. We drafted thoughts, made prototype to test, verifying with modelling tools and took the system in a whole view top to bottom and state by state within the layer.</p><p>2017-03-02, Max, added Simian Army section.</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> S3 </tag>
            
            <tag> TravisCI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>domain and iptables update notes</title>
      <link href="/2017/02/28/domain-and-iptables-update-notes/"/>
      <url>/2017/02/28/domain-and-iptables-update-notes/</url>
      
        <content type="html"><![CDATA[<p>An update on adding sub domain name to existing godaddy domain service, setting up nginx to forward 4096 port to 80, setting up firewall rules with iptables, iptables-persistent on Ubuntu VPS. <code>jenkins.maxwu.me</code> is now a sub-domain.</p><span id="more"></span><p>The previous jenkins service is running on Ubuntu VPS but I just added a 301 forwarding on Godaddy domain service. Therefore, the readers will read the real IP address in browser URL column. It has no buffering service so Jenkins has to keep the slow connections over internet. The third reason is to harden this VPS host since the service is publicly accessible globally.</p><h2 id="setting-up-nginx">Setting up Nginx</h2><p>From Nginx config file we can see that all files in <code>/etc/nginx/sites-enabled</code> will be included by default. We can create a site description file by copying the file <code>default</code> as a template. The simplified contents are as below:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;cat jenkins</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  root /var/run/jenkins/war/;</span><br><span class="line">  server_name jenkins.maxwu.me;</span><br><span class="line"></span><br><span class="line">  access_log      /var/log/nginx/jenkins/access.log;</span><br><span class="line">  error_log       /var/log/nginx/jenkins/error.log;</span><br><span class="line">  ignore_invalid_headers off; #pass through headers from Jenkins which are considered invalid by Nginx server.</span><br><span class="line">  location ~ &quot;^/static/[0-9a-fA-F]&#123;8&#125;\/(.*)$&quot; &#123;</span><br><span class="line">    rewrite &quot;^/static/[0-9a-fA-F]&#123;8&#125;\/(.*)&quot; /$1 last;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location /userContent &#123;</span><br><span class="line">root /var/lib/jenkins/;</span><br><span class="line">        if (!-f $request_filename)&#123;</span><br><span class="line">           #this file does not exist, might be a directory or a /**view** url</span><br><span class="line">           rewrite (.*) /$1 last;</span><br><span class="line">   break;</span><br><span class="line">        &#125;</span><br><span class="line">sendfile on;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location @jenkins &#123;</span><br><span class="line">      sendfile off;</span><br><span class="line">      proxy_pass         http://127.0.0.1:4096;</span><br><span class="line">      proxy_redirect     default;</span><br><span class="line"></span><br><span class="line">      proxy_set_header   Host             $host;</span><br><span class="line">      proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">      proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">      proxy_max_temp_file_size 0;</span><br><span class="line"></span><br><span class="line">      #this is the maximum upload size</span><br><span class="line">      client_max_body_size       10m;</span><br><span class="line">      client_body_buffer_size    128k;</span><br><span class="line"></span><br><span class="line">      proxy_connect_timeout      90;</span><br><span class="line">      proxy_send_timeout         90;</span><br><span class="line">      proxy_read_timeout         90;</span><br><span class="line"></span><br><span class="line">      proxy_buffer_size          4k;</span><br><span class="line">      proxy_buffers              4 32k;</span><br><span class="line">      proxy_busy_buffers_size    64k;</span><br><span class="line">      proxy_temp_file_write_size 64k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line"></span><br><span class="line">     # Optional configuration to detect and redirect iPhones</span><br><span class="line">      if ($http_user_agent ~* &#x27;(iPhone|iPod)&#x27;) &#123;</span><br><span class="line">          rewrite ^/$ /view/iphone/ redirect;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      try_files $uri @jenkins;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Further reference could be found <a href="https://wiki.jenkins-ci.org/display/JENKINS/Running+Jenkins+behind+Nginx">Jenkins Doc</a>.</p><h2 id="add-sub-domain">Add Sub Domain</h2><p>This step with Godaddy is convenient. Click the domain management function and add an A-Record to existing domain:</p><p>Host -&gt; Input your sub-domain name, here is "jenkins"; Target -&gt; Input IP to reolve with; TTL -&gt; By default, keep 60min.</p><p>After a while, nslookup jenkins.maxwu.me could return new results:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ⓑ maxwu&gt; nslookup jenkins.maxwu.me</span><br><span class="line">Server:8.8.8.8</span><br><span class="line">Address:8.8.8.8<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:jenkins.maxwu.me</span><br><span class="line">Address: 104.224.136.48</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="harden-host-with-firewall">Harden host with firewall</h2><p>To check existing rules, <code>iptables -L -n</code>. Ubuntu has a good utility to save and reload iptables rules, -- "iptables-persistent". Install iptables-persistent with apt-get, <code>service iptables-persistent save|reload</code> could save your time to add network interface up/down scripts. The rules file by default locates at <code>/etc/iptables.ipv4</code>.</p><p>Here are my iptables rules for references. I added general notes.</p><h3 id="allow-specified-inputs">Allow Specified Inputs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Replace 22 with your customized SSH port</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br><span class="line"><span class="comment"># Allow Ping request</span></span><br><span class="line">iptables -A OUTPUT -p icmp -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp -j ACCEPT</span><br><span class="line"><span class="comment"># Allow loopback</span></span><br><span class="line">iptables -A INPUT -s 127.0.0.1 -d 127.0.0.1 -j ACCEPT</span><br></pre></td></tr></table></figure><blockquote><p>The pervious version introduces an issue to block 127.0.0.1 loopback connection other than 80/22 ${ssh} /4096 ${actual_service_port_behind_nginx}</p><p>It causes selenium tests fail with Jenkins. After adding loopback acceptance rule into INPUT chain, this issue is resolved. This issue costs an hour tonight. At first, I thought it is a memory issue since the VPS only has 512MB shared RAM. However, a detailed check shew that Cucumber-Selenium only spent around 200MB memory during the test with default GC. So adding MAVEN_OPT with JVM parameters won't resolve it.</p><p>By the way, if there is concern on Jenkins JVM parameters, readers can find them at /etc/default/jenkins file. Variable name is <code>JAVA_ARGS</code>.</p><p>Besides, to limit the maven job JVM memory, it could be specified within MAVEN_OPTS environmental variables.</p><p>[2017-03-01]</p></blockquote><h3 id="allow-established-sessions">Allow Established Sessions</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT</span><br></pre></td></tr></table></figure><h3 id="log-dropped-packets">Log Dropped Packets</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT 5 -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 5/min -j LOG --log-prefix <span class="string">&quot;iptables denied: &quot;</span> --log-level 7</span><br></pre></td></tr></table></figure><h3 id="set-policy-rule-default-rule">Set Policy Rule (default rule)</h3><p>If you are operating remotely, make sure this step executed at last.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure><p>Have fun!</p><p>###<em>--Change Log--</em></p><p><em>2017-03-01, Max, Fix an issue with iptables loopback.</em></p><p><em>2017-03-01, Max, Update nginx config with Jenkins reverse proxy documentation.</em></p><p><em>2017-02-28, Max, Init the notes.</em></p><p>EOF</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Linux </tag>
            
            <tag> VPS </tag>
            
            <tag> Firewall </tag>
            
            <tag> DNS </tag>
            
            <tag> Nginx </tag>
            
            <tag> Ipfilter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SoapUI command line</title>
      <link href="/2017/02/27/SoapUI-command-line/"/>
      <url>/2017/02/27/SoapUI-command-line/</url>
      
        <content type="html"><![CDATA[<p>SoapUI is widely used in WebService functional and performance test. This post is a note on how to run SoapUI in command line with Mac environment. <span id="more"></span></p><p>Environment: MBP, SoapUI 5.3 open source version, bash.</p><p>By default, the testrunner.sh located at <code>Applications/SoapUI-5.3.0.app/Contents/java/app/bin</code>. Therefore, an env file with below line will add testrunner into path.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/Applications/SoapUI-5.3.0.app/Contents/java/app/bin</span><br></pre></td></tr></table></figure><p>To run test suite "Suite-Pub-1" in project "GettingStarted-soapui-project.xml" and dump XUnit format report to specified folder, below bash shell command is verified.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;cat test_Suite-Pub-1_in_Getting-Started.sh</span><br><span class="line">testrunner.sh -Dfile.encoding=UTF-8-I -r -j -s Suite-Pub-1 GettingStarted-soapui-project.xml -f ./reports/$(date &quot;+%Y-%m-%d-%H-%M-%S-Proj-GettingStarted&quot;)</span><br></pre></td></tr></table></figure><p>There is an error with soapUI 5.3 open source version on class reflection (loading) step.</p><p>Running logs:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ⓑ maxwu  01:03  ~  devel  toy-box  soapUI   master  ./test_Suite-Pub-1_in_Getting-Started.sh</span><br><span class="line">================================</span><br><span class="line">=</span><br><span class="line">= SOAPUI_HOME = /Applications/SoapUI-5.3.0.app/Contents/java/app</span><br><span class="line">=</span><br><span class="line">================================</span><br><span class="line">SoapUI 5.3.0 TestCase Runner</span><br><span class="line">01:04:34,315 INFO  [DefaultSoapUICore] initialized soapui-settings from [/Users/maxwu/soapui-settings.xml]</span><br><span class="line">SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.</span><br><span class="line">01:04:35,133 INFO  [PluginManager] 0 plugins loaded in 1 ms</span><br><span class="line">01:04:35,133 INFO  [DefaultSoapUICore] All plugins loaded</span><br><span class="line">01:04:37,319 INFO  [WsdlProject] Loaded project from [file:/Users/maxwu/devel/toy-box/soapUI/GettingStarted-soapui-project.xml]</span><br><span class="line">01:04:37,326 INFO  [SoapUITestCaseRunner] Running SoapUI tests in project [Soap Test Project]</span><br><span class="line">01:04:37,327 INFO  [SoapUITestCaseRunner] Running TestSuite [Suite-Pub-1], runType = SEQUENTIAL</span><br><span class="line">01:04:37,349 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [TC-Soap-CurrencyRate]</span><br><span class="line">01:04:37,354 INFO  [SoapUITestCaseRunner] running step [ConversionRate-req]</span><br><span class="line">01:04:38,475 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request</span><br><span class="line">01:04:38,475 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /currencyconvertor.asmx HTTP/1.1</span><br><span class="line">01:04:38,843 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK</span><br><span class="line">01:04:38,846 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely</span><br><span class="line">01:04:38,942 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID</span><br><span class="line">01:04:38,942 INFO  [SoapUITestCaseRunner] Assertion [Response SLA] has status VALID</span><br><span class="line">01:04:38,946 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [TC-Soap-CurrencyRate], time taken: 1583ms, status: FINISHED</span><br><span class="line">01:04:38,947 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [TC-Soap-Translator12]</span><br><span class="line">01:04:38,947 INFO  [SoapUITestCaseRunner] running step [SOAP Req En-Ch 1.2]</span><br><span class="line">01:04:40,080 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request</span><br><span class="line">01:04:40,080 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /webservices/EnglishChinese.asmx HTTP/1.1</span><br><span class="line">01:04:41,486 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK</span><br><span class="line">01:04:41,486 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely</span><br><span class="line">01:04:41,856 INFO  [SoapUITestCaseRunner] Assertion [SOAP Response] has status VALID</span><br><span class="line">01:04:41,856 INFO  [SoapUITestCaseRunner] Assertion [Schema Compliance] has status UNKNOWN</span><br><span class="line">01:04:41,856 INFO  [SoapUITestCaseRunner] Assertion [Not SOAP Fault] has status VALID</span><br><span class="line">01:04:41,856 INFO  [SoapUITestCaseRunner] Assertion [XPath Match Translation Result] has status VALID</span><br><span class="line">01:04:41,857 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [TC-Soap-Translator12], time taken: 2908ms, status: FINISHED</span><br><span class="line">01:04:41,857 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [TC-Get-Translator]</span><br><span class="line">01:04:41,858 INFO  [SoapUITestCaseRunner] running step [HTTP Req Get Translator]</span><br><span class="line">01:04:41,871 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check</span><br><span class="line">01:04:41,873 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request</span><br><span class="line">01:04:41,873 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: GET /webservices/EnglishChinese.asmx/Translator?wordKey=string HTTP/1.1</span><br><span class="line">01:04:42,350 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK</span><br><span class="line">01:04:42,351 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely</span><br><span class="line">01:04:42,380 INFO  [SoapUITestCaseRunner] Assertion [XPath Match] has status VALID</span><br><span class="line">01:04:42,381 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [TC-Get-Translator], time taken: 480ms, status: FINISHED</span><br><span class="line">01:04:42,381 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [TC-Post-Translator]</span><br><span class="line">01:04:42,382 INFO  [SoapUITestCaseRunner] running step [HTTP Req Get Translator]</span><br><span class="line">01:04:42,384 DEBUG [HttpClientSupport$SoapUIHttpClient] Stale connection check</span><br><span class="line">01:04:42,386 DEBUG [HttpClientSupport$SoapUIHttpClient] Attempt 1 to execute request</span><br><span class="line">01:04:42,386 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Sending request: POST /webservices/EnglishChinese.asmx/Translator HTTP/1.1</span><br><span class="line">01:04:42,974 DEBUG [SoapUIMultiThreadedHttpConnectionManager$SoapUIDefaultClientConnection] Receiving response: HTTP/1.1 200 OK</span><br><span class="line">01:04:42,975 DEBUG [HttpClientSupport$SoapUIHttpClient] Connection can be kept alive indefinitely</span><br><span class="line">01:04:42,987 INFO  [SoapUITestCaseRunner] Assertion [XPath Match] has status VALID</span><br><span class="line">01:04:42,988 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [TC-Post-Translator], time taken: 591ms, status: FINISHED</span><br><span class="line">01:04:42,992 INFO  [SoapUITestCaseRunner] Running SoapUI testcase [TC-Casual]</span><br><span class="line">01:04:42,992 INFO  [SoapUITestCaseRunner] running step [Groovy Script1]</span><br><span class="line">Hello Max!</span><br><span class="line">01:04:43,362 INFO  [SoapUITestCaseRunner] Finished running SoapUI testcase [TC-Casual], time taken: 369ms, status: FINISHED</span><br><span class="line">01:04:43,362 INFO  [SoapUITestCaseRunner] TestSuite [Suite-Pub-1] finished with status [FINISHED] in 6031ms</span><br><span class="line"></span><br><span class="line">SoapUI 5.3.0 TestCaseRunner Summary</span><br><span class="line">-----------------------------</span><br><span class="line">Time Taken: 6036ms</span><br><span class="line">Total TestSuites: 1</span><br><span class="line">Total TestCases: 5 (0 failed)</span><br><span class="line">Total TestSteps: 5</span><br><span class="line">Total Request Assertions: 8</span><br><span class="line">Total Failed Assertions: 0</span><br><span class="line">Total Exported Results: 0</span><br><span class="line"> ⓑ maxwu  01:04  ~  devel  toy-box  soapUI   master </span><br></pre></td></tr></table></figure><p>TODO:</p><ul><li>Groovy scripting with Java.</li><li>Check performance test chart.</li><li>Sharing the free SOAP Web Interface for test practices.</li><li>Construct local RESTful interface with Python Django and test with Groovy suites.</li></ul><p>Drafted Feb27. EOF</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> SoapUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SoapUI </tag>
            
            <tag> CLI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache ab and gnuplot to generate benchmark test chart</title>
      <link href="/2017/02/26/Apache-ab-and-gnuplot-to-generate-benchmark-test-chart/"/>
      <url>/2017/02/26/Apache-ab-and-gnuplot-to-generate-benchmark-test-chart/</url>
      
        <content type="html"><![CDATA[<p>This post described a simple demo on how to use apache benchmark test to get performance test result and generate chart with gnuplot.</p><figure><img src="http://oei21r8n1.bkt.clouddn.com/ab_maxwu_chart.png?imageView/2/w/300/q/100" alt="benchmark performance test chart" /><figcaption aria-hidden="true">benchmark performance test chart</figcaption></figure><span id="more"></span><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> ⓑ maxwu &gt; ab -v  -n40 -c1 <span class="string">&quot;http://jenkins.maxwu.me/&quot;</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1706008 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking jenkins.maxwu.me (be patient).....<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Microsoft-IIS/7.5</span><br><span class="line">Server Hostname:        jenkins.maxwu.me</span><br><span class="line">Server Port:            80</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        0 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      1</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   2.518 seconds</span><br><span class="line">Complete requests:      1</span><br><span class="line">Failed requests:        0</span><br><span class="line">Non-2xx responses:      1</span><br><span class="line">Total transferred:      268 bytes</span><br><span class="line">HTML transferred:       0 bytes</span><br><span class="line">Requests per second:    0.40 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       2518.479 [ms] (mean)</span><br><span class="line">Time per request:       2518.479 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          0.10 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:     2289 2289   0.0   2289    2289</span><br><span class="line">Processing:   229  229   0.0    229     229</span><br><span class="line">Waiting:      229  229   0.0    229     229</span><br><span class="line">Total:       2518 2518   0.0   2518    2518</span><br><span class="line"> ⓑ maxwu &gt;</span><br></pre></td></tr></table></figure><p>The detection on Web Server type is incorrect. The data could be dumpped in gnuplot data format with <code>-g filename</code>.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gnuplot&gt; <span class="built_in">set</span> output <span class="string">&quot;http_benchmark.png&quot;</span></span><br><span class="line">gnuplot&gt; <span class="built_in">set</span> xlabel <span class="string">&quot;request&quot;</span></span><br><span class="line">gnuplot&gt; <span class="built_in">set</span> ylabel <span class="string">&quot;ms&quot;</span></span><br><span class="line">gnuplot&gt;plot <span class="string">&quot;plot.dat&quot;</span> using 7 with lines title <span class="string">&quot;ctime&quot;</span>, \</span><br><span class="line"><span class="string">&quot;plot.dat&quot;</span> using 8 with lines title <span class="string">&quot;dtime&quot;</span>, \</span><br><span class="line"><span class="string">&quot;plot.dat&quot;</span> using 9  with lines title <span class="string">&quot;ttime&quot;</span>, \</span><br><span class="line"><span class="string">&quot;plot.dat&quot;</span> using 10 with lines title <span class="string">&quot;wait&quot;</span></span><br></pre></td></tr></table></figure><p>The benchmark test chart is generated as the chart in beginning of this post.</p><ul><li><p>ctime: Connection Time</p></li><li><p>dtime: Processing Time</p></li><li><p>ttime: Total Time</p></li><li><p>wait: Waiting Time</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> Performance Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ab </tag>
            
            <tag> Benchmark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins with Selenium 3, Chrome Driver latest version and Chromium Browser on cheap 32bit Linux</title>
      <link href="/2017/02/21/Jenkins-with-Selenium-3-1-0-ChromeDriver-latest-version-and-Chromium-Browser-on-32bit-Linux/"/>
      <url>/2017/02/21/Jenkins-with-Selenium-3-1-0-ChromeDriver-latest-version-and-Chromium-Browser-on-32bit-Linux/</url>
      
        <content type="html"><![CDATA[<p>What a lovely day it has been in Wellington. Finally there comes the summer! And I also have a lovely day to successfully make stable test results on 32bit Ubuntu Linux with Chromium Browser, latest ChromeDriver and new Selenium java 3.1.0!</p><figure><img src="https://i.imgur.com/wvm7R9Y.png" alt="Jenkins on bandwagon" /><figcaption aria-hidden="true">Jenkins on bandwagon</figcaption></figure><p><a href="http://jenkins.maxwu.me/job/Cucumber_Jvm_Selenium_Toy/">http://jenkins.maxwu.me/job/Cucumber_Jvm_Selenium_Toy/</a></p><span id="more"></span><p>By the way, the last issue is fixed after a lovely walk from Petone seaview trail~ This site was originated as a pure technical sharing place but I hope I can make an exception to share the photo from Petone beach. Good weather sweeps away the raining feelings on another disappointing call.</p><h2 id="upgrade-to-selenium-3.1.0">Upgrade to Selenium 3.1.0</h2><p>After upgrading from selenium-java 3.0.1 to 3.1.0 (Feb 2017 recently released), there reported a method resolving issue on wait.until() in below code block.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">By byDiv = By.cssSelector(<span class="string">&quot;div#resultStats&quot;</span>);</span><br><span class="line">WebDriverWait wait = <span class="keyword">new</span> WebDriverWait(dr, <span class="number">10</span>);</span><br><span class="line">wait.until(ExpectedConditions.visibilityOfElementLocated(byDiv));</span><br></pre></td></tr></table></figure><p>The solution is to manually add missing dependency on google guava library. Update pom.xml in maven to adapt this dependency will resolve it.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>21.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/maxwu/cucumber-java-toy/issues/6">Github issue link</a></p><h2 id="chrome-on-32bit-linux">Chrome on 32bit Linux</h2><p>Since the installation and setting up on MBP is smoothy within 1 hour, there was an underestimation on making it happen with 32bit Linux. Which finally absorbed two half-days in the afternoon. To make things easy, I freshed the VPS with Ubuntu 14.04 and deleted the origina CentOS first. So SS service is terminated, which will be restored next week.</p><ul><li>Google didn't support 32bit Linux from Feb 2016. The latest version archived on internet is <code>48.0.2564.116-1_i386</code>.</li><li>But ChromeDriver requests a higher browser version if picking up latest version (2.27) with stability fixes.</li><li>My VPS is on bandwagon with a low price plan (&lt;10USD per year) lasted for couple of years. It offers 512Mb memory and 32bit Celeron CPU.</li></ul><p>Solution:</p><ul><li><p>Install chromium instead of chrome-browser. Chromium is an open source cummunity maintained lively version as an alternative to official Google Chrome. It supports 32bit Linux distribution.</p></li><li><p>Special tips:</p><ul><li><p>With Ubuntu defaul source list, the latest version is <code>Chromium 53.0.2785.14</code>. Which is still not the latest binary.</p></li><li><p>Update with below source, the latest chromium-browser version is <code>Chromium 55.0.2883</code>.</p></li></ul><p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:saiarcot895/chromium-dev </span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><ul><li>Specify chromium binary to browser driver. The absolute path to chromium-browser executable is for my Ubuntu 14 with installation on ppa channel. You may replace with your own path to chromium.</li></ul><p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">options = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line"><span class="comment">//..</span></span><br><span class="line">options.setBinary(<span class="keyword">new</span> File(<span class="string">&quot;/usr/bin/chromium-browser&quot;</span>));</span><br><span class="line"><span class="comment">//..</span></span><br><span class="line">WebDriver driver = <span class="keyword">new</span> ChromeDriver(options);</span><br></pre></td></tr></table></figure></p></li></ul><h2 id="chrome-tap-crash">Chrome tap crash</h2><p>The chrome tap crash happens on 32bit Ubuntu 14 Linux.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Failure in before hook:TemperatureConverterPageStepDef.setUp(Scenario)</span><br><span class="line">Message: org.openqa.selenium.NoSuchSessionException: no such session</span><br><span class="line">  (Driver info: chromedriver=2.21.371459 (36d3d07f660ff2bc1bf28a75d1cdabed0983e7c4),platform=Linux 2.6.32-042stab120.18 x86) (WARNING: The server did not provide any stacktrace information)</span><br><span class="line">Command duration or timeout: 14 milliseconds</span><br><span class="line">Build info: version: &#x27;3.0.1&#x27;, revision: &#x27;1969d75&#x27;, time: &#x27;2016-10-18 09:49:13 -0700&#x27;</span><br><span class="line">System info: host: &#x27;maxwu&#x27;, ip: &#x27;104.224.136.48&#x27;, os.name: &#x27;Linux&#x27;, os.arch: &#x27;i386&#x27;, os.version: &#x27;2.6.32-042stab120.18&#x27;, java.version: &#x27;1.8.0_121&#x27;</span><br><span class="line">Driver info: org.openqa.selenium.chrome.ChromeDriver</span><br><span class="line">Capabilities [&#123;message=session not created exception</span><br><span class="line">from tab crashed</span><br><span class="line">  (Session info: chrome=48.0.2564.116)</span><br><span class="line">  (Driver info: chromedriver=2.21.371459 (36d3d07f660ff2bc1bf28a75d1cdabed0983e7c4),platform=Linux 2.6.32-042stab120.18 x86), platform=ANY&#125;]</span><br><span class="line">Session ID: 55d40b642a275ba583eb6ee9e6d53d31</span><br><span class="line">at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br></pre></td></tr></table></figure><p>This issue is severer after upgrading ChromeDriver to 2.22+ versions. There are some suspicious clues but none is confirmed. Finally after performing a series of branches tests and analysis, the solution is to move <code>driver.manage().window().maximize();</code> to chrome start options as below.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">options = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line"><span class="comment">// To fix browser crash issue</span></span><br><span class="line">options.addArguments(<span class="string">&quot;--start-maximized&quot;</span>);</span><br><span class="line">ChromeDriverManager.getInstance().setup();</span><br><span class="line">WebDriver driver = (<span class="keyword">null</span>==options)? <span class="keyword">new</span> ChromeDriver(): <span class="keyword">new</span> ChromeDriver(options);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/maxwu/cucumber-java-toy/issues/7">Github Issue Link</a></p><h2 id="chrome-browser-hanging-up">Chrome Browser Hanging-up</h2><p>Browser hanging-up randomly happens more frequently than other stability issues and it is the actual high runner among others. The frequency shows <code>Private Jenkins &gt; Travis-CI &gt;&gt; Circle-CI</code>. CircleCI is much better stable comparing to Travis-CI on chrome-browser web testing.</p><p>On private Jenkins we could read the log that browser hanging-up for a long time. On travis-CI, if the building execution has no output in 10 minutes, the docker monitor will shut down the task and lable a failure (terminated) on records.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.openqa.selenium.TimeoutException: timeout: cannot determine loading status</span><br><span class="line">from timeout: Timed out receiving message from renderer: -600.008</span><br><span class="line">  (Session info: chrome=55.0.2883.11)</span><br><span class="line">  (Driver info: chromedriver=2.25.426927 (d0803376130bda68eb594d02ebaca4609e3f899e),platform=Linux 2.6.32-042stab120.18 x86) (WARNING: The server did not provide any stacktrace information)</span><br><span class="line">Command duration or timeout: 900.74 seconds</span><br><span class="line">Build info: version: &#x27;3.1.0&#x27;, revision: &#x27;b94c902&#x27;, time: &#x27;2017-02-16 12:21:31 -0800&#x27;</span><br><span class="line">System info: host: &#x27;jenkins&#x27;, ip: &#x27;104.224.136.48&#x27;, os.name: &#x27;Linux&#x27;, os.arch: &#x27;i386&#x27;, os.version: &#x27;2.6.32-042stab120.18&#x27;, java.version: &#x27;1.8.0_121&#x27;</span><br><span class="line">Driver info: org.openqa.selenium.chrome.ChromeDriver</span><br><span class="line">Capabilities [&#123;applicationCacheEnabled=false, rotatable=false, mobileEmulationEnabled=false, networkConnectionEnabled=false, chrome=&#123;chromedriverVersion=2.25.426927 (d0803376130bda68eb594d02ebaca4609e3f899e), userDataDir=/tmp/.org.chromium.Chromium.auFTt4&#125;, takesHeapSnapshot=true, pageLoadStrategy=normal, databaseEnabled=false, handlesAlerts=true, hasTouchScreen=false, version=55.0.2883.11, platform=LINUX, browserConnectionEnabled=false, nativeEvents=true, acceptSslCerts=true, locationContextEnabled=true, webStorageEnabled=true, browserName=chrome, takesScreenshot=true, javascriptEnabled=true, cssSelectorsEnabled=true&#125;]</span><br><span class="line">Session ID: 64463c793b65a1f95383edd756abda17</span><br></pre></td></tr></table></figure><p>There are multiple possible triggers to cause a stuck, loading some plugin, flash content streaming, waiting for some default AD scripts, DNS prefetching (TTL), security check on plugins, ... Here the working solution plan just mitigate as many as it can and it brings the CI back to healthy status. Once there is a new unstable element being introduced, the recommendation is to do a preliminary check if the action or configuration can be done by Options object instead of any direction action through ChromeDriver.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">options = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line"><span class="comment">// To fix browser hanging-up issue</span></span><br><span class="line">options.addArguments(<span class="string">&quot;--dns-prefetch-disable&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--always-authorize-plugins&quot;</span>);</span><br><span class="line">ChromeDriverManager.getInstance().setup();</span><br><span class="line">WebDriver driver = <span class="keyword">new</span> ChromeDriver(options);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/maxwu/cucumber-java-toy/issues/8">This Issue Link</a></p><p>TODO: fetch statistic data with new lib <a href="https://github.com/maxwu/ci-stat">ci-stat</a></p><h2 id="embedded-status-badge-from-jenkins">Embedded Status Badge from Jenkins</h2><p>This step is simple. From the Jenkins console, install embedded jenkins status and place the links into README.md on github master branch. The status badge in third line of below snapshot is Jenkins status icon from the private jenkins on <a href="http://jenkins.maxwu.me">http://jenkins.maxwu.me</a></p><figure><img src="https://i.imgur.com/udh5Z4J.png" alt="Jenkins Status Badge" /><figcaption aria-hidden="true">Jenkins Status Badge</figcaption></figure><h2 id="setup-xvfb-for-jenkins">Setup xvfb for Jenkins</h2><p>Either vncserver or xvfb works here to initialize the x-window display for browser. If headless browsers are utilized, this step is not necessary.</p><p>Install the xvfb plugin for Jenkins. There is a special hint:</p><ul><li><p>xvfb needs at least a manual configuration step on Jenkins before working. This step will create the necessary configuration records for Jenkins to start before each CI task and end after it.</p></li><li><p>The menu path is <code>Manage Jenkins -&gt; Global Tool Configuration -&gt; XvFb</code>, not on Jenkins Configuration.</p></li></ul><p><em>Notes: Recent Firefox and Chrome offers headless mode. Which is faster and XWin display or xvfb is no longer needed. Firefox starts to support headless mode from version 56 on Mac. Current stable version on Mac is v55 but beta version is 56b. New developer version is based on v57.</em></p><h2 id="jenkins-on-mac">Jenkins on Mac</h2><p>It is convenient to install Jenkins on Mac. <code>brew install jenkins</code> will install and setup Jenkins quickly. The jenkins was installed as a service with brew.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;brew services start jenkins</span><br><span class="line">&gt;brew services stop jenkins</span><br></pre></td></tr></table></figure><figure><img src="https://i.imgur.com/zKGH3q2.png" alt="Jenkins on MacBookPro" /><figcaption aria-hidden="true">Jenkins on MacBookPro</figcaption></figure><p>Other setup actions as coverage status with</p><p><em>Updated Feb 23, 2017</em></p><p><em>Drafted Feb 21, 2017</em></p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> Jenkins </tag>
            
            <tag> Selenium </tag>
            
            <tag> 32bit </tag>
            
            <tag> ChromeDriver </tag>
            
            <tag> Chromium-browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ci-stat project in progress</title>
      <link href="/2017/02/12/ci-stat-project-in-progress/"/>
      <url>/2017/02/12/ci-stat-project-in-progress/</url>
      
        <content type="html"><![CDATA[<p>ci-stat is based on circleci_stat developed in Python. The target is to provide a programming lib to fetch test artifacts and analyze the data from both public cloud CI as Travis, Circle and on-premises CI services as Bamboo, Jenkins.</p><p><a href="https://github.com/maxwu/ci-stat"><img src="https://i.imgur.com/e3hHNLtm.png" alt="Snip Screen" /></a></p><span id="more"></span><h3 id="targets">Targets</h3><p>The target is to maintain a lib which could fetch CI test results from general services.</p><ul><li>Cloud CI Services:<ul><li>circle (in progress);</li><li>travis;</li></ul></li><li>On-Premise CI Services:<ul><li>Jenkins;</li><li>Bamboo;</li></ul></li><li>Local CI files:<ul><li>Local XUnit file list.</li></ul></li></ul><p>Load XUnit format files to generate the statistics. Another target of current lib is to quickly figure out the high runners of failure cases from the statistic results. Which requests a common XUnit format of test results. Considering the reality, each build could have multiple artifacts in XUnit XML format.</p><p><a href="https://github.com/maxwu/ci-stat">Github</a></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CI </tag>
            
            <tag> Python </tag>
            
            <tag> Travis </tag>
            
            <tag> Circle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trust all hosts in WebAPI test with OkHttp and Java SSL</title>
      <link href="/2017/02/03/Trust-all-hosts-in-WebAPI-test-with-OkHttp-and-Java-SSL/"/>
      <url>/2017/02/03/Trust-all-hosts-in-WebAPI-test-with-OkHttp-and-Java-SSL/</url>
      
        <content type="html"><![CDATA[<h3 id="problem-description">Problem description</h3><p>This issue was first discovered with <a href="https://circelci.com">circleci</a> but the <strong>SSLHandShakeException</strong> is not reproduce in dev environment with my Mac. The detail error page is <a href="https://circleci.com/gh/maxwu/cucumber-java-toy/75">here</a>. This post provides a verified way to bypass all hostname verification (or you can add specified conditions inside) for non-security test case to apply on Web API testing.<span id="more"></span></p><figure><img src="http://oei21r8n1.bkt.clouddn.com/WebAPI_SSL_error_20170203_12.png?imageView/2/w/540/q/100" alt="Exception details" /><figcaption aria-hidden="true">Exception details</figcaption></figure><p>Above picture shows the exception details. Generally a RESTful WebAPI test could be constructed with OkHttpClient lib:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">client = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">httpFreegeoipJsonTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">.url(Constants.Freegeoio_Url_Json)</span><br><span class="line">.build();</span><br><span class="line">Response response = client.newCall(request).execute();</span><br><span class="line">Assert.assertEquals(<span class="number">200</span>, response.code());</span><br><span class="line">Assert.assertEquals(<span class="string">&quot;application/json&quot;</span>, response.body().contentType().toString());</span><br><span class="line"></span><br><span class="line">JSONObject jsonResp = <span class="keyword">new</span> JSONObject(response.body().string());</span><br><span class="line">String ip = jsonResp.getString(<span class="string">&quot;ip&quot;</span>);</span><br><span class="line">Assert.assertTrue(checkIpv4(ip));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="solution">Solution</h3><p>It is usually caused by a self-signed certificate or an unknown certificate signer. The official solution plan is to download the SSL certificate and install it to Java SSL keystore. However, for a quick fix to test environment only concerning about the function instead of security perspective here (suggest to keep security part in a seperate test set). If we would like to bypass all hostname verification, here is the solution with a customized hostverifier. With Java8 we can use lambda to replace anonymous class when the interface is a functional one.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//Changed to customized SSL context and hostVerifier.</span></span><br><span class="line">    OkHttpClient.Builder clientBuilder = <span class="keyword">new</span> OkHttpClient().newBuilder();</span><br><span class="line">    X509TrustManager trustManager = <span class="keyword">new</span> X509TrustManager() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(<span class="keyword">final</span> X509Certificate[] chain,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">final</span> String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(<span class="keyword">final</span> X509Certificate[] chain,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       <span class="keyword">final</span> String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">final</span> TrustManager[] trustAllCerts = <span class="keyword">new</span> TrustManager[]&#123; trustManager &#125;;</span><br><span class="line"></span><br><span class="line">    SSLContext sslContext = SSLContext.getInstance(<span class="string">&quot;SSL&quot;</span>);</span><br><span class="line"></span><br><span class="line">    sslContext.init(<span class="keyword">null</span>, trustAllCerts, <span class="keyword">new</span> java.security.SecureRandom());</span><br><span class="line">    clientBuilder.sslSocketFactory(sslContext.getSocketFactory(), trustManager);</span><br><span class="line"></span><br><span class="line">    clientBuilder.hostnameVerifier((String hostname, SSLSession session) -&gt; &#123;</span><br><span class="line">                ColorPrint.println_red(<span class="string">&quot;Trusts Host &quot;</span> + hostname + <span class="string">&quot;in session &quot;</span> + session);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    client = clientBuilder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="code-links">Code Links</h3><p>Full code implementation could be referenced from <a href="https://github.com/maxwu/cucumber-java-toy">Github Cucumber-Java-Toy Link</a> in JUnite suite <strong>org.maxwu.jrefresh.HttpApi.SourceIpApiTest</strong>.</p><p>//EOF</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SSL </tag>
            
            <tag> HttpClient </tag>
            
            <tag> OkHttpClient </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>converting to docker</title>
      <link href="/2017/01/30/converting-to-docker/"/>
      <url>/2017/01/30/converting-to-docker/</url>
      
        <content type="html"><![CDATA[<p>After baseline v1.2 of Cucumber-Java-Toy, we already created a red-green-refactor TDD cycle, the next step is to migrate the whole automation test to docker and utilize dockerhub, CircleCI to create a DevOps cycle.</p><figure><img src="https://i.imgur.com/P1RaWbwm.png" alt="DevOps" /><figcaption aria-hidden="true">DevOps</figcaption></figure><p>It is still in progress by Jan30. Keeping updated. <span id="more"></span></p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> CD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cats and dogs for AWS</title>
      <link href="/2017/01/28/cats-and-dogs-for-AWS/"/>
      <url>/2017/01/28/cats-and-dogs-for-AWS/</url>
      
        <content type="html"><![CDATA[<p>When I worked on a wireless basestation project, there is an IPL layer to configure and manage uboot, uboot to configure and manage build images, image starts HAL, the HAL calls WatchCat, WatchCat wathes soft WatchDog, then the watchdog propagate Apps which talks via USL (Universal Software Layer). Now AWS runs in an eco as well. There are plenty of Cats and Dogs which can prepare, configure, watch(monitor) even take care your services, containers, apps, or, hosts.</p><p>This post summarizes the eco services as Ansible, Datadog, CircleCI, Terraform and draws a list for further self-study. <span id="more"></span></p><ul><li><strong>Management</strong><ul><li><strong>Ansible</strong>, no preinstalled package.<ul><li>Simple to deploy as it only requests Python and SSH connection to target. As Fabric, Ansible is also based on paramiko.</li><li>It will transfer executables to targets and call them via preconfigured YAML as DSL.</li><li>More than 450 modules available.</li><li>Three ways to run:<ul><li>cli ad-hoc run ansible;</li><li>Playbook;</li><li>With automation framework: Tower.</li></ul></li><li><strong>Fabric</strong> automates CLI in Py Lib, ansible automates the process.</li></ul></li><li><strong>Chef</strong><ul><li>Use recipes to reuse processes;</li><li>In Ruby based DSL, (looks more like scripts)</li><li>Needs CouchDB and RabbitMQ on server side</li><li>Communication to RESTful via HTTPs with pem key file.</li><li>One <strong>Chef server</strong>, multiple knives (<strong>Chef Workstation</strong>, just the laptop of administrators), multiple <strong>Chef Nodes</strong> (clients, the target to manage, support 1st class CLX as docker)</li></ul></li><li><strong>Puppet</strong><ul><li>Just install by gem;</li><li>No intermedia software to install</li></ul></li><li><strong>SaltStack</strong>,<ul><li>YAML config and Python lib, similar to Ansible;</li><li>Needs a package SaltStack minion installed on target as prerequisite.</li></ul></li></ul></li><li><strong>Infrastructure Creators</strong> (Infrastructure as Code)<ul><li><strong>Packer</strong>,<ul><li>Creating AMI via JSON config.</li></ul></li><li><strong>Terraform</strong>,<ul><li>Create infrastructure via DSL;</li><li>Support multiple platforms: Azure, AWS, Openstack, et.</li></ul></li><li><strong>cloudtools</strong>,<ul><li>Open source, https://github.com/cloudtools;</li><li>troposphere: Py lib to create AWS CloufFormation;</li><li>awacs: Py lib to create AWS Access Policy.</li></ul></li></ul></li><li><strong>DevOps</strong><ul><li>CircleCI: free for open source projects</li><li>Travis: free for open source projects</li></ul></li><li><strong>Monitors</strong><ul><li><strong>DataDog</strong>,<ul><li>Perf Analysis, as TingCloud, 14 days free trial.</li><li>Needs target installation;</li><li>Follow <strong>StatD</strong> protocol to send timely message via UDP to DataDog servicce then present to Web GUI with visualization.</li></ul></li><li><strong>Netflix ICE</strong>,<ul><li>Opensource toolset focus on top-bottom cost and usage analysis.</li></ul></li><li><strong>pagerduty</strong>,<ul><li>Event driven reporter, 14 days free trial.</li></ul></li><li><strong>Scalr</strong>,<ul><li>Needs rpm installaiton, free for open source on-premise mgt.</li></ul></li></ul></li></ul><hr /><p>"Thoughts and Notes"</p><p>The author also thinks that JSON or YAML based plain CloudFormation is not easy for human beings to edit directly. However, it seems most of the attempts are going to adapt a DSL based of Ruby or YAML. Based on my first sight opinion, this kind of problem is okay to adapt <strong>Template</strong> to help. For example, we can image to create CloudFormation via Jinjia2 flavor template. It is a smaller work and easy to develop. Some template rather than introducing something like YAML again. Web service developers are supposed to be familiar with at least one template as ASP, JSP, or Jinjia2(in Flask or Django). Another way, still a DSL, maybe more programmable, in Scapy style as Python interpreted dsl to describe wrapped resources and linkages. Moreover, could this DSL run in an interactive way, possibly if we just call boto3 and make a lightweight way of feedbacks.</p><p>Trying to make more practices with Anisble and check if one of them is still a valid idea to work further.</p><p><em>Jan 31, 2017: After an inpiring discussion with some people this afternoon, knowing more are also sufferring on cloudformation plain edition or drafting, add above thoughts and notes part.</em></p><p>EOF</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Ansible </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>change default Docker Quickstart Terminal for Mac</title>
      <link href="/2017/01/28/change-default-Docker-Quickstart-Terminal-for-Mac/"/>
      <url>/2017/01/28/change-default-Docker-Quickstart-Terminal-for-Mac/</url>
      
        <content type="html"><![CDATA[<p>For some reason I'd change Docker Quickstart Terminal to Mac default Terminal instead of iTem. But it failed at first tries, even by uninstalling docker from Mac system.</p><span id="more"></span><p>Searching such config file by name "default_terminal", there is a text file to record this option. Removing this file and relaunch docker, or, just edit it directly will close this issue.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> ⓑ maxwu  16:32  ~  devel  circleci-stat   master  sudo find / -name default_terminal</span><br><span class="line">Password:</span><br><span class="line">find: /dev/fd/3: Not a directory</span><br><span class="line">find: /dev/fd/4: Not a directory</span><br><span class="line">/Users/maxwu/Library/Application Support/DockerToolbox/default_terminal</span><br><span class="line"> ⓑ maxwu  16:34  ~  devel  circleci-stat   master  vim /Users/maxwu/Library/Application\ Support/DockerToolbox/default_terminal</span><br><span class="line"> ⓑ maxwu  16:35  ~  devel  circleci-stat   master </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy Chinese New Year 2017</title>
      <link href="/2017/01/28/happy-chinese-new-year-2017/"/>
      <url>/2017/01/28/happy-chinese-new-year-2017/</url>
      
        <content type="html"><![CDATA[<figure><img src="http://oei21r8n1.bkt.clouddn.com/Rooster_Year_2017.png?imageView/2/w/600/q/100" alt="Chinese New Year Greeting" /><figcaption aria-hidden="true">Chinese New Year Greeting</figcaption></figure><p>Happy Chinese Sprint Festival and wish you a good fortune in new Rooster Year! Here is antithetical couplet(对联) for this new Rooster Year, just inspired by dynamic programming language and serverless view points this morning.</p><p>Following up, there is the sample code to play Chat Robot in WeChat, the most popular online chat service of Chinese. It is a sample to demo how to use chat lib and how to use substitution in UTF-8 cprint format strings. <span id="more"></span></p><p>Enjoy!</p><pre><code>道可道,非常道, Lambda   里外有乾坤 型可依,函亦纯, __iadd__ happy, 1横批: Hello Cloud!</code></pre><p>This sample Chat Robot will return the new year greeting if there is "年"(year) character in arriving message text part, or, the incoming message is a picture, video as people used to throw for new year greeting.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">__author__ = <span class="string">&#x27;maxwu&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> itchat, re</span><br><span class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@itchat.msg_register(<span class="params">TEXT</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_reply</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Msg Received from %s: %s&quot;</span> %(msg[<span class="string">&#x27;FromUserName&#x27;</span>], msg[<span class="string">&#x27;Text&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    match = re.search(<span class="string">u&#x27;\u5e74&#x27;</span>, msg[<span class="string">&#x27;Text&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> match:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;matched!&quot;</span></span><br><span class="line">        itchat.send(<span class="string">&quot;新春快乐,鸡年大吉,-%d-&quot;</span> % count, msg[<span class="string">&#x27;FromUserName&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@itchat.msg_register(<span class="params">[PICTURE, RECORDING, VIDEO, SHARING]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">other_reply</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    itchat.send(<span class="string">&quot;发啥都是发,鸡年大吉,-%d-&quot;</span> % count, msg[<span class="string">&#x27;FromUserName&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    itchat.auto_login()</span><br><span class="line">    itchat.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>//EOF</p>]]></content>
      
      
      <categories>
          
          <category> Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chinese </tag>
            
            <tag> New Year </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tips on Using JUnit for Testing in Java</title>
      <link href="/2017/01/23/JUnit-Tips/"/>
      <url>/2017/01/23/JUnit-Tips/</url>
      
        <content type="html"><![CDATA[<p>Recently took a short test task on a blog prototype, here are notes about tips on applying JUnit into Testing, especially Web Testing. As a new comer to advanced JUnit features, this post is also a track of learning. The current topics include tips about using <span class="citation" data-cites="Rule">@Rule</span>, customize test strategy, to parameterize test, hints on Java Lambda, JUnit 5 new features, et.</p><h2 id="structure-and-test-pyramid">Structure and Test Pyramid</h2><p><img src="http://oei21r8n1.bkt.clouddn.com/Test_Pyramid_v2.png?imageView/2/w/800/q/100" /></p><p><em>Chart drafted with sketchboard.io</em> <span id="more"></span></p><p>Above is the concept mapping from Martin Fowler <strong>Test Pyramid</strong>. There are still other verticle dimension test as performance test with JMeter (or curl, JPerf, et.), as OWASP test with ZAP. And in the time dimension, which is managed by <strong>Maven</strong> from drafting, coding, building, testing to deployment.</p><p>Therefore the three dimenssions could be measured:</p><p><img src="http://oei21r8n1.bkt.clouddn.com/ThreeDimenssions.png?imageView/2/w/400/q/100"  class="img-left"/></p><p><em>Chart drafted with draw.io</em></p><ul><li><strong>Space dimession</strong>: Tests happen in different levels with different parameter scopes, exploring depth (test strength):<ul><li>JUnit cases;</li><li>HTTP Client URL/Params;</li><li>Selenium PageObjects and activities;</li></ul></li><li><strong>Logic dimession</strong>: Controlled by JUnit Runner and Cucumber;<ul><li>States could be: Igored, Pass, Failure, or, Pending (during an execution);</li><li>Relationship between cases: Execution dependency, extra resources, parameterized suites, et;</li><li>Weights on suites or cases;</li><li>Criticality on discovered issues (e.g. processing ExceptionCollector in JUnit)</li></ul></li><li><strong>Time dimenssion</strong>: Maven Lifecycle Management and the history quality track (for data analysis and cost/operation prediction).<ul><li>Maven Configuration, agile deployment, supports to DevOps;</li><li>History track and data analysis;</li><li>Iteration Planning supports.</li></ul></li></ul><p>Typically JUnit is not recognized as Integration or Performance testing tool. However, JUnit could be utilized as a test suite management/report tool in scenario or integration test as well.</p><p>Following sections track the tips and hints for applying JUnit and following sections are updated lively with corrections, new findings, or, thoughts.</p><h2 id="applying-rule">1. Applying <span class="citation" data-cites="Rule">@Rule</span></h2><p>Annotation Rule is introduced with several builtin samples with JUnit4.</p><ol type="1"><li>TestName <br> An example is to ignore test method in <span class="citation" data-cites="Before">@Before</span>. The simple way is to check test method name with <span class="citation" data-cites="Rule">@Rule</span> annotation.</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...In JUnit test class</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; testListByPassBeforeHook = Arrays.asList(</span><br><span class="line">        <span class="string">&quot;$YourTestMethodName&quot;</span></span><br><span class="line">);</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Rule</span></span><br><span class="line"><span class="keyword">public</span> TestName name = <span class="keyword">new</span> TestName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//...In test setup</span></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function">pubic <span class="keyword">void</span> <span class="title">casualNameTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">String testName = name.getMethodName();</span><br><span class="line"><span class="comment">//Checksteps against name.</span></span><br><span class="line"><span class="keyword">if</span> (testListByPassBeforeHook.contains(testName))&#123;</span><br><span class="line"><span class="comment">//special steps</span></span><br><span class="line"><span class="keyword">return</span>; <span class="comment">//avoid further init steps.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// further init steps as PageObject building.</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h2 id="execution-sequence">2. Execution Sequence</h2><p>This section is the relatively easy part of the article. JUnit test execution sequence could be explained as below. The order among T1, T2, .., Tx, .., Tn is by default up to JVM reflection API (Ref to <a href="https://github.com/junit-team/junit4/wiki/Test-execution-order">Ref-1</a>). Annotation <span class="citation" data-cites="FixMethodOrder">@FixMethodOrder</span> isis offered with v4.11+ to customize test case execution order. For example, name ascending order could be specified by <em><span class="citation" data-cites="FixMethodOrder">@FixMethodOrder</span>(MethodSorters.NAME_ASCENDING)</em></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@BeforeClass –&gt; </span><br><span class="line">// See MethodSorters for more order preference.</span><br><span class="line">@Before –&gt; @Test T1 –&gt; @After </span><br><span class="line"></span><br><span class="line">@Before –&gt; @Test T2 –&gt; @After </span><br><span class="line"></span><br><span class="line">–&gt; @AfterClass</span><br></pre></td></tr></table></figure><h2 id="using-test-runner">3.Using Test Runner</h2><h3 id="parameterized-test-with-runner">Parameterized Test with Runner</h3><h3 id="customized-test-suite-with-runner">Customized Test Suite with Runner</h3><h3 id="execute-cucumber-specs-with-runner">Execute Cucumber Specs with Runner</h3><h2 id="three-ways-of-negative-test-with-exception">4.Three Ways of Negative Test with Exception</h2><h3 id="using-test-annotation-parameter-from-junit4">Using <span class="citation" data-cites="Test">@Test</span> annotation parameter from JUnit4</h3><p><code>@Test(expected = YourException.class)</code></p><h3 id="applying-a-rule-of-expectexception">Applying a <span class="citation" data-cites="Rule">@Rule</span> of ExpectException</h3><p><span class="citation" data-cites="Rule">@Rule</span> could hanlde RuntTimeException, however, above <span class="citation" data-cites="Test">@Test</span> annotation parameter could only capture Exceptions.</p><p>Another benefit is that <span class="citation" data-cites="Rule">@Rule</span> could check the exception details.</p><h3 id="traditinal-try-catch-block">Traditinal Try-Catch block</h3><p>(Pay attention not to forget the fail() in final{} block)</p><h2 id="test-the-output-stream">5.Test the output stream</h2><p>(TBC)</p><h2 id="test-http-level-and-web-api-with-okhttp">6.Test Http Level and Web API with OkHttp</h2><p>Selenium is designed as a web test tool. It does not intend to support Http level verification, neither an API test tool. This is well discussed on selenium github about whether to add HTTP response header extraction, <a href="https://github.com/seleniumhq/selenium-google-code-issue-archive/issues/141">https://github.com/seleniumhq/selenium-google-code-issue-archive/issues/141</a>.</p><p>Therefore, to complete the pyramid shap, we shall find a robust but efficient Http client test utility to build the low level coverage. OkHttp is one of the choice.</p><p>The major benefits of applying OkHttp include:</p><ul><li><p>HTTP/2 support allows all requests to the same host to share a socket.</p></li><li><p>Connection pooling reduces request latency (if HTTP/2 isn’t available).</p></li><li><p>Transparent GZIP shrinks download sizes.</p></li><li><p>Response caching avoids the network completely for repeat requests.</p></li></ul><p>An example to test against JSON WebAPI:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">httpFreegeoipJsonTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">            .url(Constants.Freegeoio_Url_Json)</span><br><span class="line">            .build();</span><br><span class="line">    Response response = client.newCall(request).execute();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!response.isSuccessful()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;Service Error&quot;</span> + response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(<span class="number">200</span>, response.code());</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;application/json&quot;</span>, response.body().contentType().toString());</span><br><span class="line"></span><br><span class="line">    JSONObject jsonResp = <span class="keyword">new</span> JSONObject(response.body().string());</span><br><span class="line">    String ip = jsonResp.getString(<span class="string">&quot;ip&quot;</span>);</span><br><span class="line">    Assert.assertTrue(checkIpv4(ip));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Debug dump without verification.</span></span><br><span class="line">    Headers respHeaders = response.headers();</span><br><span class="line">    respHeaders.names().forEach(n -&gt; logger.debug(ColorPrint.green(<span class="string">&quot;header name:&quot;</span> + n + <span class="string">&quot;, value:&quot;</span> + respHeaders.get(n))));</span><br><span class="line">    logger.debug(ColorPrint.blue(strResp));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The sample code works with log4j configuration record <code>log4j.logger.org.maxwu.jrefresh.HttpApi=DEBUG</code>.</p><h2 id="other-tests">7.Other Tests</h2><h3 id="web-performance-test">Web Performance Test</h3><ol type="1"><li>ab</li></ol><p>"ab" is Apache Benchmark Testing Tool.</p><p>A kick-start sample as <a href="http://maxwu.me/2017/02/26/Apache-ab-and-gnuplot-to-generate-benchmark-test-chart/">Link</a></p><p>With gnuplot, the test result data could generate a chart.</p><figure><img src="http://oei21r8n1.bkt.clouddn.com/ab_maxwu_chart.png" alt="benchmark performance test chart" /><figcaption aria-hidden="true">benchmark performance test chart</figcaption></figure><ol start="2" type="1"><li>JMeter</li></ol><p>JMeter is widely used as performance test tool to execute preconfigured test sceanrio files.</p><ol start="3" type="1"><li>Locust</li></ol><p>Locust is a Python based web performance test toolbox with an embedded Web GUI to execute the specified Python script. It is progammer friendly and requests Python Web Programming fundamentals.</p><h3 id="owasp-web-security-test">OWASP Web Security Test</h3><h3 id="restful-crud-model-test">RESTful CRUD Model Test</h3><p>[<em>Updated by Feb15, several sections TBD</em>]</p><p>[<em>Updated by Jan23, items TBD</em>]</p><hr /><h3 id="backup">Backup</h3><table><thead><tr class="header"><th>JUnit</th><th>Selenium</th><th>Maven</th></tr></thead><tbody><tr class="odd"><td><img src="http://junit.org/junit4/images/junit-logo.png" class=img-left/></td><td><img src="http://www.seleniumhq.org/images/selenium-logo.png" class=img-left/></td><td><img src="https://maven.apache.org/images/logos/maven-feather.png" class=img-left/></td></tr></tbody></table><p>[EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> CI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JUnit </tag>
            
            <tag> Rule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python unittest tips from JUnit view</title>
      <link href="/2017/01/23/Python-unittest-tips-from-JUnit-view/"/>
      <url>/2017/01/23/Python-unittest-tips-from-JUnit-view/</url>
      
        <content type="html"><![CDATA[<p>This post is a track of tips by comparing unittest (previously named PyUnit) and JUnit. Most of the topics will also mention nose (nosetests) as the test runner and usually refer to the default or Parameterized runner of JUnit. <span id="more"></span></p><ul><li><p><strong>Origination</strong>:</p><ul><li>JUnit was created by Eric Gamma and Kent Beck originally for whitebox regression test. It initializes the XUnit family.</li><li>unittest was originally the PyUnit as an XUnit implementation for Python whitebox testing.</li></ul></li><li><p><strong>Entrance point</strong>:</p><ul><li>Unittest starts from unittest.main(), while nose starts from nose.core.main, which is an alias of nose.core.TestProgram class.</li><li>JUnit starts from junit.core.main().</li></ul></li><li><p><strong>Test Suite</strong>:</p><ul><li>This is similar, JUnit as TestSuite type to hold cases added from individual classes, unittest has unittest.TestSuite() to feed to runner.run($your_suite_instance).</li><li>Python unittest is organized as Py packages and classes.</li></ul></li><li><p><strong>Hooks: Setup and Teardown</strong>:</p><ul><li><p>unittest picks setUp()/tearDown() as hooks for each test. And setUpClass()/tearDownClass() as <span class="citation" data-cites="classmethod">@classmethod</span>. Similarly, there are setUpModule()/tearDownModule() serve as global functions in module level.</p></li><li><p>JUnit uses <span class="citation" data-cites="Before">@Before</span> and <span class="citation" data-cites="After">@After</span> annotation from JUnit4. There are also <span class="citation" data-cites="BeforeClass">@BeforeClass</span>/<span class="citation" data-cites="AfterClass">@AfterClass</span> static methods as class level hooks.</p><ul><li><span class="citation" data-cites="Rules">@Rules</span> with TestName can be utilized to bypass or add special treatment to specific tests.</li></ul></li></ul></li><li><p><strong>Timeout</strong>: (TBD)</p></li><li><p><strong>Data Driven(Parameterized Test)</strong>: (TBD)</p></li><li><p><strong>IO Capture and Output Messages</strong>:</p><ul><li>Output messages:<ul><li>Python nosetests inhibit stdout. With "-s" option, the stdout could be printed out. For messages generated by logging module, an option "--debug=$package_name_with_dot" can activate the logger output for specified package path.</li></ul></li></ul></li></ul><p>Below is the CLI I used in my travis config YAML file. The python classes under test are located in me.maxwu. $packages and subdirectories.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; nosetests -s -v --logging-level=DEBUG --debug=me.maxwu --with-xunit --xunit-file circlestat_nose_xunit.xml --with-coverage --cover-package=me.maxwu --cover-html ./<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>nosetests will capture stdout and store them into XUnit format test report when "-v" option is present. However, messages from logging will not persistent in XML format test report. Those logs could be persistented into logfiles with additional handlers defined in code. To hold the logs on CI cloud as <a href="https://travis-ci.org">travis</a> and <a href="https://circleci.com">circle</a>, we can specify the artifacts pattern in the configuration YAML file, ".travis.yml" and "circle.yml" (by default in root directory).</p><pre><code>    - Java output messages</code></pre><p>(TBD)</p><ul><li><p><strong>Skipped test</strong>:</p><ul><li>Python nose reads unittest.skip and notest decorator. However, the notest tagged methods are not "skipped", they are not reported in test report any more.</li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="meta">@unittest.skip(<span class="params"><span class="string">&quot;temporarily disabled&quot;</span></span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XxxTest</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XxxTest</span>(<span class="params">unittest.TestCase</span>):</span></span><br><span class="line"><span class="meta">    @unittest.skip(<span class="params"><span class="string">&quot;temporarily disabled&quot;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_Xxx</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><p>JUnit uses <span class="citation" data-cites="Ignore">@Ignore</span>("reason") to bypass certain case methods.</p></li><li><p><strong>Negative test</strong>:</p><ul><li><p>JUnit has three ways to capture expected Exception:</p><ul><li>Use <span class="citation" data-cites="Test">@Test</span>(expected=$Exception.class)</li><li>Apply <span class="citation" data-cites="Rule">@Rule</span> and implement an ExpectedException with thrown instance</li><li>Traditional try-catch and assert Exception info in catch block. Be careful to add fail() after try-catch.</li></ul></li><li><p>Resolving test gainst None with doctest:</p><ul><li><p>doctest simple tests output string lines, which means None is just nothing in case expected value (not empty line with CR). For example, in below doctest, 4th case compares doctest capture to nothing (no result line) when the return value is expected as None.</p></li><li><p>To resolve it, we can just enhance the simple method call to an expression like <strong>"&gt;&gt;&gt; func_call(...) is None"</strong> and easily compare(test) it against "True" as output value. the 5th and 6th case in below doctest shows how to fulfill it.</p></li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">casual_find_pos_with_bin</span>(<span class="params">n, from_list</span>):</span></span><br><span class="line">   <span class="string">&quot;&quot;&quot;Return the element position in **sorted** list or None.</span></span><br><span class="line"><span class="string">   ...</span></span><br><span class="line"><span class="string">   === Doc Test ===</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; casual_find_pos_with_bin(8, [x*2 for x in range(10)])</span></span><br><span class="line"><span class="string">   4</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; casual_find_pos_with_bin(0, range(7))</span></span><br><span class="line"><span class="string">   0</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; casual_find_pos_with_bin(6, range(7))</span></span><br><span class="line"><span class="string">   6</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; casual_find_pos_with_bin(7, range(6))</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; casual_find_pos_with_bin(0, range(1,6)) is None</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; casual_find_pos_with_bin(8, [x*2+1 for x in range(6)]) is None</span></span><br><span class="line"><span class="string">   &gt;&gt;&gt; casual_find_pos_with_bin(4, [1,2,3,3,4,4,6])</span></span><br><span class="line"><span class="string">   5</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  <span class="comment"># the method codes ...</span></span><br></pre></td></tr></table></figure><ul><li>Capturing expected exceptions with Python:</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.assertRaises(ExceptionClassName, function_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> self.assertRaises($ExceptionClassName) <span class="keyword">as</span> context:</span><br><span class="line">do_test_actions()</span><br><span class="line"></span><br><span class="line">self.assertTrue(<span class="string">&quot;exception message&quot;</span> <span class="keyword">in</span> context.exception)</span><br></pre></td></tr></table></figure><p>Refer to <a href="http://docs.python.org/dev/library/unittest.html#unittest.TestCase.assertRaises">python doc</a></p><p>[Updated by Feb11, Skipped/notest]</p><p>[Updated by Jan25, Initial sections]</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> CI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Python </tag>
            
            <tag> JUnit </tag>
            
            <tag> unittest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tips on Selenium PageObjects Design</title>
      <link href="/2017/01/21/Tips-on-Selenium-PageObject-Design/"/>
      <url>/2017/01/21/Tips-on-Selenium-PageObject-Design/</url>
      
        <content type="html"><![CDATA[<h1 id="about-pageobjects">About PageObjects</h1><p><img src="http://www.seleniumhq.org/images/selenium-logo.png" class="img-left" /> The "<strong>PageObjects</strong>" are introduced mainly to avoid duplicated codes in test and simplify the maintenance works as well. PageObject just models the WebUI under test and represent the state transition among UI(page) activities.</p><p><a href="https://www.seleniumhq.org/docs/06_test_design_considerations.jsp">PageObjects and Page Factory Pattern</a> are terms from Selenium documents. The concepts of PageObject and (w/ or w/o) Page Factory are also derived from general OOD. It could be regarded as a much simplified ORM or a simple DAO if we regard test cases as data, test scenario pattern as DB tables. So the methodology can apply to other tests besides web.</p><ul><li>PageObject is a pattern of design</li><li>Selenium Java package provides a basic support on lazy init. However, it is still a wheel to build for specific test area.</li></ul><p>A rough mapping could describe the concept easilier:</p><table><colgroup><col style="width: 47%" /><col style="width: 52%" /></colgroup><thead><tr class="header"><th>Traditional App Dev terms</th><th>Web Automation Test Concepts</th></tr></thead><tbody><tr class="odd"><td><strong>DB drivers</strong> like mysql-connector</td><td><strong>Web Drivers</strong> (take JSON call and get results from browser process)</td></tr><tr class="even"><td><strong>DB Abstract</strong> as JDBC</td><td><strong>Selenium 2</strong>(it bridge the API to JSON calls)</td></tr><tr class="odd"><td><strong>ORM</strong> as peewee or SQLAlchemy to ensure DB agnostic</td><td><strong>PageObject</strong> provides agnostic on selectors and page details</td></tr></tbody></table><p>Based on project experiences, PageObjects offers below three functions to automation:</p><table><colgroup><col style="width: 49%" /><col style="width: 50%" /></colgroup><thead><tr class="header"><th>Traditional App Dev terms</th><th>Selenium PageObject Sections</th></tr></thead><tbody><tr class="odd"><td><strong>DB Table Structure</strong> as create, alter operations</td><td><strong>Web Elements Encapsulation</strong> as lazy init, multiple selectors, and, retries</td></tr><tr class="even"><td><strong>Select/View</strong> A snapshot of state</td><td><strong>Pages</strong> define the states of sceanrio</td></tr><tr class="odd"><td><strong>Transaction Procedure</strong></td><td><strong>Functional methods</strong> provides interaction on pages, some of them triggers state transition, either return a new object of page or change the internal states</td></tr></tbody></table><p>It can be utilized to design test suppport classes for database, CLI (especially tree view cli), interactive shell and desktop applications. The key is to design abstract objects to represent the internal relationships between states and adjunct methods to fetch/operate the POI(points of interests, I borrowed this concept from MapSys design).</p><p>Therefore, the <strong>PageObjects here formed a layer to separate test logics and supporting objects</strong>. When people are drafting tests, we don't need to switch to OOD part to spend time "thinking" about how to implement it and finally find out we forget the original motivation or target to do. This makes a concentration.</p><h2 id="pageobjects-pattern-or-bot-style-test">PageObjects Pattern or Bot Style Test?</h2><blockquote><p>it's not always a pattern that teams feel comfortable following.</p></blockquote><p>Alternatively there is <strong>Bot Style</strong> in test and test automation. Following PageObjects style, one turns to draw a state transition map on paper or in mind, no matter it is automation or manual test. For Bot Stylte, the test is designed against action steps (user scenarios). It is not to see which style is "better" in a quick glance. Here I am trying to provide some tips on finding the correct technique within the project characters and constrains. Usualy no matter in manual or automation, Bot Style is the first technique to utilize at beginning to get more domain knowledge while doing sanity test. <strong>Bot Style focus on the encapsulation of interactive actions</strong> so it is consistent to the test description on test plan or user manual. <span id="more"></span></p><p>Moving on, some of the tests concepts could be abstracted with statemachine to form a pattern which is easy to extend and more robust to maintain. For example, an organization is maintaining a number of business stories composited with given common pages. To reduce time-to-market and accept new test cases without duplicated codes, PageObject might be considered an approperiate choice to study.</p><blockquote><p>Let's say: If all the interactions are functional, stateless, elementary and reenterable, there is no much difference between Bot Style and PageObject Pattern.</p></blockquote><blockquote><p>An U(topia)aaS (named after A(I)aaS, B(ackend)aaS, F(unc)aaS) with which every services are interacting with others and human beings interfaces with read-only primative types of sequence or callable. Sequneces can be a list, string (another form of list), tuple, dict, json, or any other linear things while callable is a lambda, class with "__call__". Read-only types as list shall be copied before returning a modified version back.</p></blockquote><p>Bot Style, as indicated by name, is to simulate the actions as what directly seen by users. A lot of organizations drafted Bot Style tests pretty well and maintain them in a high quality. It is not a must to go PageObject or state based test design but a selection on concept of abstract method to reflect the test purpose.</p><ul><li><p>A simple way of Bot Style test case is just translate every single test step to a method and assemble the steps into a class of one test case. It is useful under stressing constrains and lower down the training cost. The test review is also more smoothy to participate since the most significant checkpoints during review are domain knowledge then.</p></li><li><p>Some test are not easy to abstract as PageObjects, e.g. front-end test.</p></li><li><p>Sometimes, the ROI is not in balance to refactor steps into reusable PageObjects, e.g. the business scenarios are stable. If we are testing an desktop application and the GUI elements, logs and operation sequences are quite stable which are not changing among versions, Bot Style is good to create and maintain.</p></li></ul><h2 id="page-factory-from-a-technical-point-of-view">Page Factory from a Technical Point of View</h2><p>Above section compares Bot Style and PageObject mainly from process and organization view. This section describes the detail technical benefits with Page Factory to implement PageObject.</p><p>Page Factory offers proxies to access the WebElements on page. Therefore, this solution has below advantages:</p><ul><li><p><strong>When PageFactory is initialized with PageFactory.initElements()</strong>, the proxies are configured against the elements representing real page elements <strong>but they are not searched at the time being</strong>. The developers won't see NoSuchElementException.</p></li><li><p><strong>Each access to the element via the proxies will trigger the search and bind again</strong>, so developers won't see StaleElementException.</p><ul><li>To avoid the searching every time, annotation <span class="citation" data-cites="CacheLookup">@CacheLookup</span> on element. It will just do the search once and keep the reference.</li><li>Direct call to initElements() won't be impacted by this annotation.</li></ul></li></ul><p>Further more, if the PageObject actually reflects multiple but similar states, developers can combine the elememts definition together and keep the lazy initialization. Once the conditions are satisfied use an arch (method call) toward ame state and just start to access the elements right away.</p><h2 id="general-pageobject-structure">General PageObject Structure</h2><p>Here is the general PageObject code template including 4 major parts for general purpose. If there is an arc from current page to transition to another page, even it is the same PageObject type, the actioner (method) shall return the new page object. The caller from test code, e.g. JUnit case, shall detect exceptions.</p><p>The <strong>PageBase</strong> in the following sample provides an abstract of common properties and behaviors as:</p><ul><li>URL check against an RegExp.</li><li>Page title check.</li><li>Cookie validation;</li><li>Common test supporting:<ul><li>Screenshot;</li><li>Color contrast ratio;</li><li>Timing and waiting methods.</li></ul></li><li>Common Data generator or loading supports.</li><li>Special XML, Path, or File Format validator.</li></ul><p>As mentioned above, it is a tradeoff by the test/SDET whether to implement the abstract hierarchy.</p><p><em>This note is about placing a hook to take screenshot on failure. Based on the practice study, it is convenient to add such a hook when <span class="citation" data-cites="RunWith">@RunWith</span>(Cucumber.class) as the runner. However, if it is the default runner, which could be planted by a customized <span class="citation" data-cites="Rule">@Rule</span> extends TestWatcher. This way, the hook needs have an access to the screenshot method if it is carried by PageBase Object. It could be a registration slot with static properties for example.</em></p><p>Here we refer to a simplified Page Object Model design in which most fundamental functionalities are just grouped to one layer of <strong>PageBase</strong>. However, for experienced readers and in best industry practice, it shall be considered whether to implement Page Object with multiple layers. For example, there shall be a bottom layer, e.g. <strong>IDriver</strong>, to encapsule WebDriver concerned operations as <strong>clear-and-input</strong>, <strong>send-key or javascript based input</strong>, <strong>default FluentWait or Explicit Wait</strong>, <strong>move-to-and-click/Keys.Enter</strong>, etc. These are all frequently seen common actions existing in most of testing projects. Above this layer, there are business related structures as extracting work-flow state from CSS selectors, Web Component Linkage based on work-flow assumptions, until a high abstract on business logics which are well mapped to encapsulated in Page Object details, transparent to test case designers.</p><p>A new post is under drafting to summarize experiences and tips on hierarchy and reusable structure of practical page object. In facts, it will be determined by cost benefit balance on how abstract the page object shall move toward.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> xxx.xxx.pageObjects</span><br><span class="line"><span class="comment">//import ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//or public XxxxPage implements IPage</span></span><br><span class="line"><span class="comment">//if behaviors abstracted as Intf.</span></span><br><span class="line"><span class="keyword">public</span> XxxxPage extends PageBase&#123;</span><br><span class="line">   <span class="comment">//////////////////////////////// </span></span><br><span class="line"><span class="comment">//***Part 1: WebDriver and remaining Constants ***</span></span><br><span class="line"><span class="keyword">private</span> WebDriver driver = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span> String someRegExConst = <span class="string">&quot;$my_url_regex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////</span></span><br><span class="line"><span class="comment">//***Part 2: WebElements ***</span></span><br><span class="line"><span class="meta">@FindBy(how = How.CSS, using = &quot;input#class&quot;)</span></span><br><span class="line">WebElement inputName;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FindBy(how = How.CSS, using = &quot;body &gt; p:nth-child(2n+1)&quot;)</span></span><br><span class="line">List&lt;WebElement&gt; pSomeParagraphList;</span><br><span class="line">   </span><br><span class="line"><span class="comment">////////////////////////////////</span></span><br><span class="line"><span class="comment">//***Part 3: Constructors ***</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">XxxxPage</span><span class="params">(WebDriver dr)</span></span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.driver = dr;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//Transient state(s) handling if compliant to test purpose</span></span><br><span class="line">       <span class="comment">//E.g. an authentication transient page handling</span></span><br><span class="line">       authenticate(driver, $Some_Class_Variables)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//Title and/or Url check, raise RuntimeException if fails;</span></span><br><span class="line">       <span class="comment">//...(See notes below)</span></span><br><span class="line">       </span><br><span class="line">       PageFactory.initElements(driver, <span class="keyword">this</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//Other checks after PageFactory init.</span></span><br><span class="line">       <span class="comment">//Not recommended to add much tests here.</span></span><br><span class="line">       <span class="comment">//If map, list operations are processed every time,</span></span><br><span class="line">       <span class="comment">//the test duration will extend.</span></span><br><span class="line">       <span class="comment">//However, stable tests do not need to play detail checks</span></span><br><span class="line">       <span class="comment">//On every construction step.</span></span><br><span class="line">       <span class="comment">//Tests shall be separate.</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">////////////////////////////////</span></span><br><span class="line"><span class="comment">//***Part 4: Web UI actions ***</span></span><br><span class="line"><span class="comment">//Actions including getters, setters, submission, clicker, mouseMover et.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInputXxxYxx</span><span class="params">(String name)</span> <span class="keyword">throws</span> WrongPageException</span>&#123;</span><br><span class="line">   <span class="comment">//Web Driver actions.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//Some Getter/Setters return an new instance of same or other PageObject</span></span><br><span class="line"><span class="comment">//The type here represnets the arc between Web UI(page)s</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ZzzPageObject <span class="title">submitRegisterForm</span><span class="params">(String name)</span> <span class="keyword">throws</span> WrongPageException</span>&#123;</span><br><span class="line">       <span class="comment">//Setters/getters/methods calls and operations</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ZzzPageObject(driver, someOtherParams)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><em>Note-1: It is up to the test purpose whether to separate a specific state to handle transient state like authentication. In most cases, the constructor could verify the transient state via a callable design as well. However, if there is deeper abstract (for reuse or polymorphism afterwards) design, a separate PageObject or group of PageObjects shall be introduced.</em></p></li><li><p><em>Note-2: The potential problem is to throw exception in constructor method. One thing to take care is to make sure unmanaged resources are gracefully handled if exception thrown in subclass or base class. Another issue is related to security.Ref to <a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html">Secure Coding Guideline for Java SE, Oracle, Guideline-7_3 in Ch-7: Object construction</a>, parially constructed objects lead to security vulnerability. Besides, the <span class="citation" data-cites="After">@After</span> and <span class="citation" data-cites="AfterClass">@AfterClass</span> or <span class="citation" data-cites="After">@After</span> in Cucumber shall be checked to avoid any side effects if there is state change while throwing execption in an incomplete procedure.</em></p></li><li><p><em>Note-3: In usual functional test, if the authentication is not the purpose to test against, authentication could be regarded as an arc from current state to same state. This arc of state-transition could be handled in one method called by the constructor. However, it depends on how complicated the authentication scenario is. If it branches to different situation with sophisticated processing steps, it shall be better to explicitly design a state of AuthenticationPageObject to maintain the logic and which can be a base for further security cases to grow from.</em></p></li></ul><p>With above PageObject template, a simplified <span class="citation" data-cites="Before">@Before</span> hook could be designed following below template.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// Protective check.</span></span><br><span class="line">    <span class="keyword">if</span> (driver != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//Quit driver (see notes below)</span></span><br><span class="line">        <span class="comment">//DriverFactory.quitDriver(driver);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Init driver, browser type, timeout, et. parameters</span></span><br><span class="line">    driver = DriverFactory.getDriver();</span><br><span class="line">    driver.manage().timeouts().implicitlyWait(<span class="number">20</span>, TimeUnit.SECONDS);</span><br><span class="line">    driver.manage().window().maximize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Checking ignore list.</span></span><br><span class="line">    String testName = name.getMethodName();</span><br><span class="line">    <span class="keyword">if</span> (testListByPassBeforeHook.contains(testName))&#123;</span><br><span class="line">        ColorPrint.println_blue(<span class="string">&quot;Ignore PageObj NewPost setup for test: &quot;</span> + testName);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//From site entry, start from an object of New Post Object</span></span><br><span class="line">        <span class="comment">//Here getNewPostPage will return a PageObject</span></span><br><span class="line">        <span class="comment">//...representing the drafting post page</span></span><br><span class="line">        <span class="comment">//...and it will implicitly walk through</span></span><br><span class="line">        <span class="comment">//...a transient authentication page state</span></span><br><span class="line">        <span class="comment">//As mentioned above, this transient state is implicit</span></span><br><span class="line">        <span class="comment">//...which is verified within a method, not an object.</span></span><br><span class="line">        newPostPage = <span class="keyword">new</span> PageObject(driver).getNewPostPage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>A simplified test method is convenient to expand given above PageObject and hook example.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CommentPage <span class="title">submitAndVerifyNewPost</span><span class="params">(String title, String body, String expectedTitle, String expectedBody)</span></span>&#123;</span><br><span class="line"><span class="comment">//A state transition happens here</span></span><br><span class="line">CommentPage commentPage = newPostPage.publishNewPost(title, body);</span><br><span class="line">    Assert.assertEquals(expectedTitle, commentPage.getTitle());</span><br><span class="line">    Assert.assertEquals(expectedBody, commentPage.getBody());</span><br><span class="line">    <span class="keyword">return</span> commentPage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verifyPublishNewPost</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//Here a fuzzer shall be considered</span></span><br><span class="line">String title = <span class="string">&quot;One time used title &quot;</span>;</span><br><span class="line">String body = <span class="string">&quot;One time used body &quot;</span>;</span><br><span class="line"><span class="comment">//...prepare expected values in cases of trim(), cap, et.</span></span><br><span class="line">    </span><br><span class="line">submitAndVerifyNewPost(title, body, expectedTitle, expectedBody);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Check-2: Expect the new title when it turns back to Posts (view) page</span></span><br><span class="line">PostsPage postsPage = <span class="keyword">new</span> PostsPage(driver);</span><br><span class="line">List&lt;String&gt; titles = postsPage.getPostTitles();</span><br><span class="line">Assert.assertTrue(<span class="string">&quot;Recently added title should display in posts page&quot;</span>, titles.contains(title));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="page-factory">Page Factory</h2><p>Refer to <a href="https://github.com/SeleniumHQ/selenium/wiki/PageFactory">Page Factory Github</a>, Page Factory simplifies the work to instantiate the WebElement or List <WebElement> so PageObject could be <strong>lazily</strong> initialized and keep a clean focus of codes by <strong>reducing verbosity</strong> through dynamic proxy.</p><p>The sample of Page Factory Pattern could be found in "Part-2" of Page Object code example above. There are couple of tips for beginners.</p><ul><li><p>As a strong typing language, here WebElement is the type as returned by lazing evaluation. For example, if a special operation with HTML select element to make one option selected, you can cast it to Select type.</p></li><li><p>If the return value is a list, use List<WebElement> as the sample code shows.</p></li><li><p><span class="citation" data-cites="FindBys">@FindBys</span> vs <span class="citation" data-cites="FindByAll">@FindByAll</span>: The annotation <span class="citation" data-cites="FindBys">@FindBys</span>({ <span class="citation" data-cites="FindBy">@FindBy</span>(contion1), <span class="citation" data-cites="FindBy">@FindBy</span>(condition2)}) will return an intersection of condition1 and condition2 while <span class="citation" data-cites="FindByAll">@FindByAll</span> returns the union set of elements satisfy either condition.</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Findbys(&#123;</span></span><br><span class="line"><span class="meta">    @FindBy(how = How.CSS, using = &quot;div.A&quot;),</span></span><br><span class="line"><span class="meta">    @FindBy(how = How.CSS, using = &quot;div.B&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;WebElement&gt; BinAList;</span><br></pre></td></tr></table></figure><p>Above example will return div elements which has className "B" and(from) className "A".</p><h2 id="state-transition">State Transition</h2><p>Theoretically Selenium is a tool for UI testing or Web testing, which focus on user scenarios instead of functions. Functional test is still covered in API level tests. Here is a chart to describe where Selenium is in the Test Pyramid. <a href="https://maxwu.github.io/2017/01/23/JUnit-Tips/">Link</a></p><p><img src="http://oei21r8n1.bkt.clouddn.com/Test_Pyramid_v2.png?imageView/2/w/600/q/100" /></p><p>Selenium is an excellent tool to support the test on user journeys acrossing views or pages. Here states represent the different views which the end users visit. A user scenario typically consists a sequence of views or pages towards a complete, incomplete, successful or failed business target. The footprints include a sequence of interactions.</p><p>If the new view after a given action can still be interpreted by current PageObject to get an object level description about the set of interested points to test, we can either continuously to use the existing page object with a fresh on specific elements, or, create a new object with the same PageObject class. The construction phase will map element members to a set of interested points.</p><p><img src="http://oei21r8n1.bkt.clouddn.com/pom_TransitionWithSamePageObject.png" class="img-left" /></p><p><font size="1"><em>"POM" here means page object model.</em></font></p><p>Otherwise, the action method generally returns a new object which in new PageObject class type to represent a new HTML page view in browser.</p><p><img src="http://oei21r8n1.bkt.clouddn.com/pom-page-transition.png" class="img-left" /></p><p>Here the partial refresh could be considered as a kind of arc pointing to same state. Each constructor call of PageObject classes is regarded as an arc from the action method class to the new PageObject class.</p><p>For example, if an user adds a comment piece to current blog post page, the page refreshs and shows the commnet right away. It could be tested with either ways:</p><ul><li><p>Refresh comment list corresponding List<WebElement> with a partial refreshment call. This is a state transition from the comment view state to the same state.</p></li><li><p>The comment adding action method could return a new instance of same PageObject class. This new instance holds the new comment WebElement thru the construction call.</p></li></ul><p>In summary, a partial refreshment on certain WebElement(s) is regarded as a state transition to same state, while any call to a new instance of PageObject class, same class or another class, indicates a state transition from existing object class to the return value class.</p><p>More about state and state transition in testing could be found at <a href="https://www.cs.helsinki.fi/u/paakki/software-testing-s05-Ch611.pdf">State based Testing</a>.</p><h2 id="smart-pages-and-page-theme">Smart Pages and Page Theme</h2><p>The above PageBase and PageObjects are straight through samples for simple scenarios. For sophesticated E2E (end-to-end) acceptance testing, sometimes the applicaiton engine is more complicated that we can hardly predict the targeted page from current state.</p><p>Based on practices and technical discussion with buddies recently, two techniques could be introduced to support such "smart" acceptance test.</p><p><strong>Smart Pages</strong>: Smart pages do not define which exact page the application engine will run to next step but just offer loose check points as excluding list and accepted list, or, nothing. The transitioned page will be recognized smartly by PageObject.</p><p>For example, if P1 can lead to P2 or P3 and both are accepted scenarios, PageObject will detect which page it is on after execution P1. It could be from title, URL, or, a CSS selector condition. When it detects current page is P2 and P2 is accepted, it will load the page definition from prepared data files to offer a map of wrappered elemenets with actions as input, text extraction, regular expression check, variable get/set, mouse events, et.</p><p><strong>Page Theme</strong>: Themes are predefined states for current page. For example, if current Page is an interactive page, the PageObject will first check theme before searching on element map. Which could be a chained map with precedences.</p><h2 id="fuzzing-test-data-factory">Fuzzing Test (Data Factory)</h2><p>Another approach to "Smart" Test is fuzzing test. The PageObject is created with a set of fuzzing rules instead of a data set loaded from persistence. (TBC)</p><h3 id="data-fuzzing">Data Fuzzing</h3><p>OWASP JBroFuzz is a popular Fuzzer lib to support fuzzing test. It offers various fuzzer DB definition and customized features to support data fuzzing.</p><h3 id="sequence-fuzzing">Sequence Fuzzing</h3><p>With JUnit, the execution sequence is able to customize with <span class="citation" data-cites="Rule">@Rule</span>.</p><h2 id="further-topics">Further Topics</h2><p>Classic PageObject spends too much efforts on disbaling the readability (encapslation) the action implementations to archeive the code reusing. However, most of the works could be simplified to a more friendly facade with Java features. <a href="http://selenide.org/documentation/page-objects.html">selenide</a> is worthy a try to make your PageObject design works done in a graceful and faster way.</p><h2 id="references">References</h2><hr /><p>[Updated Aug13, 2017]: Update with smart pages practice tips.</p><p>[Updated Mar30]: Add the concept mapping between DB App Dev and PageObject testing.</p><p>[Updated Feb07]: Reword state transition section and publish it.</p><p>[Updated Jan23]: labelled more points to complete this note.</p><p>[EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> Selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Selenium </tag>
            
            <tag> Pageobject </tag>
            
            <tag> Web Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cucumber-JVM+Selenium+JUnit Toy released v1.2</title>
      <link href="/2017/01/13/Cucumber-JVM-Selenium-JUnit-Toy-Project-baselined-to-v1-2/"/>
      <url>/2017/01/13/Cucumber-JVM-Selenium-JUnit-Toy-Project-baselined-to-v1-2/</url>
      
        <content type="html"><![CDATA[<p>Cheers! Toy project baselined to v1.2 and all pending issues resolved.</p><figure><img src="https://i.imgur.com/HrS3TO8m.png" alt="https://github.com/maxwu/cucumber-java-toy" /><figcaption aria-hidden="true">https://github.com/maxwu/cucumber-java-toy</figcaption></figure><p><a href="https://github.com/maxwu/cucumber-java-toy">Github Link</a></p><h1 id="brief">Brief</h1><p>The target of this demo project is to show and refresh a general approach of BDD and experience the Gherkin specs as a communication tool on story definition and how to map it to JUnit case scope. It started on Monday from scratch and baselined Friday morning on schedule. Crtitial issues resolved were recorded on Github issue board, too. I recorded hints and tips in the readme markdown page. Here is a paper of note about the thoughts captured during the fast adaption phase.</p><p>There is another <a href="http://maxwu.me/2017/01/21/Tips-on-Selenium-PageObject-Design/">post</a> about tips on PageObject design in web testing. This post is on general practice with Gherkin spec and JUnit. <span id="more"></span></p><h1 id="tips-to-entry-level-cucumber-learners">Tips to Entry Level Cucumber Learners</h1><ul><li><p>First of first, <strong>Cucumber is a collaboration tool</strong>, especially in the situation to cowork with people from non-technical background on drafting specifications together. Then developers and testers also work on the "glue" part to test the real things. Most of the scenarios are not purely verified with JVM (or JS, whatever Cucumebr implementation). The test still needs to work through some third party libraries to test, as what request lib for RESTful interface, and, Selenium lib for Web Interaction test. Refer to <a href="http://eamodeorubio.github.io/bdd-with-js/">the slides</a>.</p></li><li><p>Readers migrating from Robot Framework or Junit, the suggestion is to carefully read the doc or code of <span class="citation" data-cites="Before">@Before</span> and <span class="citation" data-cites="After">@After</span>. <strong>The test is against features instead of against implemented class</strong> (the process described as mentionnd on the six Cucumber steps). It just verifies the features by seaching for Gherkin matching ("public" for Java) functions and executing them to form a report. Therefore, no matter whether the test method is executed, the <span class="citation" data-cites="Before">@Before</span> annotated methods are invoked at every scenarios by default. However, test classes are instantiated <strong>right before</strong> the first step method call or the first hooked method call. In short, <strong>step definitions and hooks are global conceptually</strong>.</p></li></ul><p>Scan and regiser the StepDefinition and hooks with below code logics:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scan</span><span class="params">(JavaBackend javaBackend, List&lt;String&gt; gluePaths)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String gluePath : gluePaths) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; glueCodeClass : classFinder.getDescendants(Object.class, packageName(gluePath))) &#123;</span><br><span class="line">            <span class="keyword">while</span> (glueCodeClass != <span class="keyword">null</span> &amp;&amp; glueCodeClass != Object.class &amp;&amp; !Utils.isInstantiable(glueCodeClass)) &#123;</span><br><span class="line">                <span class="comment">// those can&#x27;t be instantiated without container class present.</span></span><br><span class="line">                glueCodeClass = glueCodeClass.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (glueCodeClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Method method : glueCodeClass.getMethods()) &#123;</span><br><span class="line">                    scan(javaBackend, method, glueCodeClass);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Adding hook and implictly sort the <span class="citation" data-cites="Before">@Before</span> hook with a customized comparator (to support Annotation parameter "order" (default to 10,000).</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHook</span><span class="params">(Annotation annotation, Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (objectFactory.addClass(method.getDeclaringClass())) &#123;</span><br><span class="line">        <span class="keyword">if</span> (annotation.annotationType().equals(Before.class)) &#123;</span><br><span class="line">            String[] tagExpressions = ((Before) annotation).value();</span><br><span class="line">            <span class="keyword">long</span> timeout = ((Before) annotation).timeout();</span><br><span class="line">            glue.addBeforeHook(<span class="keyword">new</span> JavaHookDefinition(method, tagExpressions, ((Before) annotation).order(), timeout, objectFactory));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ...@After hook...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is not to walk thru classes and verify the annotated methods. Actually it has nothing to do with Unit Test although it is often to see JUnit as a test suite organization framework (for Gherkin feature test).</p><p>The hook execution is actually not related to how the classes are organized if default Object Factory is taken (instead of others like PicoContainer).</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runBeforeHooks</span><span class="params">(Reporter reporter, Set&lt;Tag&gt; tags)</span> </span>&#123;</span><br><span class="line">    runHooks(glue.getBeforeHooks(), reporter, tags, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAfterHooks</span><span class="params">(Reporter reporter, Set&lt;Tag&gt; tags)</span> </span>&#123;</span><br><span class="line">    runHooks(glue.getAfterHooks(), reporter, tags, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Note0: Official solution is to use <span class="citation" data-cites="tags">@tags</span> to separate "global" concepts of hooks and step methods.</p></blockquote><blockquote><p>Note1: One possible way to avoid redundant is to insert a customized annotation, e.g. GreenHook on class and thru that add lazily delay the invokation of <span class="citation" data-cites="Before">@Before</span> hooks untill the first "declared" method (not inherited, not constructor, no matter if it is from the same instanace) is processed with AspectJ.<br />Needs to code a test to verify.</p></blockquote><blockquote><p>Note2: AspectJ in test could be a separate topic for future.</p></blockquote><ul><li><p>Readers new to Cucumber, the tips is to understand Gherkin is an executable spec, therefore the implict activities shall be clarified when thinking about turning to this BDD approach.</p></li><li><p>Moving to Travis-CI and CircleCI is pretty a happay journey. However, we shall walk thru the environmental elements first as the OS, Browser version, special variables, et. The Selenium Web Driver could be well managed with WebManagerDriver lib.</p><ul><li><p><strong>Travis-CI</strong>:<a href="https://travis-ci.org/maxwu/cucumber-java-toy"> <img src="https://travis-ci.org/maxwu/cucumber-java-toy.svg?branch=dev" class="img-left" /> </a></p></li><li><p><strong>Circle CI</strong>:<a href="https://circleci.com/gh/maxwu/cucumber-java-toy"> <img src="https://circleci.com/gh/maxwu/cucumber-java-toy.svg?style=svg" class="img-left" /> </a></p></li><li><p><strong>CodeCov</strong>:<a href="https://codecov.io/gh/maxwu/cucumber-java-toy"> <img src="https://codecov.io/gh/maxwu/cucumber-java-toy/branch/dev/graph/badge.svg" class="img-left" /> </a></p></li></ul></li><li><p>Having code coverage metrics with codecov cloud service will simply save your time.</p></li><li><p>Reach out to BDD life and take it as a way to keep concentrated on valuable logics. Like the way to live with MarkDown, --"less is more". If we keep our mind focus on the valuable logics instead of being interrupted by checking those "sudden" or "interesting" things on the branch path to valuable delivery, then the productivity and consitency could have a chance to step over in a better position.</p><ul><li>Keep a markdown format notes, as README.md in github project;</li><li>Be familiar with the format and make sure taking notes won't disattract your mind;</li><li>Google search around a technical issue is fine. However, we shall keep it fast and only for occassional and easy problems. Leave the refactor and structural issues to the notes and set a fixed time slot to process this "inbox" list. Keep only one window of browser with google/stakeoverflow, or, just search with Alfred.</li></ul></li><li><p>Avoid (long) discussion with social network during the dedicated hour. Dedicated hour can be in the moring, or, the mid-night. It lasts for one hour and during this hour, only preplaned stories are considered.</p></li></ul><p>The procedure with executable Gherkin specification via Cucumber:</p><figure><img src="https://i.imgur.com/T5p23Pvm.png" alt="6 Steps with Cucumber" /><figcaption aria-hidden="true">6 Steps with Cucumber</figcaption></figure><p>Then the Red-Green-Refactor cycle starts to run. Cucumber provides a way to communicate between business and technologies, not propagation, not just collection, but a real communication. Executable spec means the specs are living as a guard or as rails. However, there are still pains and difficulties thought of during this practice.</p><ul><li>For BDD, the case design or test design is a key from beginning to the end.<ul><li>The case shall represent specs as business examples.</li><li>What else? the test shall also cover traditional test design chapters:<ul><li>These techniques include: border identification, equivalence division, branch detection, fuzzer, Orthogonal Array, et.</li></ul></li><li>Check: whether the test can pass only with given logics. Which means, if there is a future code change on concerned logics, the test is effecient and effective enough to detect with a signal (of failure or execution ignore).</li></ul></li></ul><p>Have fun and happy test.</p><h1 id="update-logs">Update Logs</h1><p><em>[Updated Feb-23]</em>: Update snapshot with <a href="http://jenkins.maxwu.me">http://jenkins.maxwu.me</a></p><p><em>[Updated Feb-09]</em>: Add a missing sentence of concept description.</p><p><em>[Updated Jan-30]</em>: Append a brief summary of red-green-refactor cycle.</p><p><em>[Updated Jan-14]</em>: Add &lt;More&gt; mark into post source.</p><p><em>[Updated Jan-15]</em>: Add thoughts paragraph-1 and refer to online slides link. Quote the JaveBack</p><p>[EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Selenium </tag>
            
            <tag> Cucumber </tag>
            
            <tag> Junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cucumber-JVM Toy with Selenium</title>
      <link href="/2017/01/12/Cucumber-JVM-Toy-with-Selenium/"/>
      <url>/2017/01/12/Cucumber-JVM-Toy-with-Selenium/</url>
      
        <content type="html"><![CDATA[<p>A toy project with full practice refreshment about Cucumber-JVM, Maven, Selenium and Page Factory Pattern implemented PageObject.</p><p>元旦后利用晚上时间启动一个练手项目,包含从Java Page Factory Pattern on Selenium 到Cucumber+JUnit的基于Maven构建.在做两年Python的自动化测试和开发后看看Java需要重新熟悉速度如何,加上Cucumber这种BDD的新概念能否很快落实理解到可以独立Debug的程度.在此期间遇到的一些有趣Tips也会记录下来.</p><p><a href="https://github.com/maxwu/cucumber-java-toy">Github Link</a></p><figure><img src="https://i.imgur.com/dLIWEREm.png" alt="Github Project Page" /><figcaption aria-hidden="true">Github Project Page</figcaption></figure><span id="more"></span><p>In addition, this toy project also introduced Travis as CI plugin, codecov as coverage plugin, circle-ci (in progress).</p><p>Github友好的CI工具包括Travis-CI和codecov也部署在项目上.目前circleci还有一些问题.</p><p>[Updated Jan 11]: 当执行到某个Scenario或Scenario Outline的实例时,该Scenario会在每个Class上都运行一次.而很多教程或书籍上都在@Before时创建测试环境/对象,在@After时候注销环境/对象(例如quit Selenium Web Driver).根据这些网上流行的例子来学习的同行显然会遇到两个问题:</p><pre><code>- 测试环境多次创建,增加了无意义的运行损耗;- 冗余代码来检测各种注销条件,bad smell of Race Condition.</code></pre><p>[Updated Jan 13]: Work around is available now.</p><ul><li><p>采用PageObject支持Cucumber-JVM测试,其PageObject的调用不必要放到@Before内,而是可以置于@Given条件内. <span class="citation" data-cites="Before内放置的内容会被不需要测试当前Scenario的Class调用">@Before内放置的内容会被不需要测试当前Scenario的Class调用</span>(因为Cucumber会在每次Scenario launch时运行每一个Test Class的@Before.也就是调用Object Factory去Reflect出每个class instance再按照顺序Loop all hooks for each scenario.run() as a test suite concept).</p></li><li><p>选择Latest webdriver和Selenium-3.0.1, Chrome的版本需要升级&gt;=v52.</p></li></ul><p>这里先把札记MD放到Gitbook share出来. <a href="https://www.gitbook.com/book/maxwu/cucumber-java-toy/details">Gitbook Link</a></p><p>[以上] [EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Selenium </tag>
            
            <tag> Cucumber </tag>
            
            <tag> Junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(Minor)Issues with Two govt.nz website</title>
      <link href="/2017/01/11/Issues-with-parliament-govt-nz-website-human-interface/"/>
      <url>/2017/01/11/Issues-with-parliament-govt-nz-website-human-interface/</url>
      
        <content type="html"><![CDATA[<blockquote><p>April 25, 2017: The same defect is found on Air New Zealand Career Board. With a quick study, the resources point to a company named <strong>"Snaphire"</strong> (resource name is com.snaphire.wicket.*). It seems the typo is with common template by Snaphire for both the two NZ government web sites.</p></blockquote><p>This post is about human interface defect instead of codes or automation as usual. Couple of real world defects are discovered on web services with local business. It might be an indicator of demand on QA engineering, both automation and manual test. At least of a pattern is discovered, for example typo, it is easy to code the pattern of spelling check and word similarity calculation with basic NLP in Python or Java. <span id="more"></span></p><p>As a phase of test, human interface test will also consider the concrete application view from end users. Usually this is part of UAT. Therefore the criticality relates to how human actions are blocked or how good/bad the experiences is.</p><p>Two Minor Level Issues with <a href="https://careers.parliament.govt.nz">careers.parliament.govt.nz</a>.</p><ol type="1"><li>The typo word "Gith<strong>i</strong>b". Here is the snapshot about how to reproduce in the <em>"registration"</em> scenario.</li></ol><p><img src="http://oei21r8n1.bkt.clouddn.com/githib-typo-defect.png?imageView/2/w/300/q/100" class="img-left" /></p><p>I really did a Google search and it came out a high probability that it is still a typo of "Gith<strong>u</strong>b".</p><blockquote><p>April 25, 2017: An inference is that either the direct career board on business web site is not intensively used, or, the applicants are not Github fans. Considering IT professionals, with local work experiences, usually co-work with agents in job seeking, it is reasonable. However, it is still not a good feeling to see such a famous term in typo in multiple official web sites.</p></blockquote><blockquote><p>Below is a screenshot of the typo. <img src="http://oei21r8n1.bkt.clouddn.com/AirNZ_Career_Snip20170425_20.png?imageView/2/w/300/q/100" /></p></blockquote><ol start="2" type="1"><li>Missing an <strong>"Other"</strong> (and a linked input element) in the source select element.</li></ol><p><img src="http://oei21r8n1.bkt.clouddn.com/missing-others-option.png?imageView/2/w/300/q/100" class="img-left" /></p><p>This might be turned to a spec question. However, in an Agile environment, spec is also executable scenario and spec is also a target to qualify. I got the information from <strong>recruit.net</strong> and there is no further source mentioned in recuirt.net post. Therefore an option of "Other(s)" here is a safe zone to access the true data.</p><ol start="3" type="1"><li>On Career baord of Air New Zealand (by same vendor), the <strong>"contact us"</strong> link leads to 404 page. The link is <a href="https://careers.airnz.co.nz/contact-us">https://careers.airnz.co.nz/contact-us</a>.</li></ol><p>This kind of 404 page indicates a missing test. In fact all links are expected to be recursively checked by automation test frameworks to perform a sanity to ensuer no 404 at all.</p><p>[Update Jan15, 2017]: Change style class to make image alignment on left with "Next" Theme. [Update Apr25, 2017]: Air New Zealand Career website has same defect. It seems Snaphire has deployed the typoe to multiple NZ government web sites.</p><p>[EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> WebGUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A defect on snapfitness website leading to 404 page</title>
      <link href="/2017/01/10/Issue-in-RESTful-API-on-fitness-website-map-query-leading-to-404-page/"/>
      <url>/2017/01/10/Issue-in-RESTful-API-on-fitness-website-map-query-leading-to-404-page/</url>
      
        <content type="html"><![CDATA[<p>When I was querying nearby Gym on snapfitness website, it targeted to an HTTP 404 page. As an automation test analyst, I wrote a letter to the webmaster with analysis pointing to backend RESTful API defect and hope it will help :_)</p><p>Note that this defect only happens with <a href="https://www.snapfitness.com/">snapfitness.com</a>, another domain <a href="https://www.snapfitness247.co.nz/">snapfitness247.con.nz</a>is still working fine to return correct JSON data on POST Web API call (thru postman).</p><p><img src="http://oei21r8n1.bkt.clouddn.com/SnapFitness-404.png?imageView/2/w/300/q/100" class="img-left" /><br /><span id="more"></span></p><p>Just FYI, the defect brief description:</p><h2 id="reproduce-steps"><u><strong><em>Reproduce Steps:</em></strong></u></h2><ol type="1"><li><p>Navigate from the homepage of snapfitness to "Find A Gym" The target URL is https://www.snapfitness.com/</p></li><li><p>Insert "Lower Hutt" into the blank of "city" and click the first result of "LOWER HUTT" This click is redirected to https://www.snapfitness.com/lower-hutt However, this URL leads to 404 page.</p></li><li><p>After a few seconds trying, guessing: the correct URL might be <a href="https://www.snapfitness.com/gyms/lower-hutt">https://www.snapfitness.com/gyms/lower-hutt</a>. This is verified.</p></li></ol><h2 id="possible-cause"><u><strong><em>Possible cause:</em></strong></u></h2><p>It tests(looks) like a typo in the backend <strong>JSON</strong> building in the Web API. Which is verified with Postman and the <strong>"infoWindow"</strong> data field in the JSON return from POST API to <strong>"www.snapfitness.com/gyms/getLocations"</strong> contains incorrect URL (which would be utilized to composite the click link of Gym places queried from map).</p><p>The test screenshot with postman to confirm above root cause guess.</p><p><img src="http://oei21r8n1.bkt.clouddn.com/snapfitness-postman.png?imageView/2/w/300/q/100" class="img-left" /></p><p>At last, below is the raw information captured from browser during issue.</p><blockquote><p>The error message on this 404 page:<br />404 PAGE NOT FOUND The page you're looking for does not exist or cannot be found at this time. If you feel you reached this page in error, please contact us at webmaster@snapfitness.com. Thank you.</p></blockquote><blockquote><p>Dev Code: objl-0bd08226-2ab2-4fa3-9473906225e76271</p></blockquote><p>[EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> Postman </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTful </tag>
            
            <tag> Defect </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flickering scenario -- terminology clarification</title>
      <link href="/2017/01/08/flickering-scenario-terminology-clarification/"/>
      <url>/2017/01/08/flickering-scenario-terminology-clarification/</url>
      
        <content type="html"><![CDATA[<p>A scenario which is in sunny day for a while but turns to rainy day in another while or another day. This scenario is also called blinking story/test. A more formal term, occassional failure. They all refer to this kind of issue.</p><p>It is quite important to resolve blinking scenarios because the issue is destorying the trust in automation. Without a full trust on automation, CI and further migration is still a dream.</p><p>Here are several hints to resolve flickering/blinking/Occassional-failing stories:</p><ul><li>Environmental reasons, perticuplarly the shared elements;</li><li>Leakage of resource, fd, memory, defragmented buddy pool, combined ID space, et;</li><li>Race condition, it is more difficult to find and usually lead to a hidden problem in products;</li></ul><p>Yes, we are talking about the three dimensions again. <strong>Logic</strong>(scope/concept/recognition), <strong>Space</strong> (leak/id/dirty/init/clean/oversize) and <strong>Time</strong> (racing/history/cache/lifetime/frequency/multithreading) are still the three friends for software engineers to think about in typical tough moment.</p><p>Good luck, testers.</p><p>[EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Automation Test </category>
          
          <category> Terminology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cucumber </tag>
            
            <tag> Flickering Scenario </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Available Shadowsocks</title>
      <link href="/2017/01/08/Available-Shadow-Socks/"/>
      <url>/2017/01/08/Available-Shadow-Socks/</url>
      
        <content type="html"><![CDATA[<p><em>"我的征途是星辰大海"--《银河英雄传》</em></p><p>刚刚过去的假期读罢<北京折叠>.其实类似的反乌托邦题材并不罕见,然而数天后仍然能感觉到作者在字里行间中透出的压抑下的无力和自嘲 -- 本贴长期更新,记录访问Internet和从Internet访问世界上最大的局域网科学方法和最佳实践. <span id="more"></span></p><p>第一次具体的感受Beijing是2000年的除夕,和厦门大学的另一位毛老师一起走路到国旗广场.后来只是去美国每次转机会路过首都机场,坐在玻璃幕墙内,躲避着午后倦倦的困意.再后来就是2008年出差去印度Banglore,国师的团体操给公司同事都留下了深刻印象,我记得第二天几乎每个人都在向我们祝贺Beijing的成功.一句老话,No free lunch,当付出和收益的主体不统一时,不在同一个空间位置甚至也不是同一个时间标度时,就像一只大手从一堆砝码里拿出一些,端到另一堆,只不过有时候是看不见的手(经济)有时候是看得见的手(政治)..."科学"获取信息的途径也经由"科学"而来.这里Shared的Shadow Socks代理包括了从科学上网和海外转国内方式都是日常使用或验证能够工作正常的方法.</p><ul><li><u>购买VPS部署SS</u>:<ul><li>最传统的方式,也比较容易上手.建议Deploy一个实例平时做其他用途,当做Back up;</li><li>VPS提供商建议选择<a href="https://bandwagonhost.com/aff.php?aff=12795">搬瓦工-www.bandwagonhost.com</a>.感恩节和圣诞会有大促.两年前9.9刀一年的最低配置一直很稳定.这个链接点进去包含了我的推荐码.以后我会更新更多Promotion信息.</li><li>选择VPS需要看机房配置和迁移方便程度.搬瓦工上在不同机房比如LA迁移到Arizona非常方便.近期搬瓦工推出日本机房,访问速度应该能够更快.</li></ul></li><li><u>AWS EC2 配置SS</u>:<ul><li>类似传统方法,AWS提供一年期免费体验计划Free Tier.其中包含EC2最多两个T2类型实例. 配置方法和上面一样,搜索Shadowsocks的RPM安装方式,注意配置自动启动即可.</li><li>AWS的Autoscaling可以配置为一个组最多1,最少也是1.然后再Cloud Format加入RPM安装配置的步骤就可以完成HA.</li><li>EC2作为非托管服务,其上运行的服务需要用户自己配置Monitor.</li><li>最后需要注意AWS有些服务不在免费范围内,最好配置账单提醒,阈值设置为0,这样只要有Charge就可以及时收到邮件,可以第一时间查看并Escalate取消. 比如CloudFormation,如果Stack启动超过1hr应该就已经开始对特定个tsmall instance计费,及时查看计价方法.</li></ul></li><li><u>Docker Service</u>:<ul><li>樱花是日本一家Docker DevOps服务商,目前在试用期提供免费的Docker 实例服务.配置Shadow Socks的Docker Image并设置好环境变量即可.Docker服务的好处是启动关闭速度很快,修改后重新Launch只需要一分钟时间.很符合云计算的口号,Hurry Up, Go die,用过就回收,需要的时候临时起一份,负载增加的时候直接Scale out.</li><li>可以采用AWS ECS(EC2 Container Service).</li><li>类似的Docker服务DevOps提供商还很多,即使收费也基本上按需(运行时间)定价策略为主,适合只是偶尔用ShadowSocks的轻度用户或经常更换Service的用户.</li><li><a href="https://arukas.io/en/">樱花链接</a>, 记得选En语言,否则都是霓虹文字.目前樱花还在Beta阶段,每账号10个免费实例.</li><li>验证过的Image: "mritd/shadowsocks",加密方式和密码配置在环境变量内.<ul><li>需要注意,环境变量配置给Shadowsocks的port number需要在容器的配置上打开同样的端口;</li><li>这个映像已经做了自启动,启动脚本可以留空.</li></ul></li><li>其实AWS也开始提供Docker Cloud,因为樱花云已经很方便了所以AWS的Docker尚未验证过. 估计优势之一是应用Cloud Format统一描述.</li></ul></li><li><u>命令行环境以及局域网内共享代理</u>:<ul><li><p>命令行环境可以通过Privoxy来实现,将本地localhost:port设置为HTTP代理并Capture到本地的Socks代理内;</p></li><li><p>通过Privoxy也可以把HTTP Proxy端口开放出来给同一个Wi-Fi SSID的其他用户同时使用;</p><ul><li>To have launchd start privoxy now and restart at login, use below command:</li></ul><blockquote><p>brew services start privoxy</p></blockquote><ul><li>Or, if you don't want/need a background service you can just run:</li></ul><blockquote><p>privoxy /usr/local/etc/privoxy/config   </p></blockquote></li><li><p>Windows版的Shadowsocks客户端有RR Load Balance功能,而Mac版已经很不会更新也不具备这个功能;</p></li><li><p>使用Mac版需要注意SS-NG还在开放中,有一些问题,不过SS-NG内置了一个Privoxy的Binary环境.因为和本机自己的privoxy出现不一致所以SS-NG这个版本笔者这里就不验证了.</p></li></ul></li><li><u>反向穿梭</u>:<ul><li>反向穿梭后可以提升访问媒体网站的(ting)速(yin)度(yue).<ul><li>简单的方法:<ul><li>DNS改为: 45.32.72.192, 158.69.209.100</li></ul></li><li>Android设备:<ul><li>Proxy设置为手动,PAC地址是http://pac.uku.im/pac.pac</li></ul></li><li>Mac和Linux, set different DNS for different domains:<ul><li><p>在Mac下DNS信息存储于/etc/resolv.conf</p></li><li><p>如果处于安全或访问时间考虑希望上面Ublock志愿提供的DNS仅供访问网易云音乐,可以建立目录/etc/resolver/163.com并写入如下内容:</p><p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nameserver 158.69.209.100</span><br><span class="line">nameserver 45.32.72.192</span><br></pre></td></tr></table></figure></p></li></ul></li></ul></li><li>体验反向Shadowsocks代理可以试用下面这个: 信息来自Mitbbs,工程团队公开出来做压力测试用端口,验证可用.</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server_IP：182.92.156.212</span><br><span class="line">server_port : 10062</span><br><span class="line">local_port : 1080,</span><br><span class="line">password : 61203456</span><br><span class="line">method : aes-256-cfb</span><br></pre></td></tr></table></figure></li></ul><p>以上.</p>]]></content>
      
      
      <categories>
          
          <category> Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Corrigendum for AWS Chinese Learners</title>
      <link href="/2017/01/07/Corrigendum-for-AWS-Chinese-Learners/"/>
      <url>/2017/01/07/Corrigendum-for-AWS-Chinese-Learners/</url>
      
        <content type="html"><![CDATA[<p>It is a corrigendum on AWS official online documents in mainly for the translated documents in Chinese language. The list was firstly collected when I was quickly searching for some information during AWS studying but found the information was obsoleted. Would keep it updated and maintained lively.</p><ol type="1"><li><p>RDS DB size threshold is wrong in Chinese version;</p></li><li><p>Days between two certificate tests one candidate shall spend; The number is incorrect according to global AWS policy;</p></li><li><p>Private IP is only returned after stop and “restart”. https://aws.amazon.com/ec2/faqs/</p></li><li><p>The bottom part, the words shall be "&lt;5MB" http://docs.aws.amazon.com/AmazonS3/latest/dev/qfacts.html</p></li><li><p>“评估逻辑”—&gt;”求值逻辑” This a better translation on term. http://docs.aws.amazon.com/zh_cn/sns/latest/dg/AccessPolicyLanguage_EvaluationLogic.html</p></li><li><p>S3 Doc translation:将VisibilityTimeout设置为0秒不会导致将消息移动到死信 队列。”=&gt; “设置为0秒则消息不会移动到死信队列" http://docs.aws.amazon.com/zh_cn/AWSSimpleQueueService/latest/SQSDeveloperGuide/AboutVT.html?shortFooter=true "</p></li></ol><p>[EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get-aws-cda-certificate</title>
      <link href="/2017/01/07/get-aws-cda-certificate/"/>
      <url>/2017/01/07/get-aws-cda-certificate/</url>
      
        <content type="html"><![CDATA[<h2 id="追加--aws-developer-associate">追加--AWS Developer Associate</h2><p>在去年(2016)10月考过SAA(Solution Architect Associate)后发现原来考试的顺序并非→_→最优. Developer的Certificate最简单,其次Sys-Admin,而SAA反而在入门级里面有一些难度.应当感谢一下南京考点的涂老师,在距离飞新西兰只有不到两周的时间很顺利的订上了时间段.</p><p>现在有很多回忆已经不太清晰了,当时的感觉就是CDA比SAA要容易的多,大约有一半左右内容或知识点重复覆盖.有些个别的场景就要stand in my shoes,从提问者的角度来思考哪个方案更合理. 既然网速和上次一样仍然比较慢,可以采取的策略就是也不用理会题目上打得星标记号.时间总是双倍的够,所以做一遍然后再从头到尾都看一遍即可.多上网找找讲座可以赚考试券补贴20USD,拿来兑一次模拟考培养战力,推荐上微信搜云果儿.云果公司在深圳,服务很快速,微信或者淘宝上付款后考试卷两天内就可以发到邮箱或微信.拿到考试券就可以去官网上Redeem.虽然是Developer的认证,对开发这部分几乎没有什么涉及,所以平时Practice的Lambda, serverless等对这个考试本身没有直接帮助.但是如果能够很好的理解dev/ops框架,这个考试基本上不会有难度.</p><p><img src="http://oei21r8n1.bkt.clouddn.com/AWS-CDA-Score.png?imageView/2/w/400/q/100" class="img-left" /></p><p><img src="http://oei21r8n1.bkt.clouddn.com/AWS-CDA-Cert.png?imageView/2/w/400/q/100" class="img-left" /></p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> CDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Job-Seeking in Wellington</title>
      <link href="/2016/12/09/Start-Job-Seeking-in-Wellington/"/>
      <url>/2016/12/09/Start-Job-Seeking-in-Wellington/</url>
      
        <content type="html"><![CDATA[<h1 id="seeking-a-software-job-in-wellington-region">Seeking a Software Job in Wellington Region</h1><p>LinkedIn and Github links are available on this blog left navigation bar.</p><ul><li>http://www.maxwu.me</li><li>http://stackoverflow.com/story/maxwu</li><li>http://stackoverflow.com/cv/maxwu</li><li>https://github.com/maxwu</li></ul><h1 id="brief-introduction">Brief Introduction</h1><p>Max is a software engineer in automation test area with development background, especially on Linux platform.</p><p>As an automation test engineer, I have worked with Cucumber-JVM + JUnit + Selenium in Java and Robot Framework + Selenium + customized keyword lib in Python.In those projects, I participated System Integration Test and Third Party Acceptance Test over several interfaces as CLI, Web Driver, RESTful and proprietary device protocols. As for Web testing, I have designed Page Objects and also Bot Style automation libraries to support the different test strategies. I also got Java programming and SQL experiences from the previous development work on security message gateway products. I set up the first Jenkins node to support building CI infrastructure for our team. The automation test cluster was built with vSphere environment. Meanwhile, my personal open source projects are migrated to Travis and Circle with Maven and JUnit. I keep the self-learning on test theories, programming skills and AWS technologies in off hours.</p><p>In summary, I would like to highlight three points: the hands on skills on test automation, proven fast learning record and strong problem resolving ability.</p><h1 id="resume">Resume</h1><ul><li><p>Automation Test: <a href="http://resume.maxwu.me/">http://resume.maxwu.me/</a></p></li><li><p>Developer/DevOps: <a href="http://cv.maxwu.me/">http://cv.maxwu.me/</a></p></li></ul><h1 id="lessons">Lessons</h1><ul><li>The remarkable number.</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ⓑ maxwu  16:53  ~  4WLG  find ./ -name &quot;*.docx&quot; |grep -i ps |wc -l</span><br><span class="line">      88</span><br><span class="line">ⓑ maxwu  16:54  ~  4WLG</span><br></pre></td></tr></table></figure><p><em>Updated Feb 16, 2017</em></p><p>[EOF]</p>]]></content>
      
      
      <categories>
          
          <category> Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Job </tag>
            
            <tag> Resume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>get-aws-saa-on-monday</title>
      <link href="/2016/10/30/get-aws-saa-on-monday/"/>
      <url>/2016/10/30/get-aws-saa-on-monday/</url>
      
        <content type="html"><![CDATA[<h2 id="先完成一个小目标--aws-architect-associate">先完成一个小目标--AWS Architect Associate</h2><p><img src="http://oei21r8n1.bkt.clouddn.com/AWS_Office_20160923_135324.jpg?imageView/2/w/400/q/100" alt="AWS-Office" /> <span id="more"></span></p><p>寒雨面前,南京的秋天就像小花猫一样不堪一击,乖乖的让位于霸气的冬雨. 上周Max急急忙忙通过云果购买了考试券并且很顺利注册到考试时间.周末用听讲座赚来的考试券(20USD)在考试网站上兑了第二次模拟考,都考了95%的好分数.其实同一个账号不管考几次模拟考都是只有20道题(正式考试60道)而且不会变化,但是同样的20道题可以大致上衡量出过去的一周进步是否稳固足够.周一(10/24)继续这个好兆头,顺利考了一个92%回来.遇到的问题是考试系统的网络延迟很大,每一题的刷新超过1min,而即使是英语考,每道题大概也只需要20~30s就可以完成.大量的时间其实花在等待考试系统页面刷新.</p><p>根据研读的经验,AWS很多中文内容大约是采用了机器翻译和人工审核结合的方式,难免有一些不准确甚至数值或用语错误.为了和网上大家在Forum和Guru讨论的tips建立很好的知识关联,这里建议有兴趣的童鞋都直接报考英语版本,某些时候可以把AWS的资料中英对照着看来提高回顾的速度,毕竟资料内容比较多浏览理解几遍其实很花时间. 这门考试的范围很大而Associate对每个点的要求并不都是非常深入,不过涵盖的知识点比较多而散落在各个部分.因此大量的阅读和相互参照的学习是个好方法.</p><p><img src="http://oei21r8n1.bkt.clouddn.com/AWS-SAA-Score.png?imageView/2/w/400/q/100" class="img-left" /></p><p><img src="http://oei21r8n1.bkt.clouddn.com/AWS-ASS-Cert-v2.png?imageView/2/w/400/q/100" class="img-left" /></p>]]></content>
      
      
      <categories>
          
          <category> Cloud </category>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> SAA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git command hanging up on Mac</title>
      <link href="/2016/10/03/Git-command-hanging-up-on-Mac/"/>
      <url>/2016/10/03/Git-command-hanging-up-on-Mac/</url>
      
        <content type="html"><![CDATA[<h2 id="解决mac上git命令失去响应步骤">解决Mac上git命令失去响应步骤</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew uninstall git</span><br><span class="line">brew uninstall curl</span><br><span class="line">brew install curl --with-openssl</span><br><span class="line">brew install git —with-brewed-curl —with-brewed-openssl</span><br></pre></td></tr></table></figure><p>SS梯子可以参照proxychains-ng应用到cli.</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dropme</title>
      <link href="/2016/10/02/dropme/"/>
      <url>/2016/10/02/dropme/</url>
      
        <content type="html"><![CDATA[<h2 id="dropme">Dropme</h2><blockquote><p>回归hexo,测试页面.</p></blockquote><p>English posts will be published on this site.</p>]]></content>
      
      
      <categories>
          
          <category> Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
